
SMART_HOME.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002964  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000070  00800060  00002964  000029d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002d18  00000000  00000000  00002a48  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000017fe  00000000  00000000  00005760  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00006f5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  0000709e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  0000720e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00008e57  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00009d42  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  0000aaf0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  0000ac50  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  0000aedd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000b6ab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e6       	ldi	r30, 0x64	; 100
      68:	f9 e2       	ldi	r31, 0x29	; 41
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 3d       	cpi	r26, 0xD0	; 208
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 3d 13 	call	0x267a	; 0x267a <main>
      7a:	0c 94 b0 14 	jmp	0x2960	; 0x2960 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 70 14 	jmp	0x28e0	; 0x28e0 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a1 eb       	ldi	r26, 0xB1	; 177
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 8c 14 	jmp	0x2918	; 0x2918 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 7c 14 	jmp	0x28f8	; 0x28f8 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 98 14 	jmp	0x2930	; 0x2930 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 7c 14 	jmp	0x28f8	; 0x28f8 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 98 14 	jmp	0x2930	; 0x2930 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 70 14 	jmp	0x28e0	; 0x28e0 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__stack+0x2f>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__stack+0x45>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__stack+0x1d>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__stack+0x2f>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__stack+0x25>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__stack+0x2b>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__stack+0x45>
     484:	81 eb       	ldi	r24, 0xB1	; 177
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__stack+0x1b7>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__stack+0x41>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__stack+0x1b7>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__stack+0x57>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__stack+0x1b7>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__stack+0xc3>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__stack+0xb7>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__stack+0xdf>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__stack+0xf9>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__stack+0x7f>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__stack+0x13d>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__stack+0x131>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__stack+0x10f>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__stack+0x15b>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__stack+0x143>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__stack+0x19d>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__stack+0x19d>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__stack+0x19d>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__stack+0x1a7>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 8c 14 	jmp	0x2918	; 0x2918 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 7c 14 	jmp	0x28f8	; 0x28f8 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 98 14 	jmp	0x2930	; 0x2930 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 7c 14 	jmp	0x28f8	; 0x28f8 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 98 14 	jmp	0x2930	; 0x2930 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 7c 14 	jmp	0x28f8	; 0x28f8 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 98 14 	jmp	0x2930	; 0x2930 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 80 14 	jmp	0x2900	; 0x2900 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 9c 14 	jmp	0x2938	; 0x2938 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__pack_f+0x178>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__pack_f+0x172>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__pack_f+0x17c>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__pack_f+0x114>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__pack_f+0x76>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__pack_f+0xca>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__pack_f+0x86>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__pack_f+0x7e>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__pack_f+0x9c>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__pack_f+0x94>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__pack_f+0xbe>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__pack_f+0xee>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__pack_f+0xf6>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__pack_f+0xf6>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__pack_f+0x10e>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__pack_f+0x162>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__pack_f+0x172>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__pack_f+0x144>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__pack_f+0x154>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__pack_f+0x14c>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__pack_f+0x162>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__pack_f+0x164>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__pack_f+0x17c>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <ADC_init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void ADC_init(void)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
	/* ADMUX Register Bits Description:
	 * REFS1:0 = 00 to choose to connect external reference voltage by input this voltage through AREF pin
	 * ADLAR   = 0 right adjusted
	 * MUX4:0  = 00000 to choose channel 0 as initialization
	 */
	ADMUX = 0;
     b3e:	e7 e2       	ldi	r30, 0x27	; 39
     b40:	f0 e0       	ldi	r31, 0x00	; 0
     b42:	10 82       	st	Z, r1
	 * ADEN    = 1 Enable ADC
	 * ADIE    = 0 Disable ADC Interrupt
	 * ADATE   = 0 Disable Auto Trigger
	 * ADPS2:0 = 011 to choose ADC_Clock = F_CPU/8 = 1Mhz/8 = 125Khz --> ADC must operate in range 50-200Khz
	 */
	ADCSRA = (1<<ADEN) | (1<<ADPS1) | (1<<ADPS0);
     b44:	e6 e2       	ldi	r30, 0x26	; 38
     b46:	f0 e0       	ldi	r31, 0x00	; 0
     b48:	83 e8       	ldi	r24, 0x83	; 131
     b4a:	80 83       	st	Z, r24
}
     b4c:	cf 91       	pop	r28
     b4e:	df 91       	pop	r29
     b50:	08 95       	ret

00000b52 <ADC_readChannel>:

int ADC_readChannel(int channel_num)
{
     b52:	df 93       	push	r29
     b54:	cf 93       	push	r28
     b56:	00 d0       	rcall	.+0      	; 0xb58 <ADC_readChannel+0x6>
     b58:	cd b7       	in	r28, 0x3d	; 61
     b5a:	de b7       	in	r29, 0x3e	; 62
     b5c:	9a 83       	std	Y+2, r25	; 0x02
     b5e:	89 83       	std	Y+1, r24	; 0x01
	channel_num &= 0x07; /* Input channel number must be from 0 --> 7 */
     b60:	89 81       	ldd	r24, Y+1	; 0x01
     b62:	9a 81       	ldd	r25, Y+2	; 0x02
     b64:	87 70       	andi	r24, 0x07	; 7
     b66:	90 70       	andi	r25, 0x00	; 0
     b68:	9a 83       	std	Y+2, r25	; 0x02
     b6a:	89 83       	std	Y+1, r24	; 0x01
	ADMUX &= 0xE0; /* Clear first 5 bits in the ADMUX (channel number MUX4:0 bits) before set the required channel */
     b6c:	a7 e2       	ldi	r26, 0x27	; 39
     b6e:	b0 e0       	ldi	r27, 0x00	; 0
     b70:	e7 e2       	ldi	r30, 0x27	; 39
     b72:	f0 e0       	ldi	r31, 0x00	; 0
     b74:	80 81       	ld	r24, Z
     b76:	80 7e       	andi	r24, 0xE0	; 224
     b78:	8c 93       	st	X, r24
	ADMUX = ADMUX | channel_num; /* Choose the correct channel by setting the channel number in MUX4:0 bits */
     b7a:	a7 e2       	ldi	r26, 0x27	; 39
     b7c:	b0 e0       	ldi	r27, 0x00	; 0
     b7e:	e7 e2       	ldi	r30, 0x27	; 39
     b80:	f0 e0       	ldi	r31, 0x00	; 0
     b82:	80 81       	ld	r24, Z
     b84:	98 2f       	mov	r25, r24
     b86:	89 81       	ldd	r24, Y+1	; 0x01
     b88:	89 2b       	or	r24, r25
     b8a:	8c 93       	st	X, r24
	SETBIT(ADCSRA,ADSC); /* Start conversion write '1' to ADSC */
     b8c:	a6 e2       	ldi	r26, 0x26	; 38
     b8e:	b0 e0       	ldi	r27, 0x00	; 0
     b90:	e6 e2       	ldi	r30, 0x26	; 38
     b92:	f0 e0       	ldi	r31, 0x00	; 0
     b94:	80 81       	ld	r24, Z
     b96:	80 64       	ori	r24, 0x40	; 64
     b98:	8c 93       	st	X, r24
	while(BIT_IS_CLEAR(ADCSRA,ADIF)); /* Wait for conversion to complete, ADIF becomes '1' */
     b9a:	e6 e2       	ldi	r30, 0x26	; 38
     b9c:	f0 e0       	ldi	r31, 0x00	; 0
     b9e:	80 81       	ld	r24, Z
     ba0:	88 2f       	mov	r24, r24
     ba2:	90 e0       	ldi	r25, 0x00	; 0
     ba4:	80 71       	andi	r24, 0x10	; 16
     ba6:	90 70       	andi	r25, 0x00	; 0
     ba8:	00 97       	sbiw	r24, 0x00	; 0
     baa:	b9 f3       	breq	.-18     	; 0xb9a <ADC_readChannel+0x48>
	SETBIT(ADCSRA,ADIF); /* Clear ADIF by write '1' to it :) */
     bac:	a6 e2       	ldi	r26, 0x26	; 38
     bae:	b0 e0       	ldi	r27, 0x00	; 0
     bb0:	e6 e2       	ldi	r30, 0x26	; 38
     bb2:	f0 e0       	ldi	r31, 0x00	; 0
     bb4:	80 81       	ld	r24, Z
     bb6:	80 61       	ori	r24, 0x10	; 16
     bb8:	8c 93       	st	X, r24
	return ADC; /* Read the digital value from the data register */
     bba:	e4 e2       	ldi	r30, 0x24	; 36
     bbc:	f0 e0       	ldi	r31, 0x00	; 0
     bbe:	80 81       	ld	r24, Z
     bc0:	91 81       	ldd	r25, Z+1	; 0x01
}
     bc2:	0f 90       	pop	r0
     bc4:	0f 90       	pop	r0
     bc6:	cf 91       	pop	r28
     bc8:	df 91       	pop	r29
     bca:	08 95       	ret

00000bcc <Timer0_inti>:
 */
#include <avr/io.h>
#include "Lib/Macros.h"
#include "Lib/stdTypes.h"
void Timer0_inti()
{
     bcc:	df 93       	push	r29
     bce:	cf 93       	push	r28
     bd0:	cd b7       	in	r28, 0x3d	; 61
     bd2:	de b7       	in	r29, 0x3e	; 62

	SETBIT(TCCR0, WGM01);
     bd4:	a3 e5       	ldi	r26, 0x53	; 83
     bd6:	b0 e0       	ldi	r27, 0x00	; 0
     bd8:	e3 e5       	ldi	r30, 0x53	; 83
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	80 81       	ld	r24, Z
     bde:	88 60       	ori	r24, 0x08	; 8
     be0:	8c 93       	st	X, r24
	SETBIT(TCCR0, WGM00);
     be2:	a3 e5       	ldi	r26, 0x53	; 83
     be4:	b0 e0       	ldi	r27, 0x00	; 0
     be6:	e3 e5       	ldi	r30, 0x53	; 83
     be8:	f0 e0       	ldi	r31, 0x00	; 0
     bea:	80 81       	ld	r24, Z
     bec:	80 64       	ori	r24, 0x40	; 64
     bee:	8c 93       	st	X, r24

	SETBIT(TCCR0, COM01);
     bf0:	a3 e5       	ldi	r26, 0x53	; 83
     bf2:	b0 e0       	ldi	r27, 0x00	; 0
     bf4:	e3 e5       	ldi	r30, 0x53	; 83
     bf6:	f0 e0       	ldi	r31, 0x00	; 0
     bf8:	80 81       	ld	r24, Z
     bfa:	80 62       	ori	r24, 0x20	; 32
     bfc:	8c 93       	st	X, r24
	SETBIT(TCCR0, COM00);
     bfe:	a3 e5       	ldi	r26, 0x53	; 83
     c00:	b0 e0       	ldi	r27, 0x00	; 0
     c02:	e3 e5       	ldi	r30, 0x53	; 83
     c04:	f0 e0       	ldi	r31, 0x00	; 0
     c06:	80 81       	ld	r24, Z
     c08:	80 61       	ori	r24, 0x10	; 16
     c0a:	8c 93       	st	X, r24

	SETBIT(TCCR0, COM00);
     c0c:	a3 e5       	ldi	r26, 0x53	; 83
     c0e:	b0 e0       	ldi	r27, 0x00	; 0
     c10:	e3 e5       	ldi	r30, 0x53	; 83
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	80 81       	ld	r24, Z
     c16:	80 61       	ori	r24, 0x10	; 16
     c18:	8c 93       	st	X, r24
}
     c1a:	cf 91       	pop	r28
     c1c:	df 91       	pop	r29
     c1e:	08 95       	ret

00000c20 <set_duty_Ciycle>:
void set_duty_Ciycle(float copy_Floatduty) {
     c20:	0f 93       	push	r16
     c22:	1f 93       	push	r17
     c24:	df 93       	push	r29
     c26:	cf 93       	push	r28
     c28:	00 d0       	rcall	.+0      	; 0xc2a <set_duty_Ciycle+0xa>
     c2a:	00 d0       	rcall	.+0      	; 0xc2c <set_duty_Ciycle+0xc>
     c2c:	cd b7       	in	r28, 0x3d	; 61
     c2e:	de b7       	in	r29, 0x3e	; 62
     c30:	69 83       	std	Y+1, r22	; 0x01
     c32:	7a 83       	std	Y+2, r23	; 0x02
     c34:	8b 83       	std	Y+3, r24	; 0x03
     c36:	9c 83       	std	Y+4, r25	; 0x04
	OCR0 = 255 * copy_Floatduty;
     c38:	0c e5       	ldi	r16, 0x5C	; 92
     c3a:	10 e0       	ldi	r17, 0x00	; 0
     c3c:	69 81       	ldd	r22, Y+1	; 0x01
     c3e:	7a 81       	ldd	r23, Y+2	; 0x02
     c40:	8b 81       	ldd	r24, Y+3	; 0x03
     c42:	9c 81       	ldd	r25, Y+4	; 0x04
     c44:	20 e0       	ldi	r18, 0x00	; 0
     c46:	30 e0       	ldi	r19, 0x00	; 0
     c48:	4f e7       	ldi	r20, 0x7F	; 127
     c4a:	53 e4       	ldi	r21, 0x43	; 67
     c4c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     c50:	dc 01       	movw	r26, r24
     c52:	cb 01       	movw	r24, r22
     c54:	bc 01       	movw	r22, r24
     c56:	cd 01       	movw	r24, r26
     c58:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     c5c:	dc 01       	movw	r26, r24
     c5e:	cb 01       	movw	r24, r22
     c60:	f8 01       	movw	r30, r16
     c62:	80 83       	st	Z, r24
}
     c64:	0f 90       	pop	r0
     c66:	0f 90       	pop	r0
     c68:	0f 90       	pop	r0
     c6a:	0f 90       	pop	r0
     c6c:	cf 91       	pop	r28
     c6e:	df 91       	pop	r29
     c70:	1f 91       	pop	r17
     c72:	0f 91       	pop	r16
     c74:	08 95       	ret

00000c76 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(u8 port_num, u8 pin_num, GPIO_PinDirectionType direction)
{
     c76:	df 93       	push	r29
     c78:	cf 93       	push	r28
     c7a:	00 d0       	rcall	.+0      	; 0xc7c <GPIO_setupPinDirection+0x6>
     c7c:	00 d0       	rcall	.+0      	; 0xc7e <GPIO_setupPinDirection+0x8>
     c7e:	0f 92       	push	r0
     c80:	cd b7       	in	r28, 0x3d	; 61
     c82:	de b7       	in	r29, 0x3e	; 62
     c84:	89 83       	std	Y+1, r24	; 0x01
     c86:	6a 83       	std	Y+2, r22	; 0x02
     c88:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     c8a:	8a 81       	ldd	r24, Y+2	; 0x02
     c8c:	88 30       	cpi	r24, 0x08	; 8
     c8e:	08 f0       	brcs	.+2      	; 0xc92 <GPIO_setupPinDirection+0x1c>
     c90:	d5 c0       	rjmp	.+426    	; 0xe3c <GPIO_setupPinDirection+0x1c6>
     c92:	89 81       	ldd	r24, Y+1	; 0x01
     c94:	84 30       	cpi	r24, 0x04	; 4
     c96:	08 f0       	brcs	.+2      	; 0xc9a <GPIO_setupPinDirection+0x24>
     c98:	d1 c0       	rjmp	.+418    	; 0xe3c <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     c9a:	89 81       	ldd	r24, Y+1	; 0x01
     c9c:	28 2f       	mov	r18, r24
     c9e:	30 e0       	ldi	r19, 0x00	; 0
     ca0:	3d 83       	std	Y+5, r19	; 0x05
     ca2:	2c 83       	std	Y+4, r18	; 0x04
     ca4:	8c 81       	ldd	r24, Y+4	; 0x04
     ca6:	9d 81       	ldd	r25, Y+5	; 0x05
     ca8:	81 30       	cpi	r24, 0x01	; 1
     caa:	91 05       	cpc	r25, r1
     cac:	09 f4       	brne	.+2      	; 0xcb0 <GPIO_setupPinDirection+0x3a>
     cae:	43 c0       	rjmp	.+134    	; 0xd36 <GPIO_setupPinDirection+0xc0>
     cb0:	2c 81       	ldd	r18, Y+4	; 0x04
     cb2:	3d 81       	ldd	r19, Y+5	; 0x05
     cb4:	22 30       	cpi	r18, 0x02	; 2
     cb6:	31 05       	cpc	r19, r1
     cb8:	2c f4       	brge	.+10     	; 0xcc4 <GPIO_setupPinDirection+0x4e>
     cba:	8c 81       	ldd	r24, Y+4	; 0x04
     cbc:	9d 81       	ldd	r25, Y+5	; 0x05
     cbe:	00 97       	sbiw	r24, 0x00	; 0
     cc0:	71 f0       	breq	.+28     	; 0xcde <GPIO_setupPinDirection+0x68>
     cc2:	bc c0       	rjmp	.+376    	; 0xe3c <GPIO_setupPinDirection+0x1c6>
     cc4:	2c 81       	ldd	r18, Y+4	; 0x04
     cc6:	3d 81       	ldd	r19, Y+5	; 0x05
     cc8:	22 30       	cpi	r18, 0x02	; 2
     cca:	31 05       	cpc	r19, r1
     ccc:	09 f4       	brne	.+2      	; 0xcd0 <GPIO_setupPinDirection+0x5a>
     cce:	5f c0       	rjmp	.+190    	; 0xd8e <GPIO_setupPinDirection+0x118>
     cd0:	8c 81       	ldd	r24, Y+4	; 0x04
     cd2:	9d 81       	ldd	r25, Y+5	; 0x05
     cd4:	83 30       	cpi	r24, 0x03	; 3
     cd6:	91 05       	cpc	r25, r1
     cd8:	09 f4       	brne	.+2      	; 0xcdc <GPIO_setupPinDirection+0x66>
     cda:	85 c0       	rjmp	.+266    	; 0xde6 <GPIO_setupPinDirection+0x170>
     cdc:	af c0       	rjmp	.+350    	; 0xe3c <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     cde:	8b 81       	ldd	r24, Y+3	; 0x03
     ce0:	81 30       	cpi	r24, 0x01	; 1
     ce2:	a1 f4       	brne	.+40     	; 0xd0c <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     ce4:	aa e3       	ldi	r26, 0x3A	; 58
     ce6:	b0 e0       	ldi	r27, 0x00	; 0
     ce8:	ea e3       	ldi	r30, 0x3A	; 58
     cea:	f0 e0       	ldi	r31, 0x00	; 0
     cec:	80 81       	ld	r24, Z
     cee:	48 2f       	mov	r20, r24
     cf0:	8a 81       	ldd	r24, Y+2	; 0x02
     cf2:	28 2f       	mov	r18, r24
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	81 e0       	ldi	r24, 0x01	; 1
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	02 2e       	mov	r0, r18
     cfc:	02 c0       	rjmp	.+4      	; 0xd02 <GPIO_setupPinDirection+0x8c>
     cfe:	88 0f       	add	r24, r24
     d00:	99 1f       	adc	r25, r25
     d02:	0a 94       	dec	r0
     d04:	e2 f7       	brpl	.-8      	; 0xcfe <GPIO_setupPinDirection+0x88>
     d06:	84 2b       	or	r24, r20
     d08:	8c 93       	st	X, r24
     d0a:	98 c0       	rjmp	.+304    	; 0xe3c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     d0c:	aa e3       	ldi	r26, 0x3A	; 58
     d0e:	b0 e0       	ldi	r27, 0x00	; 0
     d10:	ea e3       	ldi	r30, 0x3A	; 58
     d12:	f0 e0       	ldi	r31, 0x00	; 0
     d14:	80 81       	ld	r24, Z
     d16:	48 2f       	mov	r20, r24
     d18:	8a 81       	ldd	r24, Y+2	; 0x02
     d1a:	28 2f       	mov	r18, r24
     d1c:	30 e0       	ldi	r19, 0x00	; 0
     d1e:	81 e0       	ldi	r24, 0x01	; 1
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	02 2e       	mov	r0, r18
     d24:	02 c0       	rjmp	.+4      	; 0xd2a <GPIO_setupPinDirection+0xb4>
     d26:	88 0f       	add	r24, r24
     d28:	99 1f       	adc	r25, r25
     d2a:	0a 94       	dec	r0
     d2c:	e2 f7       	brpl	.-8      	; 0xd26 <GPIO_setupPinDirection+0xb0>
     d2e:	80 95       	com	r24
     d30:	84 23       	and	r24, r20
     d32:	8c 93       	st	X, r24
     d34:	83 c0       	rjmp	.+262    	; 0xe3c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     d36:	8b 81       	ldd	r24, Y+3	; 0x03
     d38:	81 30       	cpi	r24, 0x01	; 1
     d3a:	a1 f4       	brne	.+40     	; 0xd64 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     d3c:	a7 e3       	ldi	r26, 0x37	; 55
     d3e:	b0 e0       	ldi	r27, 0x00	; 0
     d40:	e7 e3       	ldi	r30, 0x37	; 55
     d42:	f0 e0       	ldi	r31, 0x00	; 0
     d44:	80 81       	ld	r24, Z
     d46:	48 2f       	mov	r20, r24
     d48:	8a 81       	ldd	r24, Y+2	; 0x02
     d4a:	28 2f       	mov	r18, r24
     d4c:	30 e0       	ldi	r19, 0x00	; 0
     d4e:	81 e0       	ldi	r24, 0x01	; 1
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	02 2e       	mov	r0, r18
     d54:	02 c0       	rjmp	.+4      	; 0xd5a <GPIO_setupPinDirection+0xe4>
     d56:	88 0f       	add	r24, r24
     d58:	99 1f       	adc	r25, r25
     d5a:	0a 94       	dec	r0
     d5c:	e2 f7       	brpl	.-8      	; 0xd56 <GPIO_setupPinDirection+0xe0>
     d5e:	84 2b       	or	r24, r20
     d60:	8c 93       	st	X, r24
     d62:	6c c0       	rjmp	.+216    	; 0xe3c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     d64:	a7 e3       	ldi	r26, 0x37	; 55
     d66:	b0 e0       	ldi	r27, 0x00	; 0
     d68:	e7 e3       	ldi	r30, 0x37	; 55
     d6a:	f0 e0       	ldi	r31, 0x00	; 0
     d6c:	80 81       	ld	r24, Z
     d6e:	48 2f       	mov	r20, r24
     d70:	8a 81       	ldd	r24, Y+2	; 0x02
     d72:	28 2f       	mov	r18, r24
     d74:	30 e0       	ldi	r19, 0x00	; 0
     d76:	81 e0       	ldi	r24, 0x01	; 1
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	02 2e       	mov	r0, r18
     d7c:	02 c0       	rjmp	.+4      	; 0xd82 <GPIO_setupPinDirection+0x10c>
     d7e:	88 0f       	add	r24, r24
     d80:	99 1f       	adc	r25, r25
     d82:	0a 94       	dec	r0
     d84:	e2 f7       	brpl	.-8      	; 0xd7e <GPIO_setupPinDirection+0x108>
     d86:	80 95       	com	r24
     d88:	84 23       	and	r24, r20
     d8a:	8c 93       	st	X, r24
     d8c:	57 c0       	rjmp	.+174    	; 0xe3c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     d8e:	8b 81       	ldd	r24, Y+3	; 0x03
     d90:	81 30       	cpi	r24, 0x01	; 1
     d92:	a1 f4       	brne	.+40     	; 0xdbc <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     d94:	a4 e3       	ldi	r26, 0x34	; 52
     d96:	b0 e0       	ldi	r27, 0x00	; 0
     d98:	e4 e3       	ldi	r30, 0x34	; 52
     d9a:	f0 e0       	ldi	r31, 0x00	; 0
     d9c:	80 81       	ld	r24, Z
     d9e:	48 2f       	mov	r20, r24
     da0:	8a 81       	ldd	r24, Y+2	; 0x02
     da2:	28 2f       	mov	r18, r24
     da4:	30 e0       	ldi	r19, 0x00	; 0
     da6:	81 e0       	ldi	r24, 0x01	; 1
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	02 2e       	mov	r0, r18
     dac:	02 c0       	rjmp	.+4      	; 0xdb2 <GPIO_setupPinDirection+0x13c>
     dae:	88 0f       	add	r24, r24
     db0:	99 1f       	adc	r25, r25
     db2:	0a 94       	dec	r0
     db4:	e2 f7       	brpl	.-8      	; 0xdae <GPIO_setupPinDirection+0x138>
     db6:	84 2b       	or	r24, r20
     db8:	8c 93       	st	X, r24
     dba:	40 c0       	rjmp	.+128    	; 0xe3c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     dbc:	a4 e3       	ldi	r26, 0x34	; 52
     dbe:	b0 e0       	ldi	r27, 0x00	; 0
     dc0:	e4 e3       	ldi	r30, 0x34	; 52
     dc2:	f0 e0       	ldi	r31, 0x00	; 0
     dc4:	80 81       	ld	r24, Z
     dc6:	48 2f       	mov	r20, r24
     dc8:	8a 81       	ldd	r24, Y+2	; 0x02
     dca:	28 2f       	mov	r18, r24
     dcc:	30 e0       	ldi	r19, 0x00	; 0
     dce:	81 e0       	ldi	r24, 0x01	; 1
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	02 2e       	mov	r0, r18
     dd4:	02 c0       	rjmp	.+4      	; 0xdda <GPIO_setupPinDirection+0x164>
     dd6:	88 0f       	add	r24, r24
     dd8:	99 1f       	adc	r25, r25
     dda:	0a 94       	dec	r0
     ddc:	e2 f7       	brpl	.-8      	; 0xdd6 <GPIO_setupPinDirection+0x160>
     dde:	80 95       	com	r24
     de0:	84 23       	and	r24, r20
     de2:	8c 93       	st	X, r24
     de4:	2b c0       	rjmp	.+86     	; 0xe3c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     de6:	8b 81       	ldd	r24, Y+3	; 0x03
     de8:	81 30       	cpi	r24, 0x01	; 1
     dea:	a1 f4       	brne	.+40     	; 0xe14 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     dec:	a1 e3       	ldi	r26, 0x31	; 49
     dee:	b0 e0       	ldi	r27, 0x00	; 0
     df0:	e1 e3       	ldi	r30, 0x31	; 49
     df2:	f0 e0       	ldi	r31, 0x00	; 0
     df4:	80 81       	ld	r24, Z
     df6:	48 2f       	mov	r20, r24
     df8:	8a 81       	ldd	r24, Y+2	; 0x02
     dfa:	28 2f       	mov	r18, r24
     dfc:	30 e0       	ldi	r19, 0x00	; 0
     dfe:	81 e0       	ldi	r24, 0x01	; 1
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	02 2e       	mov	r0, r18
     e04:	02 c0       	rjmp	.+4      	; 0xe0a <GPIO_setupPinDirection+0x194>
     e06:	88 0f       	add	r24, r24
     e08:	99 1f       	adc	r25, r25
     e0a:	0a 94       	dec	r0
     e0c:	e2 f7       	brpl	.-8      	; 0xe06 <GPIO_setupPinDirection+0x190>
     e0e:	84 2b       	or	r24, r20
     e10:	8c 93       	st	X, r24
     e12:	14 c0       	rjmp	.+40     	; 0xe3c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     e14:	a1 e3       	ldi	r26, 0x31	; 49
     e16:	b0 e0       	ldi	r27, 0x00	; 0
     e18:	e1 e3       	ldi	r30, 0x31	; 49
     e1a:	f0 e0       	ldi	r31, 0x00	; 0
     e1c:	80 81       	ld	r24, Z
     e1e:	48 2f       	mov	r20, r24
     e20:	8a 81       	ldd	r24, Y+2	; 0x02
     e22:	28 2f       	mov	r18, r24
     e24:	30 e0       	ldi	r19, 0x00	; 0
     e26:	81 e0       	ldi	r24, 0x01	; 1
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	02 2e       	mov	r0, r18
     e2c:	02 c0       	rjmp	.+4      	; 0xe32 <GPIO_setupPinDirection+0x1bc>
     e2e:	88 0f       	add	r24, r24
     e30:	99 1f       	adc	r25, r25
     e32:	0a 94       	dec	r0
     e34:	e2 f7       	brpl	.-8      	; 0xe2e <GPIO_setupPinDirection+0x1b8>
     e36:	80 95       	com	r24
     e38:	84 23       	and	r24, r20
     e3a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     e3c:	0f 90       	pop	r0
     e3e:	0f 90       	pop	r0
     e40:	0f 90       	pop	r0
     e42:	0f 90       	pop	r0
     e44:	0f 90       	pop	r0
     e46:	cf 91       	pop	r28
     e48:	df 91       	pop	r29
     e4a:	08 95       	ret

00000e4c <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(u8 port_num, u8 pin_num, u8 value)
{
     e4c:	df 93       	push	r29
     e4e:	cf 93       	push	r28
     e50:	00 d0       	rcall	.+0      	; 0xe52 <GPIO_writePin+0x6>
     e52:	00 d0       	rcall	.+0      	; 0xe54 <GPIO_writePin+0x8>
     e54:	0f 92       	push	r0
     e56:	cd b7       	in	r28, 0x3d	; 61
     e58:	de b7       	in	r29, 0x3e	; 62
     e5a:	89 83       	std	Y+1, r24	; 0x01
     e5c:	6a 83       	std	Y+2, r22	; 0x02
     e5e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     e60:	8a 81       	ldd	r24, Y+2	; 0x02
     e62:	88 30       	cpi	r24, 0x08	; 8
     e64:	08 f0       	brcs	.+2      	; 0xe68 <GPIO_writePin+0x1c>
     e66:	d5 c0       	rjmp	.+426    	; 0x1012 <GPIO_writePin+0x1c6>
     e68:	89 81       	ldd	r24, Y+1	; 0x01
     e6a:	84 30       	cpi	r24, 0x04	; 4
     e6c:	08 f0       	brcs	.+2      	; 0xe70 <GPIO_writePin+0x24>
     e6e:	d1 c0       	rjmp	.+418    	; 0x1012 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
     e70:	89 81       	ldd	r24, Y+1	; 0x01
     e72:	28 2f       	mov	r18, r24
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	3d 83       	std	Y+5, r19	; 0x05
     e78:	2c 83       	std	Y+4, r18	; 0x04
     e7a:	8c 81       	ldd	r24, Y+4	; 0x04
     e7c:	9d 81       	ldd	r25, Y+5	; 0x05
     e7e:	81 30       	cpi	r24, 0x01	; 1
     e80:	91 05       	cpc	r25, r1
     e82:	09 f4       	brne	.+2      	; 0xe86 <GPIO_writePin+0x3a>
     e84:	43 c0       	rjmp	.+134    	; 0xf0c <GPIO_writePin+0xc0>
     e86:	2c 81       	ldd	r18, Y+4	; 0x04
     e88:	3d 81       	ldd	r19, Y+5	; 0x05
     e8a:	22 30       	cpi	r18, 0x02	; 2
     e8c:	31 05       	cpc	r19, r1
     e8e:	2c f4       	brge	.+10     	; 0xe9a <GPIO_writePin+0x4e>
     e90:	8c 81       	ldd	r24, Y+4	; 0x04
     e92:	9d 81       	ldd	r25, Y+5	; 0x05
     e94:	00 97       	sbiw	r24, 0x00	; 0
     e96:	71 f0       	breq	.+28     	; 0xeb4 <GPIO_writePin+0x68>
     e98:	bc c0       	rjmp	.+376    	; 0x1012 <GPIO_writePin+0x1c6>
     e9a:	2c 81       	ldd	r18, Y+4	; 0x04
     e9c:	3d 81       	ldd	r19, Y+5	; 0x05
     e9e:	22 30       	cpi	r18, 0x02	; 2
     ea0:	31 05       	cpc	r19, r1
     ea2:	09 f4       	brne	.+2      	; 0xea6 <GPIO_writePin+0x5a>
     ea4:	5f c0       	rjmp	.+190    	; 0xf64 <GPIO_writePin+0x118>
     ea6:	8c 81       	ldd	r24, Y+4	; 0x04
     ea8:	9d 81       	ldd	r25, Y+5	; 0x05
     eaa:	83 30       	cpi	r24, 0x03	; 3
     eac:	91 05       	cpc	r25, r1
     eae:	09 f4       	brne	.+2      	; 0xeb2 <GPIO_writePin+0x66>
     eb0:	85 c0       	rjmp	.+266    	; 0xfbc <GPIO_writePin+0x170>
     eb2:	af c0       	rjmp	.+350    	; 0x1012 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
     eb4:	8b 81       	ldd	r24, Y+3	; 0x03
     eb6:	81 30       	cpi	r24, 0x01	; 1
     eb8:	a1 f4       	brne	.+40     	; 0xee2 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
     eba:	ab e3       	ldi	r26, 0x3B	; 59
     ebc:	b0 e0       	ldi	r27, 0x00	; 0
     ebe:	eb e3       	ldi	r30, 0x3B	; 59
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	80 81       	ld	r24, Z
     ec4:	48 2f       	mov	r20, r24
     ec6:	8a 81       	ldd	r24, Y+2	; 0x02
     ec8:	28 2f       	mov	r18, r24
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	02 2e       	mov	r0, r18
     ed2:	02 c0       	rjmp	.+4      	; 0xed8 <GPIO_writePin+0x8c>
     ed4:	88 0f       	add	r24, r24
     ed6:	99 1f       	adc	r25, r25
     ed8:	0a 94       	dec	r0
     eda:	e2 f7       	brpl	.-8      	; 0xed4 <GPIO_writePin+0x88>
     edc:	84 2b       	or	r24, r20
     ede:	8c 93       	st	X, r24
     ee0:	98 c0       	rjmp	.+304    	; 0x1012 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
     ee2:	ab e3       	ldi	r26, 0x3B	; 59
     ee4:	b0 e0       	ldi	r27, 0x00	; 0
     ee6:	eb e3       	ldi	r30, 0x3B	; 59
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	80 81       	ld	r24, Z
     eec:	48 2f       	mov	r20, r24
     eee:	8a 81       	ldd	r24, Y+2	; 0x02
     ef0:	28 2f       	mov	r18, r24
     ef2:	30 e0       	ldi	r19, 0x00	; 0
     ef4:	81 e0       	ldi	r24, 0x01	; 1
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	02 2e       	mov	r0, r18
     efa:	02 c0       	rjmp	.+4      	; 0xf00 <GPIO_writePin+0xb4>
     efc:	88 0f       	add	r24, r24
     efe:	99 1f       	adc	r25, r25
     f00:	0a 94       	dec	r0
     f02:	e2 f7       	brpl	.-8      	; 0xefc <GPIO_writePin+0xb0>
     f04:	80 95       	com	r24
     f06:	84 23       	and	r24, r20
     f08:	8c 93       	st	X, r24
     f0a:	83 c0       	rjmp	.+262    	; 0x1012 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
     f0c:	8b 81       	ldd	r24, Y+3	; 0x03
     f0e:	81 30       	cpi	r24, 0x01	; 1
     f10:	a1 f4       	brne	.+40     	; 0xf3a <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
     f12:	a8 e3       	ldi	r26, 0x38	; 56
     f14:	b0 e0       	ldi	r27, 0x00	; 0
     f16:	e8 e3       	ldi	r30, 0x38	; 56
     f18:	f0 e0       	ldi	r31, 0x00	; 0
     f1a:	80 81       	ld	r24, Z
     f1c:	48 2f       	mov	r20, r24
     f1e:	8a 81       	ldd	r24, Y+2	; 0x02
     f20:	28 2f       	mov	r18, r24
     f22:	30 e0       	ldi	r19, 0x00	; 0
     f24:	81 e0       	ldi	r24, 0x01	; 1
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	02 2e       	mov	r0, r18
     f2a:	02 c0       	rjmp	.+4      	; 0xf30 <GPIO_writePin+0xe4>
     f2c:	88 0f       	add	r24, r24
     f2e:	99 1f       	adc	r25, r25
     f30:	0a 94       	dec	r0
     f32:	e2 f7       	brpl	.-8      	; 0xf2c <GPIO_writePin+0xe0>
     f34:	84 2b       	or	r24, r20
     f36:	8c 93       	st	X, r24
     f38:	6c c0       	rjmp	.+216    	; 0x1012 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
     f3a:	a8 e3       	ldi	r26, 0x38	; 56
     f3c:	b0 e0       	ldi	r27, 0x00	; 0
     f3e:	e8 e3       	ldi	r30, 0x38	; 56
     f40:	f0 e0       	ldi	r31, 0x00	; 0
     f42:	80 81       	ld	r24, Z
     f44:	48 2f       	mov	r20, r24
     f46:	8a 81       	ldd	r24, Y+2	; 0x02
     f48:	28 2f       	mov	r18, r24
     f4a:	30 e0       	ldi	r19, 0x00	; 0
     f4c:	81 e0       	ldi	r24, 0x01	; 1
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	02 2e       	mov	r0, r18
     f52:	02 c0       	rjmp	.+4      	; 0xf58 <GPIO_writePin+0x10c>
     f54:	88 0f       	add	r24, r24
     f56:	99 1f       	adc	r25, r25
     f58:	0a 94       	dec	r0
     f5a:	e2 f7       	brpl	.-8      	; 0xf54 <GPIO_writePin+0x108>
     f5c:	80 95       	com	r24
     f5e:	84 23       	and	r24, r20
     f60:	8c 93       	st	X, r24
     f62:	57 c0       	rjmp	.+174    	; 0x1012 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
     f64:	8b 81       	ldd	r24, Y+3	; 0x03
     f66:	81 30       	cpi	r24, 0x01	; 1
     f68:	a1 f4       	brne	.+40     	; 0xf92 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
     f6a:	a5 e3       	ldi	r26, 0x35	; 53
     f6c:	b0 e0       	ldi	r27, 0x00	; 0
     f6e:	e5 e3       	ldi	r30, 0x35	; 53
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	80 81       	ld	r24, Z
     f74:	48 2f       	mov	r20, r24
     f76:	8a 81       	ldd	r24, Y+2	; 0x02
     f78:	28 2f       	mov	r18, r24
     f7a:	30 e0       	ldi	r19, 0x00	; 0
     f7c:	81 e0       	ldi	r24, 0x01	; 1
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	02 2e       	mov	r0, r18
     f82:	02 c0       	rjmp	.+4      	; 0xf88 <GPIO_writePin+0x13c>
     f84:	88 0f       	add	r24, r24
     f86:	99 1f       	adc	r25, r25
     f88:	0a 94       	dec	r0
     f8a:	e2 f7       	brpl	.-8      	; 0xf84 <GPIO_writePin+0x138>
     f8c:	84 2b       	or	r24, r20
     f8e:	8c 93       	st	X, r24
     f90:	40 c0       	rjmp	.+128    	; 0x1012 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
     f92:	a5 e3       	ldi	r26, 0x35	; 53
     f94:	b0 e0       	ldi	r27, 0x00	; 0
     f96:	e5 e3       	ldi	r30, 0x35	; 53
     f98:	f0 e0       	ldi	r31, 0x00	; 0
     f9a:	80 81       	ld	r24, Z
     f9c:	48 2f       	mov	r20, r24
     f9e:	8a 81       	ldd	r24, Y+2	; 0x02
     fa0:	28 2f       	mov	r18, r24
     fa2:	30 e0       	ldi	r19, 0x00	; 0
     fa4:	81 e0       	ldi	r24, 0x01	; 1
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	02 2e       	mov	r0, r18
     faa:	02 c0       	rjmp	.+4      	; 0xfb0 <GPIO_writePin+0x164>
     fac:	88 0f       	add	r24, r24
     fae:	99 1f       	adc	r25, r25
     fb0:	0a 94       	dec	r0
     fb2:	e2 f7       	brpl	.-8      	; 0xfac <GPIO_writePin+0x160>
     fb4:	80 95       	com	r24
     fb6:	84 23       	and	r24, r20
     fb8:	8c 93       	st	X, r24
     fba:	2b c0       	rjmp	.+86     	; 0x1012 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
     fbc:	8b 81       	ldd	r24, Y+3	; 0x03
     fbe:	81 30       	cpi	r24, 0x01	; 1
     fc0:	a1 f4       	brne	.+40     	; 0xfea <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
     fc2:	a2 e3       	ldi	r26, 0x32	; 50
     fc4:	b0 e0       	ldi	r27, 0x00	; 0
     fc6:	e2 e3       	ldi	r30, 0x32	; 50
     fc8:	f0 e0       	ldi	r31, 0x00	; 0
     fca:	80 81       	ld	r24, Z
     fcc:	48 2f       	mov	r20, r24
     fce:	8a 81       	ldd	r24, Y+2	; 0x02
     fd0:	28 2f       	mov	r18, r24
     fd2:	30 e0       	ldi	r19, 0x00	; 0
     fd4:	81 e0       	ldi	r24, 0x01	; 1
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	02 2e       	mov	r0, r18
     fda:	02 c0       	rjmp	.+4      	; 0xfe0 <GPIO_writePin+0x194>
     fdc:	88 0f       	add	r24, r24
     fde:	99 1f       	adc	r25, r25
     fe0:	0a 94       	dec	r0
     fe2:	e2 f7       	brpl	.-8      	; 0xfdc <GPIO_writePin+0x190>
     fe4:	84 2b       	or	r24, r20
     fe6:	8c 93       	st	X, r24
     fe8:	14 c0       	rjmp	.+40     	; 0x1012 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
     fea:	a2 e3       	ldi	r26, 0x32	; 50
     fec:	b0 e0       	ldi	r27, 0x00	; 0
     fee:	e2 e3       	ldi	r30, 0x32	; 50
     ff0:	f0 e0       	ldi	r31, 0x00	; 0
     ff2:	80 81       	ld	r24, Z
     ff4:	48 2f       	mov	r20, r24
     ff6:	8a 81       	ldd	r24, Y+2	; 0x02
     ff8:	28 2f       	mov	r18, r24
     ffa:	30 e0       	ldi	r19, 0x00	; 0
     ffc:	81 e0       	ldi	r24, 0x01	; 1
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	02 2e       	mov	r0, r18
    1002:	02 c0       	rjmp	.+4      	; 0x1008 <GPIO_writePin+0x1bc>
    1004:	88 0f       	add	r24, r24
    1006:	99 1f       	adc	r25, r25
    1008:	0a 94       	dec	r0
    100a:	e2 f7       	brpl	.-8      	; 0x1004 <GPIO_writePin+0x1b8>
    100c:	80 95       	com	r24
    100e:	84 23       	and	r24, r20
    1010:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1012:	0f 90       	pop	r0
    1014:	0f 90       	pop	r0
    1016:	0f 90       	pop	r0
    1018:	0f 90       	pop	r0
    101a:	0f 90       	pop	r0
    101c:	cf 91       	pop	r28
    101e:	df 91       	pop	r29
    1020:	08 95       	ret

00001022 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
u8 GPIO_readPin(u8 port_num, u8 pin_num)
{
    1022:	df 93       	push	r29
    1024:	cf 93       	push	r28
    1026:	00 d0       	rcall	.+0      	; 0x1028 <GPIO_readPin+0x6>
    1028:	00 d0       	rcall	.+0      	; 0x102a <GPIO_readPin+0x8>
    102a:	0f 92       	push	r0
    102c:	cd b7       	in	r28, 0x3d	; 61
    102e:	de b7       	in	r29, 0x3e	; 62
    1030:	8a 83       	std	Y+2, r24	; 0x02
    1032:	6b 83       	std	Y+3, r22	; 0x03
	u8 pin_value = LOGIC_LOW;
    1034:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1036:	8b 81       	ldd	r24, Y+3	; 0x03
    1038:	88 30       	cpi	r24, 0x08	; 8
    103a:	08 f0       	brcs	.+2      	; 0x103e <GPIO_readPin+0x1c>
    103c:	84 c0       	rjmp	.+264    	; 0x1146 <GPIO_readPin+0x124>
    103e:	8a 81       	ldd	r24, Y+2	; 0x02
    1040:	84 30       	cpi	r24, 0x04	; 4
    1042:	08 f0       	brcs	.+2      	; 0x1046 <GPIO_readPin+0x24>
    1044:	80 c0       	rjmp	.+256    	; 0x1146 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1046:	8a 81       	ldd	r24, Y+2	; 0x02
    1048:	28 2f       	mov	r18, r24
    104a:	30 e0       	ldi	r19, 0x00	; 0
    104c:	3d 83       	std	Y+5, r19	; 0x05
    104e:	2c 83       	std	Y+4, r18	; 0x04
    1050:	4c 81       	ldd	r20, Y+4	; 0x04
    1052:	5d 81       	ldd	r21, Y+5	; 0x05
    1054:	41 30       	cpi	r20, 0x01	; 1
    1056:	51 05       	cpc	r21, r1
    1058:	79 f1       	breq	.+94     	; 0x10b8 <GPIO_readPin+0x96>
    105a:	8c 81       	ldd	r24, Y+4	; 0x04
    105c:	9d 81       	ldd	r25, Y+5	; 0x05
    105e:	82 30       	cpi	r24, 0x02	; 2
    1060:	91 05       	cpc	r25, r1
    1062:	34 f4       	brge	.+12     	; 0x1070 <GPIO_readPin+0x4e>
    1064:	2c 81       	ldd	r18, Y+4	; 0x04
    1066:	3d 81       	ldd	r19, Y+5	; 0x05
    1068:	21 15       	cp	r18, r1
    106a:	31 05       	cpc	r19, r1
    106c:	69 f0       	breq	.+26     	; 0x1088 <GPIO_readPin+0x66>
    106e:	6b c0       	rjmp	.+214    	; 0x1146 <GPIO_readPin+0x124>
    1070:	4c 81       	ldd	r20, Y+4	; 0x04
    1072:	5d 81       	ldd	r21, Y+5	; 0x05
    1074:	42 30       	cpi	r20, 0x02	; 2
    1076:	51 05       	cpc	r21, r1
    1078:	b9 f1       	breq	.+110    	; 0x10e8 <GPIO_readPin+0xc6>
    107a:	8c 81       	ldd	r24, Y+4	; 0x04
    107c:	9d 81       	ldd	r25, Y+5	; 0x05
    107e:	83 30       	cpi	r24, 0x03	; 3
    1080:	91 05       	cpc	r25, r1
    1082:	09 f4       	brne	.+2      	; 0x1086 <GPIO_readPin+0x64>
    1084:	49 c0       	rjmp	.+146    	; 0x1118 <GPIO_readPin+0xf6>
    1086:	5f c0       	rjmp	.+190    	; 0x1146 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1088:	e9 e3       	ldi	r30, 0x39	; 57
    108a:	f0 e0       	ldi	r31, 0x00	; 0
    108c:	80 81       	ld	r24, Z
    108e:	28 2f       	mov	r18, r24
    1090:	30 e0       	ldi	r19, 0x00	; 0
    1092:	8b 81       	ldd	r24, Y+3	; 0x03
    1094:	88 2f       	mov	r24, r24
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	a9 01       	movw	r20, r18
    109a:	02 c0       	rjmp	.+4      	; 0x10a0 <GPIO_readPin+0x7e>
    109c:	55 95       	asr	r21
    109e:	47 95       	ror	r20
    10a0:	8a 95       	dec	r24
    10a2:	e2 f7       	brpl	.-8      	; 0x109c <GPIO_readPin+0x7a>
    10a4:	ca 01       	movw	r24, r20
    10a6:	81 70       	andi	r24, 0x01	; 1
    10a8:	90 70       	andi	r25, 0x00	; 0
    10aa:	88 23       	and	r24, r24
    10ac:	19 f0       	breq	.+6      	; 0x10b4 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    10ae:	81 e0       	ldi	r24, 0x01	; 1
    10b0:	89 83       	std	Y+1, r24	; 0x01
    10b2:	49 c0       	rjmp	.+146    	; 0x1146 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    10b4:	19 82       	std	Y+1, r1	; 0x01
    10b6:	47 c0       	rjmp	.+142    	; 0x1146 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    10b8:	e6 e3       	ldi	r30, 0x36	; 54
    10ba:	f0 e0       	ldi	r31, 0x00	; 0
    10bc:	80 81       	ld	r24, Z
    10be:	28 2f       	mov	r18, r24
    10c0:	30 e0       	ldi	r19, 0x00	; 0
    10c2:	8b 81       	ldd	r24, Y+3	; 0x03
    10c4:	88 2f       	mov	r24, r24
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	a9 01       	movw	r20, r18
    10ca:	02 c0       	rjmp	.+4      	; 0x10d0 <GPIO_readPin+0xae>
    10cc:	55 95       	asr	r21
    10ce:	47 95       	ror	r20
    10d0:	8a 95       	dec	r24
    10d2:	e2 f7       	brpl	.-8      	; 0x10cc <GPIO_readPin+0xaa>
    10d4:	ca 01       	movw	r24, r20
    10d6:	81 70       	andi	r24, 0x01	; 1
    10d8:	90 70       	andi	r25, 0x00	; 0
    10da:	88 23       	and	r24, r24
    10dc:	19 f0       	breq	.+6      	; 0x10e4 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    10de:	81 e0       	ldi	r24, 0x01	; 1
    10e0:	89 83       	std	Y+1, r24	; 0x01
    10e2:	31 c0       	rjmp	.+98     	; 0x1146 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    10e4:	19 82       	std	Y+1, r1	; 0x01
    10e6:	2f c0       	rjmp	.+94     	; 0x1146 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    10e8:	e3 e3       	ldi	r30, 0x33	; 51
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	80 81       	ld	r24, Z
    10ee:	28 2f       	mov	r18, r24
    10f0:	30 e0       	ldi	r19, 0x00	; 0
    10f2:	8b 81       	ldd	r24, Y+3	; 0x03
    10f4:	88 2f       	mov	r24, r24
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	a9 01       	movw	r20, r18
    10fa:	02 c0       	rjmp	.+4      	; 0x1100 <GPIO_readPin+0xde>
    10fc:	55 95       	asr	r21
    10fe:	47 95       	ror	r20
    1100:	8a 95       	dec	r24
    1102:	e2 f7       	brpl	.-8      	; 0x10fc <GPIO_readPin+0xda>
    1104:	ca 01       	movw	r24, r20
    1106:	81 70       	andi	r24, 0x01	; 1
    1108:	90 70       	andi	r25, 0x00	; 0
    110a:	88 23       	and	r24, r24
    110c:	19 f0       	breq	.+6      	; 0x1114 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    110e:	81 e0       	ldi	r24, 0x01	; 1
    1110:	89 83       	std	Y+1, r24	; 0x01
    1112:	19 c0       	rjmp	.+50     	; 0x1146 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1114:	19 82       	std	Y+1, r1	; 0x01
    1116:	17 c0       	rjmp	.+46     	; 0x1146 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1118:	e0 e3       	ldi	r30, 0x30	; 48
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	80 81       	ld	r24, Z
    111e:	28 2f       	mov	r18, r24
    1120:	30 e0       	ldi	r19, 0x00	; 0
    1122:	8b 81       	ldd	r24, Y+3	; 0x03
    1124:	88 2f       	mov	r24, r24
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	a9 01       	movw	r20, r18
    112a:	02 c0       	rjmp	.+4      	; 0x1130 <GPIO_readPin+0x10e>
    112c:	55 95       	asr	r21
    112e:	47 95       	ror	r20
    1130:	8a 95       	dec	r24
    1132:	e2 f7       	brpl	.-8      	; 0x112c <GPIO_readPin+0x10a>
    1134:	ca 01       	movw	r24, r20
    1136:	81 70       	andi	r24, 0x01	; 1
    1138:	90 70       	andi	r25, 0x00	; 0
    113a:	88 23       	and	r24, r24
    113c:	19 f0       	breq	.+6      	; 0x1144 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    113e:	81 e0       	ldi	r24, 0x01	; 1
    1140:	89 83       	std	Y+1, r24	; 0x01
    1142:	01 c0       	rjmp	.+2      	; 0x1146 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1144:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1146:	89 81       	ldd	r24, Y+1	; 0x01
}
    1148:	0f 90       	pop	r0
    114a:	0f 90       	pop	r0
    114c:	0f 90       	pop	r0
    114e:	0f 90       	pop	r0
    1150:	0f 90       	pop	r0
    1152:	cf 91       	pop	r28
    1154:	df 91       	pop	r29
    1156:	08 95       	ret

00001158 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(u8 port_num, GPIO_PortDirectionType direction)
{
    1158:	df 93       	push	r29
    115a:	cf 93       	push	r28
    115c:	00 d0       	rcall	.+0      	; 0x115e <GPIO_setupPortDirection+0x6>
    115e:	00 d0       	rcall	.+0      	; 0x1160 <GPIO_setupPortDirection+0x8>
    1160:	cd b7       	in	r28, 0x3d	; 61
    1162:	de b7       	in	r29, 0x3e	; 62
    1164:	89 83       	std	Y+1, r24	; 0x01
    1166:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1168:	89 81       	ldd	r24, Y+1	; 0x01
    116a:	84 30       	cpi	r24, 0x04	; 4
    116c:	90 f5       	brcc	.+100    	; 0x11d2 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    116e:	89 81       	ldd	r24, Y+1	; 0x01
    1170:	28 2f       	mov	r18, r24
    1172:	30 e0       	ldi	r19, 0x00	; 0
    1174:	3c 83       	std	Y+4, r19	; 0x04
    1176:	2b 83       	std	Y+3, r18	; 0x03
    1178:	8b 81       	ldd	r24, Y+3	; 0x03
    117a:	9c 81       	ldd	r25, Y+4	; 0x04
    117c:	81 30       	cpi	r24, 0x01	; 1
    117e:	91 05       	cpc	r25, r1
    1180:	d1 f0       	breq	.+52     	; 0x11b6 <GPIO_setupPortDirection+0x5e>
    1182:	2b 81       	ldd	r18, Y+3	; 0x03
    1184:	3c 81       	ldd	r19, Y+4	; 0x04
    1186:	22 30       	cpi	r18, 0x02	; 2
    1188:	31 05       	cpc	r19, r1
    118a:	2c f4       	brge	.+10     	; 0x1196 <GPIO_setupPortDirection+0x3e>
    118c:	8b 81       	ldd	r24, Y+3	; 0x03
    118e:	9c 81       	ldd	r25, Y+4	; 0x04
    1190:	00 97       	sbiw	r24, 0x00	; 0
    1192:	61 f0       	breq	.+24     	; 0x11ac <GPIO_setupPortDirection+0x54>
    1194:	1e c0       	rjmp	.+60     	; 0x11d2 <GPIO_setupPortDirection+0x7a>
    1196:	2b 81       	ldd	r18, Y+3	; 0x03
    1198:	3c 81       	ldd	r19, Y+4	; 0x04
    119a:	22 30       	cpi	r18, 0x02	; 2
    119c:	31 05       	cpc	r19, r1
    119e:	81 f0       	breq	.+32     	; 0x11c0 <GPIO_setupPortDirection+0x68>
    11a0:	8b 81       	ldd	r24, Y+3	; 0x03
    11a2:	9c 81       	ldd	r25, Y+4	; 0x04
    11a4:	83 30       	cpi	r24, 0x03	; 3
    11a6:	91 05       	cpc	r25, r1
    11a8:	81 f0       	breq	.+32     	; 0x11ca <GPIO_setupPortDirection+0x72>
    11aa:	13 c0       	rjmp	.+38     	; 0x11d2 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    11ac:	ea e3       	ldi	r30, 0x3A	; 58
    11ae:	f0 e0       	ldi	r31, 0x00	; 0
    11b0:	8a 81       	ldd	r24, Y+2	; 0x02
    11b2:	80 83       	st	Z, r24
    11b4:	0e c0       	rjmp	.+28     	; 0x11d2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    11b6:	e7 e3       	ldi	r30, 0x37	; 55
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	8a 81       	ldd	r24, Y+2	; 0x02
    11bc:	80 83       	st	Z, r24
    11be:	09 c0       	rjmp	.+18     	; 0x11d2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    11c0:	e4 e3       	ldi	r30, 0x34	; 52
    11c2:	f0 e0       	ldi	r31, 0x00	; 0
    11c4:	8a 81       	ldd	r24, Y+2	; 0x02
    11c6:	80 83       	st	Z, r24
    11c8:	04 c0       	rjmp	.+8      	; 0x11d2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    11ca:	e1 e3       	ldi	r30, 0x31	; 49
    11cc:	f0 e0       	ldi	r31, 0x00	; 0
    11ce:	8a 81       	ldd	r24, Y+2	; 0x02
    11d0:	80 83       	st	Z, r24
			break;
		}
	}
}
    11d2:	0f 90       	pop	r0
    11d4:	0f 90       	pop	r0
    11d6:	0f 90       	pop	r0
    11d8:	0f 90       	pop	r0
    11da:	cf 91       	pop	r28
    11dc:	df 91       	pop	r29
    11de:	08 95       	ret

000011e0 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(u8 port_num, u8 value)
{
    11e0:	df 93       	push	r29
    11e2:	cf 93       	push	r28
    11e4:	00 d0       	rcall	.+0      	; 0x11e6 <GPIO_writePort+0x6>
    11e6:	00 d0       	rcall	.+0      	; 0x11e8 <GPIO_writePort+0x8>
    11e8:	cd b7       	in	r28, 0x3d	; 61
    11ea:	de b7       	in	r29, 0x3e	; 62
    11ec:	89 83       	std	Y+1, r24	; 0x01
    11ee:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    11f0:	89 81       	ldd	r24, Y+1	; 0x01
    11f2:	84 30       	cpi	r24, 0x04	; 4
    11f4:	90 f5       	brcc	.+100    	; 0x125a <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    11f6:	89 81       	ldd	r24, Y+1	; 0x01
    11f8:	28 2f       	mov	r18, r24
    11fa:	30 e0       	ldi	r19, 0x00	; 0
    11fc:	3c 83       	std	Y+4, r19	; 0x04
    11fe:	2b 83       	std	Y+3, r18	; 0x03
    1200:	8b 81       	ldd	r24, Y+3	; 0x03
    1202:	9c 81       	ldd	r25, Y+4	; 0x04
    1204:	81 30       	cpi	r24, 0x01	; 1
    1206:	91 05       	cpc	r25, r1
    1208:	d1 f0       	breq	.+52     	; 0x123e <GPIO_writePort+0x5e>
    120a:	2b 81       	ldd	r18, Y+3	; 0x03
    120c:	3c 81       	ldd	r19, Y+4	; 0x04
    120e:	22 30       	cpi	r18, 0x02	; 2
    1210:	31 05       	cpc	r19, r1
    1212:	2c f4       	brge	.+10     	; 0x121e <GPIO_writePort+0x3e>
    1214:	8b 81       	ldd	r24, Y+3	; 0x03
    1216:	9c 81       	ldd	r25, Y+4	; 0x04
    1218:	00 97       	sbiw	r24, 0x00	; 0
    121a:	61 f0       	breq	.+24     	; 0x1234 <GPIO_writePort+0x54>
    121c:	1e c0       	rjmp	.+60     	; 0x125a <GPIO_writePort+0x7a>
    121e:	2b 81       	ldd	r18, Y+3	; 0x03
    1220:	3c 81       	ldd	r19, Y+4	; 0x04
    1222:	22 30       	cpi	r18, 0x02	; 2
    1224:	31 05       	cpc	r19, r1
    1226:	81 f0       	breq	.+32     	; 0x1248 <GPIO_writePort+0x68>
    1228:	8b 81       	ldd	r24, Y+3	; 0x03
    122a:	9c 81       	ldd	r25, Y+4	; 0x04
    122c:	83 30       	cpi	r24, 0x03	; 3
    122e:	91 05       	cpc	r25, r1
    1230:	81 f0       	breq	.+32     	; 0x1252 <GPIO_writePort+0x72>
    1232:	13 c0       	rjmp	.+38     	; 0x125a <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1234:	eb e3       	ldi	r30, 0x3B	; 59
    1236:	f0 e0       	ldi	r31, 0x00	; 0
    1238:	8a 81       	ldd	r24, Y+2	; 0x02
    123a:	80 83       	st	Z, r24
    123c:	0e c0       	rjmp	.+28     	; 0x125a <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    123e:	e8 e3       	ldi	r30, 0x38	; 56
    1240:	f0 e0       	ldi	r31, 0x00	; 0
    1242:	8a 81       	ldd	r24, Y+2	; 0x02
    1244:	80 83       	st	Z, r24
    1246:	09 c0       	rjmp	.+18     	; 0x125a <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1248:	e5 e3       	ldi	r30, 0x35	; 53
    124a:	f0 e0       	ldi	r31, 0x00	; 0
    124c:	8a 81       	ldd	r24, Y+2	; 0x02
    124e:	80 83       	st	Z, r24
    1250:	04 c0       	rjmp	.+8      	; 0x125a <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1252:	e2 e3       	ldi	r30, 0x32	; 50
    1254:	f0 e0       	ldi	r31, 0x00	; 0
    1256:	8a 81       	ldd	r24, Y+2	; 0x02
    1258:	80 83       	st	Z, r24
			break;
		}
	}
}
    125a:	0f 90       	pop	r0
    125c:	0f 90       	pop	r0
    125e:	0f 90       	pop	r0
    1260:	0f 90       	pop	r0
    1262:	cf 91       	pop	r28
    1264:	df 91       	pop	r29
    1266:	08 95       	ret

00001268 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
u8 GPIO_readPort(u8 port_num)
{
    1268:	df 93       	push	r29
    126a:	cf 93       	push	r28
    126c:	00 d0       	rcall	.+0      	; 0x126e <GPIO_readPort+0x6>
    126e:	00 d0       	rcall	.+0      	; 0x1270 <GPIO_readPort+0x8>
    1270:	cd b7       	in	r28, 0x3d	; 61
    1272:	de b7       	in	r29, 0x3e	; 62
    1274:	8a 83       	std	Y+2, r24	; 0x02
	u8 value = LOGIC_LOW;
    1276:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1278:	8a 81       	ldd	r24, Y+2	; 0x02
    127a:	84 30       	cpi	r24, 0x04	; 4
    127c:	90 f5       	brcc	.+100    	; 0x12e2 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    127e:	8a 81       	ldd	r24, Y+2	; 0x02
    1280:	28 2f       	mov	r18, r24
    1282:	30 e0       	ldi	r19, 0x00	; 0
    1284:	3c 83       	std	Y+4, r19	; 0x04
    1286:	2b 83       	std	Y+3, r18	; 0x03
    1288:	8b 81       	ldd	r24, Y+3	; 0x03
    128a:	9c 81       	ldd	r25, Y+4	; 0x04
    128c:	81 30       	cpi	r24, 0x01	; 1
    128e:	91 05       	cpc	r25, r1
    1290:	d1 f0       	breq	.+52     	; 0x12c6 <GPIO_readPort+0x5e>
    1292:	2b 81       	ldd	r18, Y+3	; 0x03
    1294:	3c 81       	ldd	r19, Y+4	; 0x04
    1296:	22 30       	cpi	r18, 0x02	; 2
    1298:	31 05       	cpc	r19, r1
    129a:	2c f4       	brge	.+10     	; 0x12a6 <GPIO_readPort+0x3e>
    129c:	8b 81       	ldd	r24, Y+3	; 0x03
    129e:	9c 81       	ldd	r25, Y+4	; 0x04
    12a0:	00 97       	sbiw	r24, 0x00	; 0
    12a2:	61 f0       	breq	.+24     	; 0x12bc <GPIO_readPort+0x54>
    12a4:	1e c0       	rjmp	.+60     	; 0x12e2 <GPIO_readPort+0x7a>
    12a6:	2b 81       	ldd	r18, Y+3	; 0x03
    12a8:	3c 81       	ldd	r19, Y+4	; 0x04
    12aa:	22 30       	cpi	r18, 0x02	; 2
    12ac:	31 05       	cpc	r19, r1
    12ae:	81 f0       	breq	.+32     	; 0x12d0 <GPIO_readPort+0x68>
    12b0:	8b 81       	ldd	r24, Y+3	; 0x03
    12b2:	9c 81       	ldd	r25, Y+4	; 0x04
    12b4:	83 30       	cpi	r24, 0x03	; 3
    12b6:	91 05       	cpc	r25, r1
    12b8:	81 f0       	breq	.+32     	; 0x12da <GPIO_readPort+0x72>
    12ba:	13 c0       	rjmp	.+38     	; 0x12e2 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    12bc:	e9 e3       	ldi	r30, 0x39	; 57
    12be:	f0 e0       	ldi	r31, 0x00	; 0
    12c0:	80 81       	ld	r24, Z
    12c2:	89 83       	std	Y+1, r24	; 0x01
    12c4:	0e c0       	rjmp	.+28     	; 0x12e2 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    12c6:	e6 e3       	ldi	r30, 0x36	; 54
    12c8:	f0 e0       	ldi	r31, 0x00	; 0
    12ca:	80 81       	ld	r24, Z
    12cc:	89 83       	std	Y+1, r24	; 0x01
    12ce:	09 c0       	rjmp	.+18     	; 0x12e2 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    12d0:	e3 e3       	ldi	r30, 0x33	; 51
    12d2:	f0 e0       	ldi	r31, 0x00	; 0
    12d4:	80 81       	ld	r24, Z
    12d6:	89 83       	std	Y+1, r24	; 0x01
    12d8:	04 c0       	rjmp	.+8      	; 0x12e2 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    12da:	e0 e3       	ldi	r30, 0x30	; 48
    12dc:	f0 e0       	ldi	r31, 0x00	; 0
    12de:	80 81       	ld	r24, Z
    12e0:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    12e2:	89 81       	ldd	r24, Y+1	; 0x01
}
    12e4:	0f 90       	pop	r0
    12e6:	0f 90       	pop	r0
    12e8:	0f 90       	pop	r0
    12ea:	0f 90       	pop	r0
    12ec:	cf 91       	pop	r28
    12ee:	df 91       	pop	r29
    12f0:	08 95       	ret

000012f2 <Login_voidInit>:


u8 Login_SCEnterdPass[6]={1,2,3,4,5,6};
u8 Login_Su8CompareFlag = 3;
 void Login_voidInit(void)
 {
    12f2:	df 93       	push	r29
    12f4:	cf 93       	push	r28
    12f6:	cd b7       	in	r28, 0x3d	; 61
    12f8:	de b7       	in	r29, 0x3e	; 62
	 LCD_enuInit();
    12fa:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <LCD_enuInit>
	 DIO_voidSetPinDirection(DIO_GROUP_D, DIO_PIN_6, DIO_OUTPUT);
    12fe:	83 e0       	ldi	r24, 0x03	; 3
    1300:	66 e0       	ldi	r22, 0x06	; 6
    1302:	41 e0       	ldi	r20, 0x01	; 1
    1304:	0e 94 2e 0c 	call	0x185c	; 0x185c <DIO_voidSetPinDirection>
	 	DIO_voidSetPinDirection(DIO_GROUP_D, DIO_PIN_7, DIO_OUTPUT);
    1308:	83 e0       	ldi	r24, 0x03	; 3
    130a:	67 e0       	ldi	r22, 0x07	; 7
    130c:	41 e0       	ldi	r20, 0x01	; 1
    130e:	0e 94 2e 0c 	call	0x185c	; 0x185c <DIO_voidSetPinDirection>
	 	DIO_voidSetPinValue(DIO_GROUP_D, DIO_PIN_6, DIO_LOW);
    1312:	83 e0       	ldi	r24, 0x03	; 3
    1314:	66 e0       	ldi	r22, 0x06	; 6
    1316:	40 e0       	ldi	r20, 0x00	; 0
    1318:	0e 94 3f 0b 	call	0x167e	; 0x167e <DIO_voidSetPinValue>
	 	DIO_voidSetPinValue(DIO_GROUP_D, DIO_PIN_7, DIO_LOW);
    131c:	83 e0       	ldi	r24, 0x03	; 3
    131e:	67 e0       	ldi	r22, 0x07	; 7
    1320:	40 e0       	ldi	r20, 0x00	; 0
    1322:	0e 94 3f 0b 	call	0x167e	; 0x167e <DIO_voidSetPinValue>
	KEYPAD_voidInit();
    1326:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <KEYPAD_voidInit>
 }
    132a:	cf 91       	pop	r28
    132c:	df 91       	pop	r29
    132e:	08 95       	ret

00001330 <Login_voidEnterPassword>:
 void Login_voidEnterPassword(void) {
    1330:	df 93       	push	r29
    1332:	cf 93       	push	r28
    1334:	00 d0       	rcall	.+0      	; 0x1336 <Login_voidEnterPassword+0x6>
    1336:	0f 92       	push	r0
    1338:	cd b7       	in	r28, 0x3d	; 61
    133a:	de b7       	in	r29, 0x3e	; 62
	 u8 Local_u8KeyPressed = 0;
    133c:	1b 82       	std	Y+3, r1	; 0x03
	 s8 Local_s8Counter = 0;
    133e:	1a 82       	std	Y+2, r1	; 0x02
	 LCD_vidSendCommand(0x01);
    1340:	81 e0       	ldi	r24, 0x01	; 1
    1342:	0e 94 8b 10 	call	0x2116	; 0x2116 <LCD_vidSendCommand>
	 LCD_vidSendCommand(0x80);
    1346:	80 e8       	ldi	r24, 0x80	; 128
    1348:	0e 94 8b 10 	call	0x2116	; 0x2116 <LCD_vidSendCommand>
	 LCD_vidWriteString("Enter Password :");
    134c:	80 e6       	ldi	r24, 0x60	; 96
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	0e 94 9d 10 	call	0x213a	; 0x213a <LCD_vidWriteString>
	 LCD_vidSendCommand(0xC0);
    1354:	80 ec       	ldi	r24, 0xC0	; 192
    1356:	0e 94 8b 10 	call	0x2116	; 0x2116 <LCD_vidSendCommand>
	 for (u8 i = 0; i < 6; i++){
    135a:	19 82       	std	Y+1, r1	; 0x01
    135c:	0a c0       	rjmp	.+20     	; 0x1372 <Login_voidEnterPassword+0x42>
	     Login_SCEnterdPass[i] = 0;}
    135e:	89 81       	ldd	r24, Y+1	; 0x01
    1360:	88 2f       	mov	r24, r24
    1362:	90 e0       	ldi	r25, 0x00	; 0
    1364:	fc 01       	movw	r30, r24
    1366:	e7 54       	subi	r30, 0x47	; 71
    1368:	ff 4f       	sbci	r31, 0xFF	; 255
    136a:	10 82       	st	Z, r1
	 s8 Local_s8Counter = 0;
	 LCD_vidSendCommand(0x01);
	 LCD_vidSendCommand(0x80);
	 LCD_vidWriteString("Enter Password :");
	 LCD_vidSendCommand(0xC0);
	 for (u8 i = 0; i < 6; i++){
    136c:	89 81       	ldd	r24, Y+1	; 0x01
    136e:	8f 5f       	subi	r24, 0xFF	; 255
    1370:	89 83       	std	Y+1, r24	; 0x01
    1372:	89 81       	ldd	r24, Y+1	; 0x01
    1374:	86 30       	cpi	r24, 0x06	; 6
    1376:	98 f3       	brcs	.-26     	; 0x135e <Login_voidEnterPassword+0x2e>
    1378:	19 c0       	rjmp	.+50     	; 0x13ac <Login_voidEnterPassword+0x7c>
	     Login_SCEnterdPass[i] = 0;}
	 while (( Local_u8KeyPressed != '=')&&(Local_s8Counter < 6)) {
		 Local_u8KeyPressed = KEYPAD_u8GetPressedKey();
    137a:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <KEYPAD_u8GetPressedKey>
    137e:	8b 83       	std	Y+3, r24	; 0x03
		 if ((Local_u8KeyPressed != KEYPAD_BUTTON_RELEASED) && (Local_u8KeyPressed != '=')) {
    1380:	8b 81       	ldd	r24, Y+3	; 0x03
    1382:	81 30       	cpi	r24, 0x01	; 1
    1384:	99 f0       	breq	.+38     	; 0x13ac <Login_voidEnterPassword+0x7c>
    1386:	8b 81       	ldd	r24, Y+3	; 0x03
    1388:	8d 33       	cpi	r24, 0x3D	; 61
    138a:	81 f0       	breq	.+32     	; 0x13ac <Login_voidEnterPassword+0x7c>
			 Login_SCEnterdPass[Local_s8Counter] = Local_u8KeyPressed;
    138c:	8a 81       	ldd	r24, Y+2	; 0x02
    138e:	99 27       	eor	r25, r25
    1390:	87 fd       	sbrc	r24, 7
    1392:	90 95       	com	r25
    1394:	fc 01       	movw	r30, r24
    1396:	e7 54       	subi	r30, 0x47	; 71
    1398:	ff 4f       	sbci	r31, 0xFF	; 255
    139a:	8b 81       	ldd	r24, Y+3	; 0x03
    139c:	80 83       	st	Z, r24
			 Local_s8Counter++;
    139e:	8a 81       	ldd	r24, Y+2	; 0x02
    13a0:	8f 5f       	subi	r24, 0xFF	; 255
    13a2:	8a 83       	std	Y+2, r24	; 0x02
			 LCD_vidWriteString("*");
    13a4:	81 e7       	ldi	r24, 0x71	; 113
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	0e 94 9d 10 	call	0x213a	; 0x213a <LCD_vidWriteString>
	 LCD_vidSendCommand(0x80);
	 LCD_vidWriteString("Enter Password :");
	 LCD_vidSendCommand(0xC0);
	 for (u8 i = 0; i < 6; i++){
	     Login_SCEnterdPass[i] = 0;}
	 while (( Local_u8KeyPressed != '=')&&(Local_s8Counter < 6)) {
    13ac:	8b 81       	ldd	r24, Y+3	; 0x03
    13ae:	8d 33       	cpi	r24, 0x3D	; 61
    13b0:	19 f0       	breq	.+6      	; 0x13b8 <Login_voidEnterPassword+0x88>
    13b2:	8a 81       	ldd	r24, Y+2	; 0x02
    13b4:	86 30       	cpi	r24, 0x06	; 6
    13b6:	0c f3       	brlt	.-62     	; 0x137a <Login_voidEnterPassword+0x4a>
			 LCD_vidWriteString("*");

		 }
	 }
	 
 }
    13b8:	0f 90       	pop	r0
    13ba:	0f 90       	pop	r0
    13bc:	0f 90       	pop	r0
    13be:	cf 91       	pop	r28
    13c0:	df 91       	pop	r29
    13c2:	08 95       	ret

000013c4 <Login_voidCheckPassword>:
 void Login_voidCheckPassword(void) {
    13c4:	df 93       	push	r29
    13c6:	cf 93       	push	r28
    13c8:	cd b7       	in	r28, 0x3d	; 61
    13ca:	de b7       	in	r29, 0x3e	; 62
    13cc:	6e 97       	sbiw	r28, 0x1e	; 30
    13ce:	0f b6       	in	r0, 0x3f	; 63
    13d0:	f8 94       	cli
    13d2:	de bf       	out	0x3e, r29	; 62
    13d4:	0f be       	out	0x3f, r0	; 63
    13d6:	cd bf       	out	0x3d, r28	; 61
	 u8* Local_PCLCDPass = PASSWORD;
    13d8:	83 e7       	ldi	r24, 0x73	; 115
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	9e 8f       	std	Y+30, r25	; 0x1e
    13de:	8d 8f       	std	Y+29, r24	; 0x1d
		 if ((strcmp(Local_PCLCDPass,Login_SCEnterdPass))!=0) {
    13e0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    13e2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    13e4:	29 eb       	ldi	r18, 0xB9	; 185
    13e6:	30 e0       	ldi	r19, 0x00	; 0
    13e8:	b9 01       	movw	r22, r18
    13ea:	0e 94 a7 14 	call	0x294e	; 0x294e <strcmp>
    13ee:	00 97       	sbiw	r24, 0x00	; 0
    13f0:	21 f0       	breq	.+8      	; 0x13fa <Login_voidCheckPassword+0x36>
			 Login_Su8CompareFlag = 1;
    13f2:	81 e0       	ldi	r24, 0x01	; 1
    13f4:	80 93 bf 00 	sts	0x00BF, r24
    13f8:	02 c0       	rjmp	.+4      	; 0x13fe <Login_voidCheckPassword+0x3a>
		 }
		 else {
			 Login_Su8CompareFlag = 0;
    13fa:	10 92 bf 00 	sts	0x00BF, r1
		 }
	 if (Login_Su8CompareFlag == 0) {
    13fe:	80 91 bf 00 	lds	r24, 0x00BF
    1402:	88 23       	and	r24, r24
    1404:	09 f0       	breq	.+2      	; 0x1408 <Login_voidCheckPassword+0x44>
    1406:	7d c0       	rjmp	.+250    	; 0x1502 <Login_voidCheckPassword+0x13e>
		 LCD_vidSendCommand(0x01);
    1408:	81 e0       	ldi	r24, 0x01	; 1
    140a:	0e 94 8b 10 	call	0x2116	; 0x2116 <LCD_vidSendCommand>
		 LCD_vidSendCommand(0x80);
    140e:	80 e8       	ldi	r24, 0x80	; 128
    1410:	0e 94 8b 10 	call	0x2116	; 0x2116 <LCD_vidSendCommand>
		 LCD_vidWriteString("correct");
    1414:	88 e7       	ldi	r24, 0x78	; 120
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	0e 94 9d 10 	call	0x213a	; 0x213a <LCD_vidWriteString>
    141c:	80 e0       	ldi	r24, 0x00	; 0
    141e:	90 e8       	ldi	r25, 0x80	; 128
    1420:	ab eb       	ldi	r26, 0xBB	; 187
    1422:	b4 e4       	ldi	r27, 0x44	; 68
    1424:	89 8f       	std	Y+25, r24	; 0x19
    1426:	9a 8f       	std	Y+26, r25	; 0x1a
    1428:	ab 8f       	std	Y+27, r26	; 0x1b
    142a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    142c:	69 8d       	ldd	r22, Y+25	; 0x19
    142e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1430:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1432:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1434:	20 e0       	ldi	r18, 0x00	; 0
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	4a e7       	ldi	r20, 0x7A	; 122
    143a:	53 e4       	ldi	r21, 0x43	; 67
    143c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1440:	dc 01       	movw	r26, r24
    1442:	cb 01       	movw	r24, r22
    1444:	8d 8b       	std	Y+21, r24	; 0x15
    1446:	9e 8b       	std	Y+22, r25	; 0x16
    1448:	af 8b       	std	Y+23, r26	; 0x17
    144a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    144c:	6d 89       	ldd	r22, Y+21	; 0x15
    144e:	7e 89       	ldd	r23, Y+22	; 0x16
    1450:	8f 89       	ldd	r24, Y+23	; 0x17
    1452:	98 8d       	ldd	r25, Y+24	; 0x18
    1454:	20 e0       	ldi	r18, 0x00	; 0
    1456:	30 e0       	ldi	r19, 0x00	; 0
    1458:	40 e8       	ldi	r20, 0x80	; 128
    145a:	5f e3       	ldi	r21, 0x3F	; 63
    145c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1460:	88 23       	and	r24, r24
    1462:	2c f4       	brge	.+10     	; 0x146e <Login_voidCheckPassword+0xaa>
		__ticks = 1;
    1464:	81 e0       	ldi	r24, 0x01	; 1
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	9c 8b       	std	Y+20, r25	; 0x14
    146a:	8b 8b       	std	Y+19, r24	; 0x13
    146c:	3f c0       	rjmp	.+126    	; 0x14ec <Login_voidCheckPassword+0x128>
	else if (__tmp > 65535)
    146e:	6d 89       	ldd	r22, Y+21	; 0x15
    1470:	7e 89       	ldd	r23, Y+22	; 0x16
    1472:	8f 89       	ldd	r24, Y+23	; 0x17
    1474:	98 8d       	ldd	r25, Y+24	; 0x18
    1476:	20 e0       	ldi	r18, 0x00	; 0
    1478:	3f ef       	ldi	r19, 0xFF	; 255
    147a:	4f e7       	ldi	r20, 0x7F	; 127
    147c:	57 e4       	ldi	r21, 0x47	; 71
    147e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1482:	18 16       	cp	r1, r24
    1484:	4c f5       	brge	.+82     	; 0x14d8 <Login_voidCheckPassword+0x114>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1486:	69 8d       	ldd	r22, Y+25	; 0x19
    1488:	7a 8d       	ldd	r23, Y+26	; 0x1a
    148a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    148c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    148e:	20 e0       	ldi	r18, 0x00	; 0
    1490:	30 e0       	ldi	r19, 0x00	; 0
    1492:	40 e2       	ldi	r20, 0x20	; 32
    1494:	51 e4       	ldi	r21, 0x41	; 65
    1496:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    149a:	dc 01       	movw	r26, r24
    149c:	cb 01       	movw	r24, r22
    149e:	bc 01       	movw	r22, r24
    14a0:	cd 01       	movw	r24, r26
    14a2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14a6:	dc 01       	movw	r26, r24
    14a8:	cb 01       	movw	r24, r22
    14aa:	9c 8b       	std	Y+20, r25	; 0x14
    14ac:	8b 8b       	std	Y+19, r24	; 0x13
    14ae:	0f c0       	rjmp	.+30     	; 0x14ce <Login_voidCheckPassword+0x10a>
    14b0:	89 e1       	ldi	r24, 0x19	; 25
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	9a 8b       	std	Y+18, r25	; 0x12
    14b6:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    14b8:	89 89       	ldd	r24, Y+17	; 0x11
    14ba:	9a 89       	ldd	r25, Y+18	; 0x12
    14bc:	01 97       	sbiw	r24, 0x01	; 1
    14be:	f1 f7       	brne	.-4      	; 0x14bc <Login_voidCheckPassword+0xf8>
    14c0:	9a 8b       	std	Y+18, r25	; 0x12
    14c2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14c4:	8b 89       	ldd	r24, Y+19	; 0x13
    14c6:	9c 89       	ldd	r25, Y+20	; 0x14
    14c8:	01 97       	sbiw	r24, 0x01	; 1
    14ca:	9c 8b       	std	Y+20, r25	; 0x14
    14cc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14ce:	8b 89       	ldd	r24, Y+19	; 0x13
    14d0:	9c 89       	ldd	r25, Y+20	; 0x14
    14d2:	00 97       	sbiw	r24, 0x00	; 0
    14d4:	69 f7       	brne	.-38     	; 0x14b0 <Login_voidCheckPassword+0xec>
    14d6:	98 c0       	rjmp	.+304    	; 0x1608 <Login_voidCheckPassword+0x244>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14d8:	6d 89       	ldd	r22, Y+21	; 0x15
    14da:	7e 89       	ldd	r23, Y+22	; 0x16
    14dc:	8f 89       	ldd	r24, Y+23	; 0x17
    14de:	98 8d       	ldd	r25, Y+24	; 0x18
    14e0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14e4:	dc 01       	movw	r26, r24
    14e6:	cb 01       	movw	r24, r22
    14e8:	9c 8b       	std	Y+20, r25	; 0x14
    14ea:	8b 8b       	std	Y+19, r24	; 0x13
    14ec:	8b 89       	ldd	r24, Y+19	; 0x13
    14ee:	9c 89       	ldd	r25, Y+20	; 0x14
    14f0:	98 8b       	std	Y+16, r25	; 0x10
    14f2:	8f 87       	std	Y+15, r24	; 0x0f
    14f4:	8f 85       	ldd	r24, Y+15	; 0x0f
    14f6:	98 89       	ldd	r25, Y+16	; 0x10
    14f8:	01 97       	sbiw	r24, 0x01	; 1
    14fa:	f1 f7       	brne	.-4      	; 0x14f8 <Login_voidCheckPassword+0x134>
    14fc:	98 8b       	std	Y+16, r25	; 0x10
    14fe:	8f 87       	std	Y+15, r24	; 0x0f
    1500:	83 c0       	rjmp	.+262    	; 0x1608 <Login_voidCheckPassword+0x244>
		 _delay_ms(1500);
		 }
		 else{
		 LCD_vidSendCommand(0x01);
    1502:	81 e0       	ldi	r24, 0x01	; 1
    1504:	0e 94 8b 10 	call	0x2116	; 0x2116 <LCD_vidSendCommand>
		 LCD_vidSendCommand(0x80);
    1508:	80 e8       	ldi	r24, 0x80	; 128
    150a:	0e 94 8b 10 	call	0x2116	; 0x2116 <LCD_vidSendCommand>
		 LCD_vidWriteString("incorrect");
    150e:	80 e8       	ldi	r24, 0x80	; 128
    1510:	90 e0       	ldi	r25, 0x00	; 0
    1512:	0e 94 9d 10 	call	0x213a	; 0x213a <LCD_vidWriteString>
		 LCD_vidSendCommand(0xC0);
    1516:	80 ec       	ldi	r24, 0xC0	; 192
    1518:	0e 94 8b 10 	call	0x2116	; 0x2116 <LCD_vidSendCommand>
		 LCD_vidWriteString("try Again");
    151c:	8a e8       	ldi	r24, 0x8A	; 138
    151e:	90 e0       	ldi	r25, 0x00	; 0
    1520:	0e 94 9d 10 	call	0x213a	; 0x213a <LCD_vidWriteString>
    1524:	80 e0       	ldi	r24, 0x00	; 0
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	aa e7       	ldi	r26, 0x7A	; 122
    152a:	b4 e4       	ldi	r27, 0x44	; 68
    152c:	8b 87       	std	Y+11, r24	; 0x0b
    152e:	9c 87       	std	Y+12, r25	; 0x0c
    1530:	ad 87       	std	Y+13, r26	; 0x0d
    1532:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1534:	6b 85       	ldd	r22, Y+11	; 0x0b
    1536:	7c 85       	ldd	r23, Y+12	; 0x0c
    1538:	8d 85       	ldd	r24, Y+13	; 0x0d
    153a:	9e 85       	ldd	r25, Y+14	; 0x0e
    153c:	20 e0       	ldi	r18, 0x00	; 0
    153e:	30 e0       	ldi	r19, 0x00	; 0
    1540:	4a e7       	ldi	r20, 0x7A	; 122
    1542:	53 e4       	ldi	r21, 0x43	; 67
    1544:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1548:	dc 01       	movw	r26, r24
    154a:	cb 01       	movw	r24, r22
    154c:	8f 83       	std	Y+7, r24	; 0x07
    154e:	98 87       	std	Y+8, r25	; 0x08
    1550:	a9 87       	std	Y+9, r26	; 0x09
    1552:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1554:	6f 81       	ldd	r22, Y+7	; 0x07
    1556:	78 85       	ldd	r23, Y+8	; 0x08
    1558:	89 85       	ldd	r24, Y+9	; 0x09
    155a:	9a 85       	ldd	r25, Y+10	; 0x0a
    155c:	20 e0       	ldi	r18, 0x00	; 0
    155e:	30 e0       	ldi	r19, 0x00	; 0
    1560:	40 e8       	ldi	r20, 0x80	; 128
    1562:	5f e3       	ldi	r21, 0x3F	; 63
    1564:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1568:	88 23       	and	r24, r24
    156a:	2c f4       	brge	.+10     	; 0x1576 <Login_voidCheckPassword+0x1b2>
		__ticks = 1;
    156c:	81 e0       	ldi	r24, 0x01	; 1
    156e:	90 e0       	ldi	r25, 0x00	; 0
    1570:	9e 83       	std	Y+6, r25	; 0x06
    1572:	8d 83       	std	Y+5, r24	; 0x05
    1574:	3f c0       	rjmp	.+126    	; 0x15f4 <Login_voidCheckPassword+0x230>
	else if (__tmp > 65535)
    1576:	6f 81       	ldd	r22, Y+7	; 0x07
    1578:	78 85       	ldd	r23, Y+8	; 0x08
    157a:	89 85       	ldd	r24, Y+9	; 0x09
    157c:	9a 85       	ldd	r25, Y+10	; 0x0a
    157e:	20 e0       	ldi	r18, 0x00	; 0
    1580:	3f ef       	ldi	r19, 0xFF	; 255
    1582:	4f e7       	ldi	r20, 0x7F	; 127
    1584:	57 e4       	ldi	r21, 0x47	; 71
    1586:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    158a:	18 16       	cp	r1, r24
    158c:	4c f5       	brge	.+82     	; 0x15e0 <Login_voidCheckPassword+0x21c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    158e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1590:	7c 85       	ldd	r23, Y+12	; 0x0c
    1592:	8d 85       	ldd	r24, Y+13	; 0x0d
    1594:	9e 85       	ldd	r25, Y+14	; 0x0e
    1596:	20 e0       	ldi	r18, 0x00	; 0
    1598:	30 e0       	ldi	r19, 0x00	; 0
    159a:	40 e2       	ldi	r20, 0x20	; 32
    159c:	51 e4       	ldi	r21, 0x41	; 65
    159e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15a2:	dc 01       	movw	r26, r24
    15a4:	cb 01       	movw	r24, r22
    15a6:	bc 01       	movw	r22, r24
    15a8:	cd 01       	movw	r24, r26
    15aa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15ae:	dc 01       	movw	r26, r24
    15b0:	cb 01       	movw	r24, r22
    15b2:	9e 83       	std	Y+6, r25	; 0x06
    15b4:	8d 83       	std	Y+5, r24	; 0x05
    15b6:	0f c0       	rjmp	.+30     	; 0x15d6 <Login_voidCheckPassword+0x212>
    15b8:	89 e1       	ldi	r24, 0x19	; 25
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	9c 83       	std	Y+4, r25	; 0x04
    15be:	8b 83       	std	Y+3, r24	; 0x03
    15c0:	8b 81       	ldd	r24, Y+3	; 0x03
    15c2:	9c 81       	ldd	r25, Y+4	; 0x04
    15c4:	01 97       	sbiw	r24, 0x01	; 1
    15c6:	f1 f7       	brne	.-4      	; 0x15c4 <Login_voidCheckPassword+0x200>
    15c8:	9c 83       	std	Y+4, r25	; 0x04
    15ca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15cc:	8d 81       	ldd	r24, Y+5	; 0x05
    15ce:	9e 81       	ldd	r25, Y+6	; 0x06
    15d0:	01 97       	sbiw	r24, 0x01	; 1
    15d2:	9e 83       	std	Y+6, r25	; 0x06
    15d4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15d6:	8d 81       	ldd	r24, Y+5	; 0x05
    15d8:	9e 81       	ldd	r25, Y+6	; 0x06
    15da:	00 97       	sbiw	r24, 0x00	; 0
    15dc:	69 f7       	brne	.-38     	; 0x15b8 <Login_voidCheckPassword+0x1f4>
    15de:	14 c0       	rjmp	.+40     	; 0x1608 <Login_voidCheckPassword+0x244>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15e0:	6f 81       	ldd	r22, Y+7	; 0x07
    15e2:	78 85       	ldd	r23, Y+8	; 0x08
    15e4:	89 85       	ldd	r24, Y+9	; 0x09
    15e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    15e8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15ec:	dc 01       	movw	r26, r24
    15ee:	cb 01       	movw	r24, r22
    15f0:	9e 83       	std	Y+6, r25	; 0x06
    15f2:	8d 83       	std	Y+5, r24	; 0x05
    15f4:	8d 81       	ldd	r24, Y+5	; 0x05
    15f6:	9e 81       	ldd	r25, Y+6	; 0x06
    15f8:	9a 83       	std	Y+2, r25	; 0x02
    15fa:	89 83       	std	Y+1, r24	; 0x01
    15fc:	89 81       	ldd	r24, Y+1	; 0x01
    15fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1600:	01 97       	sbiw	r24, 0x01	; 1
    1602:	f1 f7       	brne	.-4      	; 0x1600 <Login_voidCheckPassword+0x23c>
    1604:	9a 83       	std	Y+2, r25	; 0x02
    1606:	89 83       	std	Y+1, r24	; 0x01
		 _delay_ms(1000);
	 }

 }
    1608:	6e 96       	adiw	r28, 0x1e	; 30
    160a:	0f b6       	in	r0, 0x3f	; 63
    160c:	f8 94       	cli
    160e:	de bf       	out	0x3e, r29	; 62
    1610:	0f be       	out	0x3f, r0	; 63
    1612:	cd bf       	out	0x3d, r28	; 61
    1614:	cf 91       	pop	r28
    1616:	df 91       	pop	r29
    1618:	08 95       	ret

0000161a <Login_u8GetCompareFlag>:
 u8 Login_u8GetCompareFlag(void) {
    161a:	df 93       	push	r29
    161c:	cf 93       	push	r28
    161e:	cd b7       	in	r28, 0x3d	; 61
    1620:	de b7       	in	r29, 0x3e	; 62
	 return Login_Su8CompareFlag;
    1622:	80 91 bf 00 	lds	r24, 0x00BF
 }
    1626:	cf 91       	pop	r28
    1628:	df 91       	pop	r29
    162a:	08 95       	ret

0000162c <system_voidInit>:
 *
 * Created: 9/9/2023 8:52:16 PM
 *  Author: Yehia
 */ 
#include "system.h"
void system_voidInit(void){
    162c:	df 93       	push	r29
    162e:	cf 93       	push	r28
    1630:	cd b7       	in	r28, 0x3d	; 61
    1632:	de b7       	in	r29, 0x3e	; 62
	led_init();
    1634:	0e 94 00 13 	call	0x2600	; 0x2600 <led_init>
	LCD_vidSendCommand(LCD_CLEAR_COMMAND);
    1638:	81 e0       	ldi	r24, 0x01	; 1
    163a:	0e 94 8b 10 	call	0x2116	; 0x2116 <LCD_vidSendCommand>
	LCD_vidWriteString("1 for LEDS ON");
    163e:	84 e9       	ldi	r24, 0x94	; 148
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	0e 94 9d 10 	call	0x213a	; 0x213a <LCD_vidWriteString>
	LCD_vidSendCommand(0xC0);
    1646:	80 ec       	ldi	r24, 0xC0	; 192
    1648:	0e 94 8b 10 	call	0x2116	; 0x2116 <LCD_vidSendCommand>
	LCD_vidWriteString("2 for LEDS OFF");
    164c:	82 ea       	ldi	r24, 0xA2	; 162
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	0e 94 9d 10 	call	0x213a	; 0x213a <LCD_vidWriteString>
}
    1654:	cf 91       	pop	r28
    1656:	df 91       	pop	r29
    1658:	08 95       	ret

0000165a <system_voidTurnOnLeds>:

void system_voidTurnOnLeds(void){
    165a:	df 93       	push	r29
    165c:	cf 93       	push	r28
    165e:	cd b7       	in	r28, 0x3d	; 61
    1660:	de b7       	in	r29, 0x3e	; 62
	led_on();
    1662:	0e 94 1b 13 	call	0x2636	; 0x2636 <led_on>
}
    1666:	cf 91       	pop	r28
    1668:	df 91       	pop	r29
    166a:	08 95       	ret

0000166c <system_voidTurnOffLeds>:
void system_voidTurnOffLeds(void){
    166c:	df 93       	push	r29
    166e:	cf 93       	push	r28
    1670:	cd b7       	in	r28, 0x3d	; 61
    1672:	de b7       	in	r29, 0x3e	; 62
	led_off();
    1674:	0e 94 2c 13 	call	0x2658	; 0x2658 <led_off>
}
    1678:	cf 91       	pop	r28
    167a:	df 91       	pop	r29
    167c:	08 95       	ret

0000167e <DIO_voidSetPinValue>:
 */

#include "DIO_init.h"


void DIO_voidSetPinValue(u8 Copy_u8GroupID,u8 Copy_u8PinID,u8 Copy_u8PinValue){
    167e:	df 93       	push	r29
    1680:	cf 93       	push	r28
    1682:	00 d0       	rcall	.+0      	; 0x1684 <DIO_voidSetPinValue+0x6>
    1684:	00 d0       	rcall	.+0      	; 0x1686 <DIO_voidSetPinValue+0x8>
    1686:	0f 92       	push	r0
    1688:	cd b7       	in	r28, 0x3d	; 61
    168a:	de b7       	in	r29, 0x3e	; 62
    168c:	89 83       	std	Y+1, r24	; 0x01
    168e:	6a 83       	std	Y+2, r22	; 0x02
    1690:	4b 83       	std	Y+3, r20	; 0x03
	if (Copy_u8GroupID <= DIO_GROUP_D && Copy_u8PinID <= DIO_PIN_7
    1692:	89 81       	ldd	r24, Y+1	; 0x01
    1694:	84 30       	cpi	r24, 0x04	; 4
    1696:	08 f0       	brcs	.+2      	; 0x169a <DIO_voidSetPinValue+0x1c>
    1698:	d9 c0       	rjmp	.+434    	; 0x184c <DIO_voidSetPinValue+0x1ce>
    169a:	8a 81       	ldd	r24, Y+2	; 0x02
    169c:	88 30       	cpi	r24, 0x08	; 8
    169e:	08 f0       	brcs	.+2      	; 0x16a2 <DIO_voidSetPinValue+0x24>
    16a0:	d5 c0       	rjmp	.+426    	; 0x184c <DIO_voidSetPinValue+0x1ce>
    16a2:	8b 81       	ldd	r24, Y+3	; 0x03
    16a4:	82 30       	cpi	r24, 0x02	; 2
    16a6:	08 f0       	brcs	.+2      	; 0x16aa <DIO_voidSetPinValue+0x2c>
    16a8:	d1 c0       	rjmp	.+418    	; 0x184c <DIO_voidSetPinValue+0x1ce>
		&& Copy_u8PinValue <= DIO_HIGH) {
		switch (Copy_u8GroupID)
    16aa:	89 81       	ldd	r24, Y+1	; 0x01
    16ac:	28 2f       	mov	r18, r24
    16ae:	30 e0       	ldi	r19, 0x00	; 0
    16b0:	3d 83       	std	Y+5, r19	; 0x05
    16b2:	2c 83       	std	Y+4, r18	; 0x04
    16b4:	8c 81       	ldd	r24, Y+4	; 0x04
    16b6:	9d 81       	ldd	r25, Y+5	; 0x05
    16b8:	81 30       	cpi	r24, 0x01	; 1
    16ba:	91 05       	cpc	r25, r1
    16bc:	09 f4       	brne	.+2      	; 0x16c0 <DIO_voidSetPinValue+0x42>
    16be:	43 c0       	rjmp	.+134    	; 0x1746 <DIO_voidSetPinValue+0xc8>
    16c0:	2c 81       	ldd	r18, Y+4	; 0x04
    16c2:	3d 81       	ldd	r19, Y+5	; 0x05
    16c4:	22 30       	cpi	r18, 0x02	; 2
    16c6:	31 05       	cpc	r19, r1
    16c8:	2c f4       	brge	.+10     	; 0x16d4 <DIO_voidSetPinValue+0x56>
    16ca:	8c 81       	ldd	r24, Y+4	; 0x04
    16cc:	9d 81       	ldd	r25, Y+5	; 0x05
    16ce:	00 97       	sbiw	r24, 0x00	; 0
    16d0:	71 f0       	breq	.+28     	; 0x16ee <DIO_voidSetPinValue+0x70>
    16d2:	bc c0       	rjmp	.+376    	; 0x184c <DIO_voidSetPinValue+0x1ce>
    16d4:	2c 81       	ldd	r18, Y+4	; 0x04
    16d6:	3d 81       	ldd	r19, Y+5	; 0x05
    16d8:	22 30       	cpi	r18, 0x02	; 2
    16da:	31 05       	cpc	r19, r1
    16dc:	09 f4       	brne	.+2      	; 0x16e0 <DIO_voidSetPinValue+0x62>
    16de:	5f c0       	rjmp	.+190    	; 0x179e <DIO_voidSetPinValue+0x120>
    16e0:	8c 81       	ldd	r24, Y+4	; 0x04
    16e2:	9d 81       	ldd	r25, Y+5	; 0x05
    16e4:	83 30       	cpi	r24, 0x03	; 3
    16e6:	91 05       	cpc	r25, r1
    16e8:	09 f4       	brne	.+2      	; 0x16ec <DIO_voidSetPinValue+0x6e>
    16ea:	85 c0       	rjmp	.+266    	; 0x17f6 <DIO_voidSetPinValue+0x178>
    16ec:	af c0       	rjmp	.+350    	; 0x184c <DIO_voidSetPinValue+0x1ce>
		{
		case DIO_GROUP_A:
			if (Copy_u8PinValue == DIO_LOW)
    16ee:	8b 81       	ldd	r24, Y+3	; 0x03
    16f0:	88 23       	and	r24, r24
    16f2:	a9 f4       	brne	.+42     	; 0x171e <DIO_voidSetPinValue+0xa0>
				PORTA &= ~(DIO_BIT_MASK << Copy_u8PinID);
    16f4:	ab e3       	ldi	r26, 0x3B	; 59
    16f6:	b0 e0       	ldi	r27, 0x00	; 0
    16f8:	eb e3       	ldi	r30, 0x3B	; 59
    16fa:	f0 e0       	ldi	r31, 0x00	; 0
    16fc:	80 81       	ld	r24, Z
    16fe:	48 2f       	mov	r20, r24
    1700:	8a 81       	ldd	r24, Y+2	; 0x02
    1702:	28 2f       	mov	r18, r24
    1704:	30 e0       	ldi	r19, 0x00	; 0
    1706:	81 e0       	ldi	r24, 0x01	; 1
    1708:	90 e0       	ldi	r25, 0x00	; 0
    170a:	02 2e       	mov	r0, r18
    170c:	02 c0       	rjmp	.+4      	; 0x1712 <DIO_voidSetPinValue+0x94>
    170e:	88 0f       	add	r24, r24
    1710:	99 1f       	adc	r25, r25
    1712:	0a 94       	dec	r0
    1714:	e2 f7       	brpl	.-8      	; 0x170e <DIO_voidSetPinValue+0x90>
    1716:	80 95       	com	r24
    1718:	84 23       	and	r24, r20
    171a:	8c 93       	st	X, r24
    171c:	97 c0       	rjmp	.+302    	; 0x184c <DIO_voidSetPinValue+0x1ce>
			else
				PORTA |= (DIO_BIT_MASK << Copy_u8PinID);
    171e:	ab e3       	ldi	r26, 0x3B	; 59
    1720:	b0 e0       	ldi	r27, 0x00	; 0
    1722:	eb e3       	ldi	r30, 0x3B	; 59
    1724:	f0 e0       	ldi	r31, 0x00	; 0
    1726:	80 81       	ld	r24, Z
    1728:	48 2f       	mov	r20, r24
    172a:	8a 81       	ldd	r24, Y+2	; 0x02
    172c:	28 2f       	mov	r18, r24
    172e:	30 e0       	ldi	r19, 0x00	; 0
    1730:	81 e0       	ldi	r24, 0x01	; 1
    1732:	90 e0       	ldi	r25, 0x00	; 0
    1734:	02 2e       	mov	r0, r18
    1736:	02 c0       	rjmp	.+4      	; 0x173c <DIO_voidSetPinValue+0xbe>
    1738:	88 0f       	add	r24, r24
    173a:	99 1f       	adc	r25, r25
    173c:	0a 94       	dec	r0
    173e:	e2 f7       	brpl	.-8      	; 0x1738 <DIO_voidSetPinValue+0xba>
    1740:	84 2b       	or	r24, r20
    1742:	8c 93       	st	X, r24
    1744:	83 c0       	rjmp	.+262    	; 0x184c <DIO_voidSetPinValue+0x1ce>
			break;
		case DIO_GROUP_B:
			if (Copy_u8PinValue == DIO_LOW)
    1746:	8b 81       	ldd	r24, Y+3	; 0x03
    1748:	88 23       	and	r24, r24
    174a:	a9 f4       	brne	.+42     	; 0x1776 <DIO_voidSetPinValue+0xf8>
				PORTB &= ~(DIO_BIT_MASK << Copy_u8PinID);
    174c:	a8 e3       	ldi	r26, 0x38	; 56
    174e:	b0 e0       	ldi	r27, 0x00	; 0
    1750:	e8 e3       	ldi	r30, 0x38	; 56
    1752:	f0 e0       	ldi	r31, 0x00	; 0
    1754:	80 81       	ld	r24, Z
    1756:	48 2f       	mov	r20, r24
    1758:	8a 81       	ldd	r24, Y+2	; 0x02
    175a:	28 2f       	mov	r18, r24
    175c:	30 e0       	ldi	r19, 0x00	; 0
    175e:	81 e0       	ldi	r24, 0x01	; 1
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	02 2e       	mov	r0, r18
    1764:	02 c0       	rjmp	.+4      	; 0x176a <DIO_voidSetPinValue+0xec>
    1766:	88 0f       	add	r24, r24
    1768:	99 1f       	adc	r25, r25
    176a:	0a 94       	dec	r0
    176c:	e2 f7       	brpl	.-8      	; 0x1766 <DIO_voidSetPinValue+0xe8>
    176e:	80 95       	com	r24
    1770:	84 23       	and	r24, r20
    1772:	8c 93       	st	X, r24
    1774:	6b c0       	rjmp	.+214    	; 0x184c <DIO_voidSetPinValue+0x1ce>
			else
				PORTB |= (DIO_BIT_MASK << Copy_u8PinID);
    1776:	a8 e3       	ldi	r26, 0x38	; 56
    1778:	b0 e0       	ldi	r27, 0x00	; 0
    177a:	e8 e3       	ldi	r30, 0x38	; 56
    177c:	f0 e0       	ldi	r31, 0x00	; 0
    177e:	80 81       	ld	r24, Z
    1780:	48 2f       	mov	r20, r24
    1782:	8a 81       	ldd	r24, Y+2	; 0x02
    1784:	28 2f       	mov	r18, r24
    1786:	30 e0       	ldi	r19, 0x00	; 0
    1788:	81 e0       	ldi	r24, 0x01	; 1
    178a:	90 e0       	ldi	r25, 0x00	; 0
    178c:	02 2e       	mov	r0, r18
    178e:	02 c0       	rjmp	.+4      	; 0x1794 <DIO_voidSetPinValue+0x116>
    1790:	88 0f       	add	r24, r24
    1792:	99 1f       	adc	r25, r25
    1794:	0a 94       	dec	r0
    1796:	e2 f7       	brpl	.-8      	; 0x1790 <DIO_voidSetPinValue+0x112>
    1798:	84 2b       	or	r24, r20
    179a:	8c 93       	st	X, r24
    179c:	57 c0       	rjmp	.+174    	; 0x184c <DIO_voidSetPinValue+0x1ce>
			break;
		case DIO_GROUP_C:
			if (Copy_u8PinValue == DIO_LOW)
    179e:	8b 81       	ldd	r24, Y+3	; 0x03
    17a0:	88 23       	and	r24, r24
    17a2:	a9 f4       	brne	.+42     	; 0x17ce <DIO_voidSetPinValue+0x150>
				PORTC &= ~(DIO_BIT_MASK << Copy_u8PinID);
    17a4:	a5 e3       	ldi	r26, 0x35	; 53
    17a6:	b0 e0       	ldi	r27, 0x00	; 0
    17a8:	e5 e3       	ldi	r30, 0x35	; 53
    17aa:	f0 e0       	ldi	r31, 0x00	; 0
    17ac:	80 81       	ld	r24, Z
    17ae:	48 2f       	mov	r20, r24
    17b0:	8a 81       	ldd	r24, Y+2	; 0x02
    17b2:	28 2f       	mov	r18, r24
    17b4:	30 e0       	ldi	r19, 0x00	; 0
    17b6:	81 e0       	ldi	r24, 0x01	; 1
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	02 2e       	mov	r0, r18
    17bc:	02 c0       	rjmp	.+4      	; 0x17c2 <DIO_voidSetPinValue+0x144>
    17be:	88 0f       	add	r24, r24
    17c0:	99 1f       	adc	r25, r25
    17c2:	0a 94       	dec	r0
    17c4:	e2 f7       	brpl	.-8      	; 0x17be <DIO_voidSetPinValue+0x140>
    17c6:	80 95       	com	r24
    17c8:	84 23       	and	r24, r20
    17ca:	8c 93       	st	X, r24
    17cc:	3f c0       	rjmp	.+126    	; 0x184c <DIO_voidSetPinValue+0x1ce>
			else
				PORTC |= (DIO_BIT_MASK << Copy_u8PinID);
    17ce:	a5 e3       	ldi	r26, 0x35	; 53
    17d0:	b0 e0       	ldi	r27, 0x00	; 0
    17d2:	e5 e3       	ldi	r30, 0x35	; 53
    17d4:	f0 e0       	ldi	r31, 0x00	; 0
    17d6:	80 81       	ld	r24, Z
    17d8:	48 2f       	mov	r20, r24
    17da:	8a 81       	ldd	r24, Y+2	; 0x02
    17dc:	28 2f       	mov	r18, r24
    17de:	30 e0       	ldi	r19, 0x00	; 0
    17e0:	81 e0       	ldi	r24, 0x01	; 1
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	02 2e       	mov	r0, r18
    17e6:	02 c0       	rjmp	.+4      	; 0x17ec <DIO_voidSetPinValue+0x16e>
    17e8:	88 0f       	add	r24, r24
    17ea:	99 1f       	adc	r25, r25
    17ec:	0a 94       	dec	r0
    17ee:	e2 f7       	brpl	.-8      	; 0x17e8 <DIO_voidSetPinValue+0x16a>
    17f0:	84 2b       	or	r24, r20
    17f2:	8c 93       	st	X, r24
    17f4:	2b c0       	rjmp	.+86     	; 0x184c <DIO_voidSetPinValue+0x1ce>
			break;
		case DIO_GROUP_D:
			if (Copy_u8PinValue == DIO_LOW)
    17f6:	8b 81       	ldd	r24, Y+3	; 0x03
    17f8:	88 23       	and	r24, r24
    17fa:	a9 f4       	brne	.+42     	; 0x1826 <DIO_voidSetPinValue+0x1a8>
				PORTD &= ~(DIO_BIT_MASK << Copy_u8PinID);
    17fc:	a2 e3       	ldi	r26, 0x32	; 50
    17fe:	b0 e0       	ldi	r27, 0x00	; 0
    1800:	e2 e3       	ldi	r30, 0x32	; 50
    1802:	f0 e0       	ldi	r31, 0x00	; 0
    1804:	80 81       	ld	r24, Z
    1806:	48 2f       	mov	r20, r24
    1808:	8a 81       	ldd	r24, Y+2	; 0x02
    180a:	28 2f       	mov	r18, r24
    180c:	30 e0       	ldi	r19, 0x00	; 0
    180e:	81 e0       	ldi	r24, 0x01	; 1
    1810:	90 e0       	ldi	r25, 0x00	; 0
    1812:	02 2e       	mov	r0, r18
    1814:	02 c0       	rjmp	.+4      	; 0x181a <DIO_voidSetPinValue+0x19c>
    1816:	88 0f       	add	r24, r24
    1818:	99 1f       	adc	r25, r25
    181a:	0a 94       	dec	r0
    181c:	e2 f7       	brpl	.-8      	; 0x1816 <DIO_voidSetPinValue+0x198>
    181e:	80 95       	com	r24
    1820:	84 23       	and	r24, r20
    1822:	8c 93       	st	X, r24
    1824:	13 c0       	rjmp	.+38     	; 0x184c <DIO_voidSetPinValue+0x1ce>
			else
				PORTD |= (DIO_BIT_MASK << Copy_u8PinID);
    1826:	a2 e3       	ldi	r26, 0x32	; 50
    1828:	b0 e0       	ldi	r27, 0x00	; 0
    182a:	e2 e3       	ldi	r30, 0x32	; 50
    182c:	f0 e0       	ldi	r31, 0x00	; 0
    182e:	80 81       	ld	r24, Z
    1830:	48 2f       	mov	r20, r24
    1832:	8a 81       	ldd	r24, Y+2	; 0x02
    1834:	28 2f       	mov	r18, r24
    1836:	30 e0       	ldi	r19, 0x00	; 0
    1838:	81 e0       	ldi	r24, 0x01	; 1
    183a:	90 e0       	ldi	r25, 0x00	; 0
    183c:	02 2e       	mov	r0, r18
    183e:	02 c0       	rjmp	.+4      	; 0x1844 <DIO_voidSetPinValue+0x1c6>
    1840:	88 0f       	add	r24, r24
    1842:	99 1f       	adc	r25, r25
    1844:	0a 94       	dec	r0
    1846:	e2 f7       	brpl	.-8      	; 0x1840 <DIO_voidSetPinValue+0x1c2>
    1848:	84 2b       	or	r24, r20
    184a:	8c 93       	st	X, r24
		default:
			break;
		}
	}

}
    184c:	0f 90       	pop	r0
    184e:	0f 90       	pop	r0
    1850:	0f 90       	pop	r0
    1852:	0f 90       	pop	r0
    1854:	0f 90       	pop	r0
    1856:	cf 91       	pop	r28
    1858:	df 91       	pop	r29
    185a:	08 95       	ret

0000185c <DIO_voidSetPinDirection>:
void DIO_voidSetPinDirection(u8 Copy_u8GroupID,u8 Copy_u8PinID,u8 Copy_u8PinDirection){
    185c:	df 93       	push	r29
    185e:	cf 93       	push	r28
    1860:	00 d0       	rcall	.+0      	; 0x1862 <DIO_voidSetPinDirection+0x6>
    1862:	00 d0       	rcall	.+0      	; 0x1864 <DIO_voidSetPinDirection+0x8>
    1864:	0f 92       	push	r0
    1866:	cd b7       	in	r28, 0x3d	; 61
    1868:	de b7       	in	r29, 0x3e	; 62
    186a:	89 83       	std	Y+1, r24	; 0x01
    186c:	6a 83       	std	Y+2, r22	; 0x02
    186e:	4b 83       	std	Y+3, r20	; 0x03
	if (Copy_u8GroupID<=DIO_GROUP_D && Copy_u8PinID<=DIO_PIN_7
    1870:	89 81       	ldd	r24, Y+1	; 0x01
    1872:	84 30       	cpi	r24, 0x04	; 4
    1874:	08 f0       	brcs	.+2      	; 0x1878 <DIO_voidSetPinDirection+0x1c>
    1876:	d9 c0       	rjmp	.+434    	; 0x1a2a <DIO_voidSetPinDirection+0x1ce>
    1878:	8a 81       	ldd	r24, Y+2	; 0x02
    187a:	88 30       	cpi	r24, 0x08	; 8
    187c:	08 f0       	brcs	.+2      	; 0x1880 <DIO_voidSetPinDirection+0x24>
    187e:	d5 c0       	rjmp	.+426    	; 0x1a2a <DIO_voidSetPinDirection+0x1ce>
    1880:	8b 81       	ldd	r24, Y+3	; 0x03
    1882:	82 30       	cpi	r24, 0x02	; 2
    1884:	08 f0       	brcs	.+2      	; 0x1888 <DIO_voidSetPinDirection+0x2c>
    1886:	d1 c0       	rjmp	.+418    	; 0x1a2a <DIO_voidSetPinDirection+0x1ce>
				&& Copy_u8PinDirection<=DIO_OUTPUT){
		switch (Copy_u8GroupID)
    1888:	89 81       	ldd	r24, Y+1	; 0x01
    188a:	28 2f       	mov	r18, r24
    188c:	30 e0       	ldi	r19, 0x00	; 0
    188e:	3d 83       	std	Y+5, r19	; 0x05
    1890:	2c 83       	std	Y+4, r18	; 0x04
    1892:	8c 81       	ldd	r24, Y+4	; 0x04
    1894:	9d 81       	ldd	r25, Y+5	; 0x05
    1896:	81 30       	cpi	r24, 0x01	; 1
    1898:	91 05       	cpc	r25, r1
    189a:	09 f4       	brne	.+2      	; 0x189e <DIO_voidSetPinDirection+0x42>
    189c:	43 c0       	rjmp	.+134    	; 0x1924 <DIO_voidSetPinDirection+0xc8>
    189e:	2c 81       	ldd	r18, Y+4	; 0x04
    18a0:	3d 81       	ldd	r19, Y+5	; 0x05
    18a2:	22 30       	cpi	r18, 0x02	; 2
    18a4:	31 05       	cpc	r19, r1
    18a6:	2c f4       	brge	.+10     	; 0x18b2 <DIO_voidSetPinDirection+0x56>
    18a8:	8c 81       	ldd	r24, Y+4	; 0x04
    18aa:	9d 81       	ldd	r25, Y+5	; 0x05
    18ac:	00 97       	sbiw	r24, 0x00	; 0
    18ae:	71 f0       	breq	.+28     	; 0x18cc <DIO_voidSetPinDirection+0x70>
    18b0:	bc c0       	rjmp	.+376    	; 0x1a2a <DIO_voidSetPinDirection+0x1ce>
    18b2:	2c 81       	ldd	r18, Y+4	; 0x04
    18b4:	3d 81       	ldd	r19, Y+5	; 0x05
    18b6:	22 30       	cpi	r18, 0x02	; 2
    18b8:	31 05       	cpc	r19, r1
    18ba:	09 f4       	brne	.+2      	; 0x18be <DIO_voidSetPinDirection+0x62>
    18bc:	5f c0       	rjmp	.+190    	; 0x197c <DIO_voidSetPinDirection+0x120>
    18be:	8c 81       	ldd	r24, Y+4	; 0x04
    18c0:	9d 81       	ldd	r25, Y+5	; 0x05
    18c2:	83 30       	cpi	r24, 0x03	; 3
    18c4:	91 05       	cpc	r25, r1
    18c6:	09 f4       	brne	.+2      	; 0x18ca <DIO_voidSetPinDirection+0x6e>
    18c8:	85 c0       	rjmp	.+266    	; 0x19d4 <DIO_voidSetPinDirection+0x178>
    18ca:	af c0       	rjmp	.+350    	; 0x1a2a <DIO_voidSetPinDirection+0x1ce>
		{
		case DIO_GROUP_A:
			if (Copy_u8PinDirection == DIO_INPUT)
    18cc:	8b 81       	ldd	r24, Y+3	; 0x03
    18ce:	88 23       	and	r24, r24
    18d0:	a9 f4       	brne	.+42     	; 0x18fc <DIO_voidSetPinDirection+0xa0>
				DDRA &= ~(DIO_BIT_MASK << Copy_u8PinID);
    18d2:	aa e3       	ldi	r26, 0x3A	; 58
    18d4:	b0 e0       	ldi	r27, 0x00	; 0
    18d6:	ea e3       	ldi	r30, 0x3A	; 58
    18d8:	f0 e0       	ldi	r31, 0x00	; 0
    18da:	80 81       	ld	r24, Z
    18dc:	48 2f       	mov	r20, r24
    18de:	8a 81       	ldd	r24, Y+2	; 0x02
    18e0:	28 2f       	mov	r18, r24
    18e2:	30 e0       	ldi	r19, 0x00	; 0
    18e4:	81 e0       	ldi	r24, 0x01	; 1
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	02 2e       	mov	r0, r18
    18ea:	02 c0       	rjmp	.+4      	; 0x18f0 <DIO_voidSetPinDirection+0x94>
    18ec:	88 0f       	add	r24, r24
    18ee:	99 1f       	adc	r25, r25
    18f0:	0a 94       	dec	r0
    18f2:	e2 f7       	brpl	.-8      	; 0x18ec <DIO_voidSetPinDirection+0x90>
    18f4:	80 95       	com	r24
    18f6:	84 23       	and	r24, r20
    18f8:	8c 93       	st	X, r24
    18fa:	97 c0       	rjmp	.+302    	; 0x1a2a <DIO_voidSetPinDirection+0x1ce>
			else
				DDRA |= (DIO_BIT_MASK << Copy_u8PinID);
    18fc:	aa e3       	ldi	r26, 0x3A	; 58
    18fe:	b0 e0       	ldi	r27, 0x00	; 0
    1900:	ea e3       	ldi	r30, 0x3A	; 58
    1902:	f0 e0       	ldi	r31, 0x00	; 0
    1904:	80 81       	ld	r24, Z
    1906:	48 2f       	mov	r20, r24
    1908:	8a 81       	ldd	r24, Y+2	; 0x02
    190a:	28 2f       	mov	r18, r24
    190c:	30 e0       	ldi	r19, 0x00	; 0
    190e:	81 e0       	ldi	r24, 0x01	; 1
    1910:	90 e0       	ldi	r25, 0x00	; 0
    1912:	02 2e       	mov	r0, r18
    1914:	02 c0       	rjmp	.+4      	; 0x191a <DIO_voidSetPinDirection+0xbe>
    1916:	88 0f       	add	r24, r24
    1918:	99 1f       	adc	r25, r25
    191a:	0a 94       	dec	r0
    191c:	e2 f7       	brpl	.-8      	; 0x1916 <DIO_voidSetPinDirection+0xba>
    191e:	84 2b       	or	r24, r20
    1920:	8c 93       	st	X, r24
    1922:	83 c0       	rjmp	.+262    	; 0x1a2a <DIO_voidSetPinDirection+0x1ce>
			break;
		case DIO_GROUP_B:
			if (Copy_u8PinDirection == DIO_INPUT)
    1924:	8b 81       	ldd	r24, Y+3	; 0x03
    1926:	88 23       	and	r24, r24
    1928:	a9 f4       	brne	.+42     	; 0x1954 <DIO_voidSetPinDirection+0xf8>
				DDRB &= ~(DIO_BIT_MASK << Copy_u8PinID);
    192a:	a7 e3       	ldi	r26, 0x37	; 55
    192c:	b0 e0       	ldi	r27, 0x00	; 0
    192e:	e7 e3       	ldi	r30, 0x37	; 55
    1930:	f0 e0       	ldi	r31, 0x00	; 0
    1932:	80 81       	ld	r24, Z
    1934:	48 2f       	mov	r20, r24
    1936:	8a 81       	ldd	r24, Y+2	; 0x02
    1938:	28 2f       	mov	r18, r24
    193a:	30 e0       	ldi	r19, 0x00	; 0
    193c:	81 e0       	ldi	r24, 0x01	; 1
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	02 2e       	mov	r0, r18
    1942:	02 c0       	rjmp	.+4      	; 0x1948 <DIO_voidSetPinDirection+0xec>
    1944:	88 0f       	add	r24, r24
    1946:	99 1f       	adc	r25, r25
    1948:	0a 94       	dec	r0
    194a:	e2 f7       	brpl	.-8      	; 0x1944 <DIO_voidSetPinDirection+0xe8>
    194c:	80 95       	com	r24
    194e:	84 23       	and	r24, r20
    1950:	8c 93       	st	X, r24
    1952:	6b c0       	rjmp	.+214    	; 0x1a2a <DIO_voidSetPinDirection+0x1ce>
			else
				DDRB |= (DIO_BIT_MASK << Copy_u8PinID);
    1954:	a7 e3       	ldi	r26, 0x37	; 55
    1956:	b0 e0       	ldi	r27, 0x00	; 0
    1958:	e7 e3       	ldi	r30, 0x37	; 55
    195a:	f0 e0       	ldi	r31, 0x00	; 0
    195c:	80 81       	ld	r24, Z
    195e:	48 2f       	mov	r20, r24
    1960:	8a 81       	ldd	r24, Y+2	; 0x02
    1962:	28 2f       	mov	r18, r24
    1964:	30 e0       	ldi	r19, 0x00	; 0
    1966:	81 e0       	ldi	r24, 0x01	; 1
    1968:	90 e0       	ldi	r25, 0x00	; 0
    196a:	02 2e       	mov	r0, r18
    196c:	02 c0       	rjmp	.+4      	; 0x1972 <DIO_voidSetPinDirection+0x116>
    196e:	88 0f       	add	r24, r24
    1970:	99 1f       	adc	r25, r25
    1972:	0a 94       	dec	r0
    1974:	e2 f7       	brpl	.-8      	; 0x196e <DIO_voidSetPinDirection+0x112>
    1976:	84 2b       	or	r24, r20
    1978:	8c 93       	st	X, r24
    197a:	57 c0       	rjmp	.+174    	; 0x1a2a <DIO_voidSetPinDirection+0x1ce>
			break;
		case DIO_GROUP_C:
			if (Copy_u8PinDirection == DIO_INPUT)
    197c:	8b 81       	ldd	r24, Y+3	; 0x03
    197e:	88 23       	and	r24, r24
    1980:	a9 f4       	brne	.+42     	; 0x19ac <DIO_voidSetPinDirection+0x150>
				DDRC &= ~(DIO_BIT_MASK << Copy_u8PinID);
    1982:	a4 e3       	ldi	r26, 0x34	; 52
    1984:	b0 e0       	ldi	r27, 0x00	; 0
    1986:	e4 e3       	ldi	r30, 0x34	; 52
    1988:	f0 e0       	ldi	r31, 0x00	; 0
    198a:	80 81       	ld	r24, Z
    198c:	48 2f       	mov	r20, r24
    198e:	8a 81       	ldd	r24, Y+2	; 0x02
    1990:	28 2f       	mov	r18, r24
    1992:	30 e0       	ldi	r19, 0x00	; 0
    1994:	81 e0       	ldi	r24, 0x01	; 1
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	02 2e       	mov	r0, r18
    199a:	02 c0       	rjmp	.+4      	; 0x19a0 <DIO_voidSetPinDirection+0x144>
    199c:	88 0f       	add	r24, r24
    199e:	99 1f       	adc	r25, r25
    19a0:	0a 94       	dec	r0
    19a2:	e2 f7       	brpl	.-8      	; 0x199c <DIO_voidSetPinDirection+0x140>
    19a4:	80 95       	com	r24
    19a6:	84 23       	and	r24, r20
    19a8:	8c 93       	st	X, r24
    19aa:	3f c0       	rjmp	.+126    	; 0x1a2a <DIO_voidSetPinDirection+0x1ce>
			else
				DDRC |= (DIO_BIT_MASK << Copy_u8PinID);
    19ac:	a4 e3       	ldi	r26, 0x34	; 52
    19ae:	b0 e0       	ldi	r27, 0x00	; 0
    19b0:	e4 e3       	ldi	r30, 0x34	; 52
    19b2:	f0 e0       	ldi	r31, 0x00	; 0
    19b4:	80 81       	ld	r24, Z
    19b6:	48 2f       	mov	r20, r24
    19b8:	8a 81       	ldd	r24, Y+2	; 0x02
    19ba:	28 2f       	mov	r18, r24
    19bc:	30 e0       	ldi	r19, 0x00	; 0
    19be:	81 e0       	ldi	r24, 0x01	; 1
    19c0:	90 e0       	ldi	r25, 0x00	; 0
    19c2:	02 2e       	mov	r0, r18
    19c4:	02 c0       	rjmp	.+4      	; 0x19ca <DIO_voidSetPinDirection+0x16e>
    19c6:	88 0f       	add	r24, r24
    19c8:	99 1f       	adc	r25, r25
    19ca:	0a 94       	dec	r0
    19cc:	e2 f7       	brpl	.-8      	; 0x19c6 <DIO_voidSetPinDirection+0x16a>
    19ce:	84 2b       	or	r24, r20
    19d0:	8c 93       	st	X, r24
    19d2:	2b c0       	rjmp	.+86     	; 0x1a2a <DIO_voidSetPinDirection+0x1ce>
			break;
		case DIO_GROUP_D:
			if (Copy_u8PinDirection == DIO_INPUT)
    19d4:	8b 81       	ldd	r24, Y+3	; 0x03
    19d6:	88 23       	and	r24, r24
    19d8:	a9 f4       	brne	.+42     	; 0x1a04 <DIO_voidSetPinDirection+0x1a8>
				DDRD &= ~(DIO_BIT_MASK << Copy_u8PinID);
    19da:	a1 e3       	ldi	r26, 0x31	; 49
    19dc:	b0 e0       	ldi	r27, 0x00	; 0
    19de:	e1 e3       	ldi	r30, 0x31	; 49
    19e0:	f0 e0       	ldi	r31, 0x00	; 0
    19e2:	80 81       	ld	r24, Z
    19e4:	48 2f       	mov	r20, r24
    19e6:	8a 81       	ldd	r24, Y+2	; 0x02
    19e8:	28 2f       	mov	r18, r24
    19ea:	30 e0       	ldi	r19, 0x00	; 0
    19ec:	81 e0       	ldi	r24, 0x01	; 1
    19ee:	90 e0       	ldi	r25, 0x00	; 0
    19f0:	02 2e       	mov	r0, r18
    19f2:	02 c0       	rjmp	.+4      	; 0x19f8 <DIO_voidSetPinDirection+0x19c>
    19f4:	88 0f       	add	r24, r24
    19f6:	99 1f       	adc	r25, r25
    19f8:	0a 94       	dec	r0
    19fa:	e2 f7       	brpl	.-8      	; 0x19f4 <DIO_voidSetPinDirection+0x198>
    19fc:	80 95       	com	r24
    19fe:	84 23       	and	r24, r20
    1a00:	8c 93       	st	X, r24
    1a02:	13 c0       	rjmp	.+38     	; 0x1a2a <DIO_voidSetPinDirection+0x1ce>
			else
				DDRD |= (DIO_BIT_MASK << Copy_u8PinID);
    1a04:	a1 e3       	ldi	r26, 0x31	; 49
    1a06:	b0 e0       	ldi	r27, 0x00	; 0
    1a08:	e1 e3       	ldi	r30, 0x31	; 49
    1a0a:	f0 e0       	ldi	r31, 0x00	; 0
    1a0c:	80 81       	ld	r24, Z
    1a0e:	48 2f       	mov	r20, r24
    1a10:	8a 81       	ldd	r24, Y+2	; 0x02
    1a12:	28 2f       	mov	r18, r24
    1a14:	30 e0       	ldi	r19, 0x00	; 0
    1a16:	81 e0       	ldi	r24, 0x01	; 1
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	02 2e       	mov	r0, r18
    1a1c:	02 c0       	rjmp	.+4      	; 0x1a22 <DIO_voidSetPinDirection+0x1c6>
    1a1e:	88 0f       	add	r24, r24
    1a20:	99 1f       	adc	r25, r25
    1a22:	0a 94       	dec	r0
    1a24:	e2 f7       	brpl	.-8      	; 0x1a1e <DIO_voidSetPinDirection+0x1c2>
    1a26:	84 2b       	or	r24, r20
    1a28:	8c 93       	st	X, r24
			break;
		default:
			break;
		}
		}
}
    1a2a:	0f 90       	pop	r0
    1a2c:	0f 90       	pop	r0
    1a2e:	0f 90       	pop	r0
    1a30:	0f 90       	pop	r0
    1a32:	0f 90       	pop	r0
    1a34:	cf 91       	pop	r28
    1a36:	df 91       	pop	r29
    1a38:	08 95       	ret

00001a3a <DIO_u8GetPinValue>:
u8 DIO_u8GetPinValue(u8 Copy_u8GroupID, u8 CopyPinID) {
    1a3a:	df 93       	push	r29
    1a3c:	cf 93       	push	r28
    1a3e:	00 d0       	rcall	.+0      	; 0x1a40 <DIO_u8GetPinValue+0x6>
    1a40:	00 d0       	rcall	.+0      	; 0x1a42 <DIO_u8GetPinValue+0x8>
    1a42:	0f 92       	push	r0
    1a44:	cd b7       	in	r28, 0x3d	; 61
    1a46:	de b7       	in	r29, 0x3e	; 62
    1a48:	8a 83       	std	Y+2, r24	; 0x02
    1a4a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Value = 0xff;
    1a4c:	8f ef       	ldi	r24, 0xFF	; 255
    1a4e:	89 83       	std	Y+1, r24	; 0x01
	if (CopyPinID <= DIO_PIN_7 && Copy_u8GroupID <= DIO_GROUP_D) {
    1a50:	8b 81       	ldd	r24, Y+3	; 0x03
    1a52:	88 30       	cpi	r24, 0x08	; 8
    1a54:	08 f0       	brcs	.+2      	; 0x1a58 <DIO_u8GetPinValue+0x1e>
    1a56:	6b c0       	rjmp	.+214    	; 0x1b2e <DIO_u8GetPinValue+0xf4>
    1a58:	8a 81       	ldd	r24, Y+2	; 0x02
    1a5a:	84 30       	cpi	r24, 0x04	; 4
    1a5c:	08 f0       	brcs	.+2      	; 0x1a60 <DIO_u8GetPinValue+0x26>
    1a5e:	67 c0       	rjmp	.+206    	; 0x1b2e <DIO_u8GetPinValue+0xf4>
		switch (Copy_u8GroupID) {
    1a60:	8a 81       	ldd	r24, Y+2	; 0x02
    1a62:	28 2f       	mov	r18, r24
    1a64:	30 e0       	ldi	r19, 0x00	; 0
    1a66:	3d 83       	std	Y+5, r19	; 0x05
    1a68:	2c 83       	std	Y+4, r18	; 0x04
    1a6a:	4c 81       	ldd	r20, Y+4	; 0x04
    1a6c:	5d 81       	ldd	r21, Y+5	; 0x05
    1a6e:	41 30       	cpi	r20, 0x01	; 1
    1a70:	51 05       	cpc	r21, r1
    1a72:	41 f1       	breq	.+80     	; 0x1ac4 <DIO_u8GetPinValue+0x8a>
    1a74:	8c 81       	ldd	r24, Y+4	; 0x04
    1a76:	9d 81       	ldd	r25, Y+5	; 0x05
    1a78:	82 30       	cpi	r24, 0x02	; 2
    1a7a:	91 05       	cpc	r25, r1
    1a7c:	34 f4       	brge	.+12     	; 0x1a8a <DIO_u8GetPinValue+0x50>
    1a7e:	2c 81       	ldd	r18, Y+4	; 0x04
    1a80:	3d 81       	ldd	r19, Y+5	; 0x05
    1a82:	21 15       	cp	r18, r1
    1a84:	31 05       	cpc	r19, r1
    1a86:	61 f0       	breq	.+24     	; 0x1aa0 <DIO_u8GetPinValue+0x66>
    1a88:	52 c0       	rjmp	.+164    	; 0x1b2e <DIO_u8GetPinValue+0xf4>
    1a8a:	4c 81       	ldd	r20, Y+4	; 0x04
    1a8c:	5d 81       	ldd	r21, Y+5	; 0x05
    1a8e:	42 30       	cpi	r20, 0x02	; 2
    1a90:	51 05       	cpc	r21, r1
    1a92:	51 f1       	breq	.+84     	; 0x1ae8 <DIO_u8GetPinValue+0xae>
    1a94:	8c 81       	ldd	r24, Y+4	; 0x04
    1a96:	9d 81       	ldd	r25, Y+5	; 0x05
    1a98:	83 30       	cpi	r24, 0x03	; 3
    1a9a:	91 05       	cpc	r25, r1
    1a9c:	b9 f1       	breq	.+110    	; 0x1b0c <DIO_u8GetPinValue+0xd2>
    1a9e:	47 c0       	rjmp	.+142    	; 0x1b2e <DIO_u8GetPinValue+0xf4>
		case DIO_GROUP_A:
			Local_u8Value = ((PINA >> CopyPinID) & DIO_BIT_MASK);
    1aa0:	e9 e3       	ldi	r30, 0x39	; 57
    1aa2:	f0 e0       	ldi	r31, 0x00	; 0
    1aa4:	80 81       	ld	r24, Z
    1aa6:	28 2f       	mov	r18, r24
    1aa8:	30 e0       	ldi	r19, 0x00	; 0
    1aaa:	8b 81       	ldd	r24, Y+3	; 0x03
    1aac:	88 2f       	mov	r24, r24
    1aae:	90 e0       	ldi	r25, 0x00	; 0
    1ab0:	a9 01       	movw	r20, r18
    1ab2:	02 c0       	rjmp	.+4      	; 0x1ab8 <DIO_u8GetPinValue+0x7e>
    1ab4:	55 95       	asr	r21
    1ab6:	47 95       	ror	r20
    1ab8:	8a 95       	dec	r24
    1aba:	e2 f7       	brpl	.-8      	; 0x1ab4 <DIO_u8GetPinValue+0x7a>
    1abc:	ca 01       	movw	r24, r20
    1abe:	81 70       	andi	r24, 0x01	; 1
    1ac0:	89 83       	std	Y+1, r24	; 0x01
    1ac2:	35 c0       	rjmp	.+106    	; 0x1b2e <DIO_u8GetPinValue+0xf4>
			break;
		case DIO_GROUP_B:
			Local_u8Value = ((PINB >> CopyPinID) & DIO_BIT_MASK);
    1ac4:	e6 e3       	ldi	r30, 0x36	; 54
    1ac6:	f0 e0       	ldi	r31, 0x00	; 0
    1ac8:	80 81       	ld	r24, Z
    1aca:	28 2f       	mov	r18, r24
    1acc:	30 e0       	ldi	r19, 0x00	; 0
    1ace:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad0:	88 2f       	mov	r24, r24
    1ad2:	90 e0       	ldi	r25, 0x00	; 0
    1ad4:	a9 01       	movw	r20, r18
    1ad6:	02 c0       	rjmp	.+4      	; 0x1adc <DIO_u8GetPinValue+0xa2>
    1ad8:	55 95       	asr	r21
    1ada:	47 95       	ror	r20
    1adc:	8a 95       	dec	r24
    1ade:	e2 f7       	brpl	.-8      	; 0x1ad8 <DIO_u8GetPinValue+0x9e>
    1ae0:	ca 01       	movw	r24, r20
    1ae2:	81 70       	andi	r24, 0x01	; 1
    1ae4:	89 83       	std	Y+1, r24	; 0x01
    1ae6:	23 c0       	rjmp	.+70     	; 0x1b2e <DIO_u8GetPinValue+0xf4>
			break;
		case DIO_GROUP_C:
			Local_u8Value = ((PINC >> CopyPinID) & DIO_BIT_MASK);
    1ae8:	e3 e3       	ldi	r30, 0x33	; 51
    1aea:	f0 e0       	ldi	r31, 0x00	; 0
    1aec:	80 81       	ld	r24, Z
    1aee:	28 2f       	mov	r18, r24
    1af0:	30 e0       	ldi	r19, 0x00	; 0
    1af2:	8b 81       	ldd	r24, Y+3	; 0x03
    1af4:	88 2f       	mov	r24, r24
    1af6:	90 e0       	ldi	r25, 0x00	; 0
    1af8:	a9 01       	movw	r20, r18
    1afa:	02 c0       	rjmp	.+4      	; 0x1b00 <DIO_u8GetPinValue+0xc6>
    1afc:	55 95       	asr	r21
    1afe:	47 95       	ror	r20
    1b00:	8a 95       	dec	r24
    1b02:	e2 f7       	brpl	.-8      	; 0x1afc <DIO_u8GetPinValue+0xc2>
    1b04:	ca 01       	movw	r24, r20
    1b06:	81 70       	andi	r24, 0x01	; 1
    1b08:	89 83       	std	Y+1, r24	; 0x01
    1b0a:	11 c0       	rjmp	.+34     	; 0x1b2e <DIO_u8GetPinValue+0xf4>
			break;
		case DIO_GROUP_D:
			Local_u8Value = ((PIND >> CopyPinID) & DIO_BIT_MASK);
    1b0c:	e0 e3       	ldi	r30, 0x30	; 48
    1b0e:	f0 e0       	ldi	r31, 0x00	; 0
    1b10:	80 81       	ld	r24, Z
    1b12:	28 2f       	mov	r18, r24
    1b14:	30 e0       	ldi	r19, 0x00	; 0
    1b16:	8b 81       	ldd	r24, Y+3	; 0x03
    1b18:	88 2f       	mov	r24, r24
    1b1a:	90 e0       	ldi	r25, 0x00	; 0
    1b1c:	a9 01       	movw	r20, r18
    1b1e:	02 c0       	rjmp	.+4      	; 0x1b24 <DIO_u8GetPinValue+0xea>
    1b20:	55 95       	asr	r21
    1b22:	47 95       	ror	r20
    1b24:	8a 95       	dec	r24
    1b26:	e2 f7       	brpl	.-8      	; 0x1b20 <DIO_u8GetPinValue+0xe6>
    1b28:	ca 01       	movw	r24, r20
    1b2a:	81 70       	andi	r24, 0x01	; 1
    1b2c:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return Local_u8Value;
    1b2e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b30:	0f 90       	pop	r0
    1b32:	0f 90       	pop	r0
    1b34:	0f 90       	pop	r0
    1b36:	0f 90       	pop	r0
    1b38:	0f 90       	pop	r0
    1b3a:	cf 91       	pop	r28
    1b3c:	df 91       	pop	r29
    1b3e:	08 95       	ret

00001b40 <DIO_voidTogelPinValue>:
void DIO_voidTogelPinValue(u8 Copy_u8GroupID, u8 Copy_u8PinID) {
    1b40:	df 93       	push	r29
    1b42:	cf 93       	push	r28
    1b44:	00 d0       	rcall	.+0      	; 0x1b46 <DIO_voidTogelPinValue+0x6>
    1b46:	00 d0       	rcall	.+0      	; 0x1b48 <DIO_voidTogelPinValue+0x8>
    1b48:	cd b7       	in	r28, 0x3d	; 61
    1b4a:	de b7       	in	r29, 0x3e	; 62
    1b4c:	89 83       	std	Y+1, r24	; 0x01
    1b4e:	6a 83       	std	Y+2, r22	; 0x02
	if (Copy_u8PinID <= DIO_PIN_7 && Copy_u8GroupID <= DIO_GROUP_D) {
    1b50:	8a 81       	ldd	r24, Y+2	; 0x02
    1b52:	88 30       	cpi	r24, 0x08	; 8
    1b54:	08 f0       	brcs	.+2      	; 0x1b58 <DIO_voidTogelPinValue+0x18>
    1b56:	72 c0       	rjmp	.+228    	; 0x1c3c <DIO_voidTogelPinValue+0xfc>
    1b58:	89 81       	ldd	r24, Y+1	; 0x01
    1b5a:	84 30       	cpi	r24, 0x04	; 4
    1b5c:	08 f0       	brcs	.+2      	; 0x1b60 <DIO_voidTogelPinValue+0x20>
    1b5e:	6e c0       	rjmp	.+220    	; 0x1c3c <DIO_voidTogelPinValue+0xfc>
		switch (Copy_u8GroupID)
    1b60:	89 81       	ldd	r24, Y+1	; 0x01
    1b62:	28 2f       	mov	r18, r24
    1b64:	30 e0       	ldi	r19, 0x00	; 0
    1b66:	3c 83       	std	Y+4, r19	; 0x04
    1b68:	2b 83       	std	Y+3, r18	; 0x03
    1b6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b6c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b6e:	81 30       	cpi	r24, 0x01	; 1
    1b70:	91 05       	cpc	r25, r1
    1b72:	49 f1       	breq	.+82     	; 0x1bc6 <DIO_voidTogelPinValue+0x86>
    1b74:	2b 81       	ldd	r18, Y+3	; 0x03
    1b76:	3c 81       	ldd	r19, Y+4	; 0x04
    1b78:	22 30       	cpi	r18, 0x02	; 2
    1b7a:	31 05       	cpc	r19, r1
    1b7c:	2c f4       	brge	.+10     	; 0x1b88 <DIO_voidTogelPinValue+0x48>
    1b7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b80:	9c 81       	ldd	r25, Y+4	; 0x04
    1b82:	00 97       	sbiw	r24, 0x00	; 0
    1b84:	61 f0       	breq	.+24     	; 0x1b9e <DIO_voidTogelPinValue+0x5e>
    1b86:	5a c0       	rjmp	.+180    	; 0x1c3c <DIO_voidTogelPinValue+0xfc>
    1b88:	2b 81       	ldd	r18, Y+3	; 0x03
    1b8a:	3c 81       	ldd	r19, Y+4	; 0x04
    1b8c:	22 30       	cpi	r18, 0x02	; 2
    1b8e:	31 05       	cpc	r19, r1
    1b90:	71 f1       	breq	.+92     	; 0x1bee <DIO_voidTogelPinValue+0xae>
    1b92:	8b 81       	ldd	r24, Y+3	; 0x03
    1b94:	9c 81       	ldd	r25, Y+4	; 0x04
    1b96:	83 30       	cpi	r24, 0x03	; 3
    1b98:	91 05       	cpc	r25, r1
    1b9a:	e9 f1       	breq	.+122    	; 0x1c16 <DIO_voidTogelPinValue+0xd6>
    1b9c:	4f c0       	rjmp	.+158    	; 0x1c3c <DIO_voidTogelPinValue+0xfc>
		{
		case DIO_GROUP_A:
			PORTA ^= (DIO_BIT_MASK << Copy_u8PinID);
    1b9e:	ab e3       	ldi	r26, 0x3B	; 59
    1ba0:	b0 e0       	ldi	r27, 0x00	; 0
    1ba2:	eb e3       	ldi	r30, 0x3B	; 59
    1ba4:	f0 e0       	ldi	r31, 0x00	; 0
    1ba6:	80 81       	ld	r24, Z
    1ba8:	48 2f       	mov	r20, r24
    1baa:	8a 81       	ldd	r24, Y+2	; 0x02
    1bac:	28 2f       	mov	r18, r24
    1bae:	30 e0       	ldi	r19, 0x00	; 0
    1bb0:	81 e0       	ldi	r24, 0x01	; 1
    1bb2:	90 e0       	ldi	r25, 0x00	; 0
    1bb4:	02 2e       	mov	r0, r18
    1bb6:	02 c0       	rjmp	.+4      	; 0x1bbc <DIO_voidTogelPinValue+0x7c>
    1bb8:	88 0f       	add	r24, r24
    1bba:	99 1f       	adc	r25, r25
    1bbc:	0a 94       	dec	r0
    1bbe:	e2 f7       	brpl	.-8      	; 0x1bb8 <DIO_voidTogelPinValue+0x78>
    1bc0:	84 27       	eor	r24, r20
    1bc2:	8c 93       	st	X, r24
    1bc4:	3b c0       	rjmp	.+118    	; 0x1c3c <DIO_voidTogelPinValue+0xfc>
			break;
		case DIO_GROUP_B:
			PORTB ^= (DIO_BIT_MASK << Copy_u8PinID);
    1bc6:	a8 e3       	ldi	r26, 0x38	; 56
    1bc8:	b0 e0       	ldi	r27, 0x00	; 0
    1bca:	e8 e3       	ldi	r30, 0x38	; 56
    1bcc:	f0 e0       	ldi	r31, 0x00	; 0
    1bce:	80 81       	ld	r24, Z
    1bd0:	48 2f       	mov	r20, r24
    1bd2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd4:	28 2f       	mov	r18, r24
    1bd6:	30 e0       	ldi	r19, 0x00	; 0
    1bd8:	81 e0       	ldi	r24, 0x01	; 1
    1bda:	90 e0       	ldi	r25, 0x00	; 0
    1bdc:	02 2e       	mov	r0, r18
    1bde:	02 c0       	rjmp	.+4      	; 0x1be4 <DIO_voidTogelPinValue+0xa4>
    1be0:	88 0f       	add	r24, r24
    1be2:	99 1f       	adc	r25, r25
    1be4:	0a 94       	dec	r0
    1be6:	e2 f7       	brpl	.-8      	; 0x1be0 <DIO_voidTogelPinValue+0xa0>
    1be8:	84 27       	eor	r24, r20
    1bea:	8c 93       	st	X, r24
    1bec:	27 c0       	rjmp	.+78     	; 0x1c3c <DIO_voidTogelPinValue+0xfc>
			break;
		case DIO_GROUP_C:
			PORTC ^= (DIO_BIT_MASK << Copy_u8PinID);
    1bee:	a5 e3       	ldi	r26, 0x35	; 53
    1bf0:	b0 e0       	ldi	r27, 0x00	; 0
    1bf2:	e5 e3       	ldi	r30, 0x35	; 53
    1bf4:	f0 e0       	ldi	r31, 0x00	; 0
    1bf6:	80 81       	ld	r24, Z
    1bf8:	48 2f       	mov	r20, r24
    1bfa:	8a 81       	ldd	r24, Y+2	; 0x02
    1bfc:	28 2f       	mov	r18, r24
    1bfe:	30 e0       	ldi	r19, 0x00	; 0
    1c00:	81 e0       	ldi	r24, 0x01	; 1
    1c02:	90 e0       	ldi	r25, 0x00	; 0
    1c04:	02 2e       	mov	r0, r18
    1c06:	02 c0       	rjmp	.+4      	; 0x1c0c <DIO_voidTogelPinValue+0xcc>
    1c08:	88 0f       	add	r24, r24
    1c0a:	99 1f       	adc	r25, r25
    1c0c:	0a 94       	dec	r0
    1c0e:	e2 f7       	brpl	.-8      	; 0x1c08 <DIO_voidTogelPinValue+0xc8>
    1c10:	84 27       	eor	r24, r20
    1c12:	8c 93       	st	X, r24
    1c14:	13 c0       	rjmp	.+38     	; 0x1c3c <DIO_voidTogelPinValue+0xfc>
			break;
		case DIO_GROUP_D:
			PORTD ^= (DIO_BIT_MASK << Copy_u8PinID);
    1c16:	a2 e3       	ldi	r26, 0x32	; 50
    1c18:	b0 e0       	ldi	r27, 0x00	; 0
    1c1a:	e2 e3       	ldi	r30, 0x32	; 50
    1c1c:	f0 e0       	ldi	r31, 0x00	; 0
    1c1e:	80 81       	ld	r24, Z
    1c20:	48 2f       	mov	r20, r24
    1c22:	8a 81       	ldd	r24, Y+2	; 0x02
    1c24:	28 2f       	mov	r18, r24
    1c26:	30 e0       	ldi	r19, 0x00	; 0
    1c28:	81 e0       	ldi	r24, 0x01	; 1
    1c2a:	90 e0       	ldi	r25, 0x00	; 0
    1c2c:	02 2e       	mov	r0, r18
    1c2e:	02 c0       	rjmp	.+4      	; 0x1c34 <DIO_voidTogelPinValue+0xf4>
    1c30:	88 0f       	add	r24, r24
    1c32:	99 1f       	adc	r25, r25
    1c34:	0a 94       	dec	r0
    1c36:	e2 f7       	brpl	.-8      	; 0x1c30 <DIO_voidTogelPinValue+0xf0>
    1c38:	84 27       	eor	r24, r20
    1c3a:	8c 93       	st	X, r24
			break;
		}
	}
}
    1c3c:	0f 90       	pop	r0
    1c3e:	0f 90       	pop	r0
    1c40:	0f 90       	pop	r0
    1c42:	0f 90       	pop	r0
    1c44:	cf 91       	pop	r28
    1c46:	df 91       	pop	r29
    1c48:	08 95       	ret

00001c4a <DIO_voidWriteNum>:
void DIO_voidWriteNum(u8 num) {
    1c4a:	df 93       	push	r29
    1c4c:	cf 93       	push	r28
    1c4e:	0f 92       	push	r0
    1c50:	cd b7       	in	r28, 0x3d	; 61
    1c52:	de b7       	in	r29, 0x3e	; 62
    1c54:	89 83       	std	Y+1, r24	; 0x01
	DIO_voidSetPinValue(DIO_GROUP_A, DIO_PIN_4, DIO_LOW);
    1c56:	80 e0       	ldi	r24, 0x00	; 0
    1c58:	64 e0       	ldi	r22, 0x04	; 4
    1c5a:	40 e0       	ldi	r20, 0x00	; 0
    1c5c:	0e 94 3f 0b 	call	0x167e	; 0x167e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_GROUP_A, DIO_PIN_5, DIO_LOW);
    1c60:	80 e0       	ldi	r24, 0x00	; 0
    1c62:	65 e0       	ldi	r22, 0x05	; 5
    1c64:	40 e0       	ldi	r20, 0x00	; 0
    1c66:	0e 94 3f 0b 	call	0x167e	; 0x167e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_GROUP_A, DIO_PIN_6, DIO_LOW);
    1c6a:	80 e0       	ldi	r24, 0x00	; 0
    1c6c:	66 e0       	ldi	r22, 0x06	; 6
    1c6e:	40 e0       	ldi	r20, 0x00	; 0
    1c70:	0e 94 3f 0b 	call	0x167e	; 0x167e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_GROUP_A, DIO_PIN_7, DIO_LOW);
    1c74:	80 e0       	ldi	r24, 0x00	; 0
    1c76:	67 e0       	ldi	r22, 0x07	; 7
    1c78:	40 e0       	ldi	r20, 0x00	; 0
    1c7a:	0e 94 3f 0b 	call	0x167e	; 0x167e <DIO_voidSetPinValue>

}
    1c7e:	0f 90       	pop	r0
    1c80:	cf 91       	pop	r28
    1c82:	df 91       	pop	r29
    1c84:	08 95       	ret

00001c86 <KEYPAD_voidInit>:
/*
 * Description :
 * Initialize the Keypad Driver (it's pins and ports)
 */ 
void KEYPAD_voidInit(void)
{
    1c86:	df 93       	push	r29
    1c88:	cf 93       	push	r28
    1c8a:	cd b7       	in	r28, 0x3d	; 61
    1c8c:	de b7       	in	r29, 0x3e	; 62
    /* Set the Raw port as input with the first 4 pins as input and the rest as pull-up */
    //GPIO_setupPortDirection(KEYPAD_ROW_PORT, PORT_INPUT);
	DIO_voidSetPinDirection(DIO_GROUP_C,DIO_PIN_0,DIO_INPUT);
    1c8e:	82 e0       	ldi	r24, 0x02	; 2
    1c90:	60 e0       	ldi	r22, 0x00	; 0
    1c92:	40 e0       	ldi	r20, 0x00	; 0
    1c94:	0e 94 2e 0c 	call	0x185c	; 0x185c <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_GROUP_C,DIO_PIN_1,DIO_INPUT);
    1c98:	82 e0       	ldi	r24, 0x02	; 2
    1c9a:	61 e0       	ldi	r22, 0x01	; 1
    1c9c:	40 e0       	ldi	r20, 0x00	; 0
    1c9e:	0e 94 2e 0c 	call	0x185c	; 0x185c <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_GROUP_C,DIO_PIN_2,DIO_INPUT);
    1ca2:	82 e0       	ldi	r24, 0x02	; 2
    1ca4:	62 e0       	ldi	r22, 0x02	; 2
    1ca6:	40 e0       	ldi	r20, 0x00	; 0
    1ca8:	0e 94 2e 0c 	call	0x185c	; 0x185c <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_GROUP_C,DIO_PIN_3,DIO_INPUT);
    1cac:	82 e0       	ldi	r24, 0x02	; 2
    1cae:	63 e0       	ldi	r22, 0x03	; 3
    1cb0:	40 e0       	ldi	r20, 0x00	; 0
    1cb2:	0e 94 2e 0c 	call	0x185c	; 0x185c <DIO_voidSetPinDirection>

    GPIO_writePort(KEYPAD_ROW_PORT, 0x0F);
    1cb6:	82 e0       	ldi	r24, 0x02	; 2
    1cb8:	6f e0       	ldi	r22, 0x0F	; 15
    1cba:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <GPIO_writePort>

    /* Set the COL port as output with the first 4 pins as output and the rest as logic high */
	DIO_voidSetPinDirection(DIO_GROUP_D, DIO_PIN_0, DIO_OUTPUT);
    1cbe:	83 e0       	ldi	r24, 0x03	; 3
    1cc0:	60 e0       	ldi	r22, 0x00	; 0
    1cc2:	41 e0       	ldi	r20, 0x01	; 1
    1cc4:	0e 94 2e 0c 	call	0x185c	; 0x185c <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_GROUP_D, DIO_PIN_1, DIO_OUTPUT);
    1cc8:	83 e0       	ldi	r24, 0x03	; 3
    1cca:	61 e0       	ldi	r22, 0x01	; 1
    1ccc:	41 e0       	ldi	r20, 0x01	; 1
    1cce:	0e 94 2e 0c 	call	0x185c	; 0x185c <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_GROUP_D, DIO_PIN_2, DIO_OUTPUT);
    1cd2:	83 e0       	ldi	r24, 0x03	; 3
    1cd4:	62 e0       	ldi	r22, 0x02	; 2
    1cd6:	41 e0       	ldi	r20, 0x01	; 1
    1cd8:	0e 94 2e 0c 	call	0x185c	; 0x185c <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_GROUP_D, DIO_PIN_3, DIO_OUTPUT);
    1cdc:	83 e0       	ldi	r24, 0x03	; 3
    1cde:	63 e0       	ldi	r22, 0x03	; 3
    1ce0:	41 e0       	ldi	r20, 0x01	; 1
    1ce2:	0e 94 2e 0c 	call	0x185c	; 0x185c <DIO_voidSetPinDirection>
    GPIO_writePort(KEYPAD_COL_PORT, 0x0F);
    1ce6:	83 e0       	ldi	r24, 0x03	; 3
    1ce8:	6f e0       	ldi	r22, 0x0F	; 15
    1cea:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <GPIO_writePort>
	DIO_voidSetPinDirection(DIO_GROUP_D, DIO_PIN_3, DIO_INPUT);
	DIO_voidSetPinValue(DIO_GROUP_D,DIO_PIN_6,DIO_LOW);
	DIO_voidSetPinValue(DIO_GROUP_D,DIO_PIN_7,DIO_LOW);*/


}
    1cee:	cf 91       	pop	r28
    1cf0:	df 91       	pop	r29
    1cf2:	08 95       	ret

00001cf4 <KEYPAD_u8GetPressedKey>:
/*
 * Description :
 * Get the Keypad pressed button
 */
u8 KEYPAD_u8GetPressedKey(void)
{
    1cf4:	df 93       	push	r29
    1cf6:	cf 93       	push	r28
    1cf8:	cd b7       	in	r28, 0x3d	; 61
    1cfa:	de b7       	in	r29, 0x3e	; 62
    1cfc:	af 97       	sbiw	r28, 0x2f	; 47
    1cfe:	0f b6       	in	r0, 0x3f	; 63
    1d00:	f8 94       	cli
    1d02:	de bf       	out	0x3e, r29	; 62
    1d04:	0f be       	out	0x3f, r0	; 63
    1d06:	cd bf       	out	0x3d, r28	; 61
	/*Define the row and col variables that will check which button pressed*/
	u8 u8RowLocal=0,u8ColLocal=0;
    1d08:	19 8a       	std	Y+17, r1	; 0x11
    1d0a:	18 8a       	std	Y+16, r1	; 0x10
	/*Define the row and col arrays that will include the keypad pins */
	u8 KPD_u8RwoPinArr[KEYPAD_NUM_ROWS] = {KEYPAD_R0_PIN,KEYPAD_R1_PIN,KEYPAD_R2_PIN,KEYPAD_R3_PIN};
    1d0c:	1a 8a       	std	Y+18, r1	; 0x12
    1d0e:	81 e0       	ldi	r24, 0x01	; 1
    1d10:	8b 8b       	std	Y+19, r24	; 0x13
    1d12:	82 e0       	ldi	r24, 0x02	; 2
    1d14:	8c 8b       	std	Y+20, r24	; 0x14
    1d16:	83 e0       	ldi	r24, 0x03	; 3
    1d18:	8d 8b       	std	Y+21, r24	; 0x15
	u8 KPD_u8ColPinArr[KEYPAD_NUM_COLS] = {KEYPAD_C0_PIN,KEYPAD_C1_PIN,KEYPAD_C2_PIN,KEYPAD_C3_PIN};
    1d1a:	1e 8a       	std	Y+22, r1	; 0x16
    1d1c:	81 e0       	ldi	r24, 0x01	; 1
    1d1e:	8f 8b       	std	Y+23, r24	; 0x17
    1d20:	82 e0       	ldi	r24, 0x02	; 2
    1d22:	88 8f       	std	Y+24, r24	; 0x18
    1d24:	83 e0       	ldi	r24, 0x03	; 3
    1d26:	89 8f       	std	Y+25, r24	; 0x19
	for(u8ColLocal=0;u8ColLocal<KEYPAD_NUM_COLS;u8ColLocal++)
    1d28:	18 8a       	std	Y+16, r1	; 0x10
    1d2a:	f7 c0       	rjmp	.+494    	; 0x1f1a <KEYPAD_u8GetPressedKey+0x226>
	{
		/*To activate one column at a time -> col_pin =0*/
		GPIO_writePin(KEYPAD_COL_PORT,KPD_u8ColPinArr[u8ColLocal],LOGIC_LOW);
    1d2c:	88 89       	ldd	r24, Y+16	; 0x10
    1d2e:	28 2f       	mov	r18, r24
    1d30:	30 e0       	ldi	r19, 0x00	; 0
    1d32:	ce 01       	movw	r24, r28
    1d34:	46 96       	adiw	r24, 0x16	; 22
    1d36:	fc 01       	movw	r30, r24
    1d38:	e2 0f       	add	r30, r18
    1d3a:	f3 1f       	adc	r31, r19
    1d3c:	90 81       	ld	r25, Z
    1d3e:	83 e0       	ldi	r24, 0x03	; 3
    1d40:	69 2f       	mov	r22, r25
    1d42:	40 e0       	ldi	r20, 0x00	; 0
    1d44:	0e 94 26 07 	call	0xe4c	; 0xe4c <GPIO_writePin>
		for(u8RowLocal=0;u8RowLocal<KEYPAD_NUM_ROWS;u8RowLocal++)
    1d48:	19 8a       	std	Y+17, r1	; 0x11
    1d4a:	d2 c0       	rjmp	.+420    	; 0x1ef0 <KEYPAD_u8GetPressedKey+0x1fc>
		{
			u8 u8Value=GPIO_readPin(KEYPAD_ROW_PORT,KPD_u8RwoPinArr[u8RowLocal]);
    1d4c:	89 89       	ldd	r24, Y+17	; 0x11
    1d4e:	28 2f       	mov	r18, r24
    1d50:	30 e0       	ldi	r19, 0x00	; 0
    1d52:	ce 01       	movw	r24, r28
    1d54:	42 96       	adiw	r24, 0x12	; 18
    1d56:	fc 01       	movw	r30, r24
    1d58:	e2 0f       	add	r30, r18
    1d5a:	f3 1f       	adc	r31, r19
    1d5c:	90 81       	ld	r25, Z
    1d5e:	82 e0       	ldi	r24, 0x02	; 2
    1d60:	69 2f       	mov	r22, r25
    1d62:	0e 94 11 08 	call	0x1022	; 0x1022 <GPIO_readPin>
    1d66:	8f 87       	std	Y+15, r24	; 0x0f
			if (u8Value == KEYPAD_BUTTON_PRESSED)
    1d68:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d6a:	88 23       	and	r24, r24
    1d6c:	09 f0       	breq	.+2      	; 0x1d70 <KEYPAD_u8GetPressedKey+0x7c>
    1d6e:	bd c0       	rjmp	.+378    	; 0x1eea <KEYPAD_u8GetPressedKey+0x1f6>
    1d70:	80 e0       	ldi	r24, 0x00	; 0
    1d72:	90 e0       	ldi	r25, 0x00	; 0
    1d74:	a0 ef       	ldi	r26, 0xF0	; 240
    1d76:	b1 e4       	ldi	r27, 0x41	; 65
    1d78:	8b 87       	std	Y+11, r24	; 0x0b
    1d7a:	9c 87       	std	Y+12, r25	; 0x0c
    1d7c:	ad 87       	std	Y+13, r26	; 0x0d
    1d7e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d80:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d82:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d84:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d86:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d88:	20 e0       	ldi	r18, 0x00	; 0
    1d8a:	30 e0       	ldi	r19, 0x00	; 0
    1d8c:	4a ef       	ldi	r20, 0xFA	; 250
    1d8e:	54 e4       	ldi	r21, 0x44	; 68
    1d90:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d94:	dc 01       	movw	r26, r24
    1d96:	cb 01       	movw	r24, r22
    1d98:	8f 83       	std	Y+7, r24	; 0x07
    1d9a:	98 87       	std	Y+8, r25	; 0x08
    1d9c:	a9 87       	std	Y+9, r26	; 0x09
    1d9e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1da0:	6f 81       	ldd	r22, Y+7	; 0x07
    1da2:	78 85       	ldd	r23, Y+8	; 0x08
    1da4:	89 85       	ldd	r24, Y+9	; 0x09
    1da6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1da8:	20 e0       	ldi	r18, 0x00	; 0
    1daa:	30 e0       	ldi	r19, 0x00	; 0
    1dac:	40 e8       	ldi	r20, 0x80	; 128
    1dae:	5f e3       	ldi	r21, 0x3F	; 63
    1db0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1db4:	88 23       	and	r24, r24
    1db6:	2c f4       	brge	.+10     	; 0x1dc2 <KEYPAD_u8GetPressedKey+0xce>
		__ticks = 1;
    1db8:	81 e0       	ldi	r24, 0x01	; 1
    1dba:	90 e0       	ldi	r25, 0x00	; 0
    1dbc:	9e 83       	std	Y+6, r25	; 0x06
    1dbe:	8d 83       	std	Y+5, r24	; 0x05
    1dc0:	3f c0       	rjmp	.+126    	; 0x1e40 <KEYPAD_u8GetPressedKey+0x14c>
	else if (__tmp > 65535)
    1dc2:	6f 81       	ldd	r22, Y+7	; 0x07
    1dc4:	78 85       	ldd	r23, Y+8	; 0x08
    1dc6:	89 85       	ldd	r24, Y+9	; 0x09
    1dc8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dca:	20 e0       	ldi	r18, 0x00	; 0
    1dcc:	3f ef       	ldi	r19, 0xFF	; 255
    1dce:	4f e7       	ldi	r20, 0x7F	; 127
    1dd0:	57 e4       	ldi	r21, 0x47	; 71
    1dd2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1dd6:	18 16       	cp	r1, r24
    1dd8:	4c f5       	brge	.+82     	; 0x1e2c <KEYPAD_u8GetPressedKey+0x138>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dda:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ddc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dde:	8d 85       	ldd	r24, Y+13	; 0x0d
    1de0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1de2:	20 e0       	ldi	r18, 0x00	; 0
    1de4:	30 e0       	ldi	r19, 0x00	; 0
    1de6:	40 e2       	ldi	r20, 0x20	; 32
    1de8:	51 e4       	ldi	r21, 0x41	; 65
    1dea:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dee:	dc 01       	movw	r26, r24
    1df0:	cb 01       	movw	r24, r22
    1df2:	bc 01       	movw	r22, r24
    1df4:	cd 01       	movw	r24, r26
    1df6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1dfa:	dc 01       	movw	r26, r24
    1dfc:	cb 01       	movw	r24, r22
    1dfe:	9e 83       	std	Y+6, r25	; 0x06
    1e00:	8d 83       	std	Y+5, r24	; 0x05
    1e02:	0f c0       	rjmp	.+30     	; 0x1e22 <KEYPAD_u8GetPressedKey+0x12e>
    1e04:	88 ec       	ldi	r24, 0xC8	; 200
    1e06:	90 e0       	ldi	r25, 0x00	; 0
    1e08:	9c 83       	std	Y+4, r25	; 0x04
    1e0a:	8b 83       	std	Y+3, r24	; 0x03
    1e0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e0e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e10:	01 97       	sbiw	r24, 0x01	; 1
    1e12:	f1 f7       	brne	.-4      	; 0x1e10 <KEYPAD_u8GetPressedKey+0x11c>
    1e14:	9c 83       	std	Y+4, r25	; 0x04
    1e16:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e18:	8d 81       	ldd	r24, Y+5	; 0x05
    1e1a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e1c:	01 97       	sbiw	r24, 0x01	; 1
    1e1e:	9e 83       	std	Y+6, r25	; 0x06
    1e20:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e22:	8d 81       	ldd	r24, Y+5	; 0x05
    1e24:	9e 81       	ldd	r25, Y+6	; 0x06
    1e26:	00 97       	sbiw	r24, 0x00	; 0
    1e28:	69 f7       	brne	.-38     	; 0x1e04 <KEYPAD_u8GetPressedKey+0x110>
    1e2a:	14 c0       	rjmp	.+40     	; 0x1e54 <KEYPAD_u8GetPressedKey+0x160>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e2c:	6f 81       	ldd	r22, Y+7	; 0x07
    1e2e:	78 85       	ldd	r23, Y+8	; 0x08
    1e30:	89 85       	ldd	r24, Y+9	; 0x09
    1e32:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e34:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e38:	dc 01       	movw	r26, r24
    1e3a:	cb 01       	movw	r24, r22
    1e3c:	9e 83       	std	Y+6, r25	; 0x06
    1e3e:	8d 83       	std	Y+5, r24	; 0x05
    1e40:	8d 81       	ldd	r24, Y+5	; 0x05
    1e42:	9e 81       	ldd	r25, Y+6	; 0x06
    1e44:	9a 83       	std	Y+2, r25	; 0x02
    1e46:	89 83       	std	Y+1, r24	; 0x01
    1e48:	89 81       	ldd	r24, Y+1	; 0x01
    1e4a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e4c:	01 97       	sbiw	r24, 0x01	; 1
    1e4e:	f1 f7       	brne	.-4      	; 0x1e4c <KEYPAD_u8GetPressedKey+0x158>
    1e50:	9a 83       	std	Y+2, r25	; 0x02
    1e52:	89 83       	std	Y+1, r24	; 0x01
			{
				/*delay and second check for switch debouncing*/
				_delay_ms(30);
				if (u8Value == KEYPAD_BUTTON_PRESSED)
    1e54:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e56:	88 23       	and	r24, r24
    1e58:	09 f0       	breq	.+2      	; 0x1e5c <KEYPAD_u8GetPressedKey+0x168>
    1e5a:	47 c0       	rjmp	.+142    	; 0x1eea <KEYPAD_u8GetPressedKey+0x1f6>
    1e5c:	0e c0       	rjmp	.+28     	; 0x1e7a <KEYPAD_u8GetPressedKey+0x186>
				{
					while(u8Value == KEYPAD_BUTTON_PRESSED)
					{
						u8Value=GPIO_readPin(KEYPAD_ROW_PORT,KPD_u8RwoPinArr[u8RowLocal]);
    1e5e:	89 89       	ldd	r24, Y+17	; 0x11
    1e60:	28 2f       	mov	r18, r24
    1e62:	30 e0       	ldi	r19, 0x00	; 0
    1e64:	ce 01       	movw	r24, r28
    1e66:	42 96       	adiw	r24, 0x12	; 18
    1e68:	fc 01       	movw	r30, r24
    1e6a:	e2 0f       	add	r30, r18
    1e6c:	f3 1f       	adc	r31, r19
    1e6e:	90 81       	ld	r25, Z
    1e70:	82 e0       	ldi	r24, 0x02	; 2
    1e72:	69 2f       	mov	r22, r25
    1e74:	0e 94 11 08 	call	0x1022	; 0x1022 <GPIO_readPin>
    1e78:	8f 87       	std	Y+15, r24	; 0x0f
			{
				/*delay and second check for switch debouncing*/
				_delay_ms(30);
				if (u8Value == KEYPAD_BUTTON_PRESSED)
				{
					while(u8Value == KEYPAD_BUTTON_PRESSED)
    1e7a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e7c:	88 23       	and	r24, r24
    1e7e:	79 f3       	breq	.-34     	; 0x1e5e <KEYPAD_u8GetPressedKey+0x16a>
					{
						u8Value=GPIO_readPin(KEYPAD_ROW_PORT,KPD_u8RwoPinArr[u8RowLocal]);
					}
					u8 KPD_u8Value[KEYPAD_NUM_ROWS][KEYPAD_NUM_COLS]= KPD_VALUES;
    1e80:	ce 01       	movw	r24, r28
    1e82:	4a 96       	adiw	r24, 0x1a	; 26
    1e84:	9c a7       	std	Y+44, r25	; 0x2c
    1e86:	8b a7       	std	Y+43, r24	; 0x2b
    1e88:	e0 ec       	ldi	r30, 0xC0	; 192
    1e8a:	f0 e0       	ldi	r31, 0x00	; 0
    1e8c:	fe a7       	std	Y+46, r31	; 0x2e
    1e8e:	ed a7       	std	Y+45, r30	; 0x2d
    1e90:	f0 e1       	ldi	r31, 0x10	; 16
    1e92:	ff a7       	std	Y+47, r31	; 0x2f
    1e94:	ed a5       	ldd	r30, Y+45	; 0x2d
    1e96:	fe a5       	ldd	r31, Y+46	; 0x2e
    1e98:	00 80       	ld	r0, Z
    1e9a:	8d a5       	ldd	r24, Y+45	; 0x2d
    1e9c:	9e a5       	ldd	r25, Y+46	; 0x2e
    1e9e:	01 96       	adiw	r24, 0x01	; 1
    1ea0:	9e a7       	std	Y+46, r25	; 0x2e
    1ea2:	8d a7       	std	Y+45, r24	; 0x2d
    1ea4:	eb a5       	ldd	r30, Y+43	; 0x2b
    1ea6:	fc a5       	ldd	r31, Y+44	; 0x2c
    1ea8:	00 82       	st	Z, r0
    1eaa:	8b a5       	ldd	r24, Y+43	; 0x2b
    1eac:	9c a5       	ldd	r25, Y+44	; 0x2c
    1eae:	01 96       	adiw	r24, 0x01	; 1
    1eb0:	9c a7       	std	Y+44, r25	; 0x2c
    1eb2:	8b a7       	std	Y+43, r24	; 0x2b
    1eb4:	9f a5       	ldd	r25, Y+47	; 0x2f
    1eb6:	91 50       	subi	r25, 0x01	; 1
    1eb8:	9f a7       	std	Y+47, r25	; 0x2f
    1eba:	ef a5       	ldd	r30, Y+47	; 0x2f
    1ebc:	ee 23       	and	r30, r30
    1ebe:	51 f7       	brne	.-44     	; 0x1e94 <KEYPAD_u8GetPressedKey+0x1a0>
					return KPD_u8Value[u8RowLocal][u8ColLocal];
    1ec0:	89 89       	ldd	r24, Y+17	; 0x11
    1ec2:	28 2f       	mov	r18, r24
    1ec4:	30 e0       	ldi	r19, 0x00	; 0
    1ec6:	88 89       	ldd	r24, Y+16	; 0x10
    1ec8:	48 2f       	mov	r20, r24
    1eca:	50 e0       	ldi	r21, 0x00	; 0
    1ecc:	22 0f       	add	r18, r18
    1ece:	33 1f       	adc	r19, r19
    1ed0:	22 0f       	add	r18, r18
    1ed2:	33 1f       	adc	r19, r19
    1ed4:	ce 01       	movw	r24, r28
    1ed6:	01 96       	adiw	r24, 0x01	; 1
    1ed8:	82 0f       	add	r24, r18
    1eda:	93 1f       	adc	r25, r19
    1edc:	84 0f       	add	r24, r20
    1ede:	95 1f       	adc	r25, r21
    1ee0:	fc 01       	movw	r30, r24
    1ee2:	79 96       	adiw	r30, 0x19	; 25
    1ee4:	80 81       	ld	r24, Z
    1ee6:	8a a7       	std	Y+42, r24	; 0x2a
    1ee8:	1e c0       	rjmp	.+60     	; 0x1f26 <KEYPAD_u8GetPressedKey+0x232>
	u8 KPD_u8ColPinArr[KEYPAD_NUM_COLS] = {KEYPAD_C0_PIN,KEYPAD_C1_PIN,KEYPAD_C2_PIN,KEYPAD_C3_PIN};
	for(u8ColLocal=0;u8ColLocal<KEYPAD_NUM_COLS;u8ColLocal++)
	{
		/*To activate one column at a time -> col_pin =0*/
		GPIO_writePin(KEYPAD_COL_PORT,KPD_u8ColPinArr[u8ColLocal],LOGIC_LOW);
		for(u8RowLocal=0;u8RowLocal<KEYPAD_NUM_ROWS;u8RowLocal++)
    1eea:	89 89       	ldd	r24, Y+17	; 0x11
    1eec:	8f 5f       	subi	r24, 0xFF	; 255
    1eee:	89 8b       	std	Y+17, r24	; 0x11
    1ef0:	89 89       	ldd	r24, Y+17	; 0x11
    1ef2:	84 30       	cpi	r24, 0x04	; 4
    1ef4:	08 f4       	brcc	.+2      	; 0x1ef8 <KEYPAD_u8GetPressedKey+0x204>
    1ef6:	2a cf       	rjmp	.-428    	; 0x1d4c <KEYPAD_u8GetPressedKey+0x58>
					return KPD_u8Value[u8RowLocal][u8ColLocal];
				}
			}
		}
		/*there is no button pressed*/
		GPIO_writePin(KEYPAD_COL_PORT,KPD_u8ColPinArr[u8ColLocal],LOGIC_HIGH);
    1ef8:	88 89       	ldd	r24, Y+16	; 0x10
    1efa:	28 2f       	mov	r18, r24
    1efc:	30 e0       	ldi	r19, 0x00	; 0
    1efe:	ce 01       	movw	r24, r28
    1f00:	46 96       	adiw	r24, 0x16	; 22
    1f02:	fc 01       	movw	r30, r24
    1f04:	e2 0f       	add	r30, r18
    1f06:	f3 1f       	adc	r31, r19
    1f08:	90 81       	ld	r25, Z
    1f0a:	83 e0       	ldi	r24, 0x03	; 3
    1f0c:	69 2f       	mov	r22, r25
    1f0e:	41 e0       	ldi	r20, 0x01	; 1
    1f10:	0e 94 26 07 	call	0xe4c	; 0xe4c <GPIO_writePin>
	/*Define the row and col variables that will check which button pressed*/
	u8 u8RowLocal=0,u8ColLocal=0;
	/*Define the row and col arrays that will include the keypad pins */
	u8 KPD_u8RwoPinArr[KEYPAD_NUM_ROWS] = {KEYPAD_R0_PIN,KEYPAD_R1_PIN,KEYPAD_R2_PIN,KEYPAD_R3_PIN};
	u8 KPD_u8ColPinArr[KEYPAD_NUM_COLS] = {KEYPAD_C0_PIN,KEYPAD_C1_PIN,KEYPAD_C2_PIN,KEYPAD_C3_PIN};
	for(u8ColLocal=0;u8ColLocal<KEYPAD_NUM_COLS;u8ColLocal++)
    1f14:	88 89       	ldd	r24, Y+16	; 0x10
    1f16:	8f 5f       	subi	r24, 0xFF	; 255
    1f18:	88 8b       	std	Y+16, r24	; 0x10
    1f1a:	88 89       	ldd	r24, Y+16	; 0x10
    1f1c:	84 30       	cpi	r24, 0x04	; 4
    1f1e:	08 f4       	brcc	.+2      	; 0x1f22 <KEYPAD_u8GetPressedKey+0x22e>
    1f20:	05 cf       	rjmp	.-502    	; 0x1d2c <KEYPAD_u8GetPressedKey+0x38>
			}
		}
		/*there is no button pressed*/
		GPIO_writePin(KEYPAD_COL_PORT,KPD_u8ColPinArr[u8ColLocal],LOGIC_HIGH);
	}
	return KEYPAD_BUTTON_RELEASED;
    1f22:	91 e0       	ldi	r25, 0x01	; 1
    1f24:	9a a7       	std	Y+42, r25	; 0x2a
    1f26:	8a a5       	ldd	r24, Y+42	; 0x2a
}
    1f28:	af 96       	adiw	r28, 0x2f	; 47
    1f2a:	0f b6       	in	r0, 0x3f	; 63
    1f2c:	f8 94       	cli
    1f2e:	de bf       	out	0x3e, r29	; 62
    1f30:	0f be       	out	0x3f, r0	; 63
    1f32:	cd bf       	out	0x3d, r28	; 61
    1f34:	cf 91       	pop	r28
    1f36:	df 91       	pop	r29
    1f38:	08 95       	ret

00001f3a <LCD_enuInit>:
#include <util/delay.h>

#include "LCD.h"

void LCD_enuInit(void)
{
    1f3a:	df 93       	push	r29
    1f3c:	cf 93       	push	r28
    1f3e:	cd b7       	in	r28, 0x3d	; 61
    1f40:	de b7       	in	r29, 0x3e	; 62
    1f42:	2e 97       	sbiw	r28, 0x0e	; 14
    1f44:	0f b6       	in	r0, 0x3f	; 63
    1f46:	f8 94       	cli
    1f48:	de bf       	out	0x3e, r29	; 62
    1f4a:	0f be       	out	0x3f, r0	; 63
    1f4c:	cd bf       	out	0x3d, r28	; 61
    1f4e:	80 e0       	ldi	r24, 0x00	; 0
    1f50:	90 e0       	ldi	r25, 0x00	; 0
    1f52:	ac e0       	ldi	r26, 0x0C	; 12
    1f54:	b2 e4       	ldi	r27, 0x42	; 66
    1f56:	8b 87       	std	Y+11, r24	; 0x0b
    1f58:	9c 87       	std	Y+12, r25	; 0x0c
    1f5a:	ad 87       	std	Y+13, r26	; 0x0d
    1f5c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f5e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f60:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f62:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f64:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f66:	20 e0       	ldi	r18, 0x00	; 0
    1f68:	30 e0       	ldi	r19, 0x00	; 0
    1f6a:	4a e7       	ldi	r20, 0x7A	; 122
    1f6c:	53 e4       	ldi	r21, 0x43	; 67
    1f6e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f72:	dc 01       	movw	r26, r24
    1f74:	cb 01       	movw	r24, r22
    1f76:	8f 83       	std	Y+7, r24	; 0x07
    1f78:	98 87       	std	Y+8, r25	; 0x08
    1f7a:	a9 87       	std	Y+9, r26	; 0x09
    1f7c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f7e:	6f 81       	ldd	r22, Y+7	; 0x07
    1f80:	78 85       	ldd	r23, Y+8	; 0x08
    1f82:	89 85       	ldd	r24, Y+9	; 0x09
    1f84:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f86:	20 e0       	ldi	r18, 0x00	; 0
    1f88:	30 e0       	ldi	r19, 0x00	; 0
    1f8a:	40 e8       	ldi	r20, 0x80	; 128
    1f8c:	5f e3       	ldi	r21, 0x3F	; 63
    1f8e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1f92:	88 23       	and	r24, r24
    1f94:	2c f4       	brge	.+10     	; 0x1fa0 <LCD_enuInit+0x66>
		__ticks = 1;
    1f96:	81 e0       	ldi	r24, 0x01	; 1
    1f98:	90 e0       	ldi	r25, 0x00	; 0
    1f9a:	9e 83       	std	Y+6, r25	; 0x06
    1f9c:	8d 83       	std	Y+5, r24	; 0x05
    1f9e:	3f c0       	rjmp	.+126    	; 0x201e <LCD_enuInit+0xe4>
	else if (__tmp > 65535)
    1fa0:	6f 81       	ldd	r22, Y+7	; 0x07
    1fa2:	78 85       	ldd	r23, Y+8	; 0x08
    1fa4:	89 85       	ldd	r24, Y+9	; 0x09
    1fa6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fa8:	20 e0       	ldi	r18, 0x00	; 0
    1faa:	3f ef       	ldi	r19, 0xFF	; 255
    1fac:	4f e7       	ldi	r20, 0x7F	; 127
    1fae:	57 e4       	ldi	r21, 0x47	; 71
    1fb0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1fb4:	18 16       	cp	r1, r24
    1fb6:	4c f5       	brge	.+82     	; 0x200a <LCD_enuInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fb8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fba:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fbc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fbe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fc0:	20 e0       	ldi	r18, 0x00	; 0
    1fc2:	30 e0       	ldi	r19, 0x00	; 0
    1fc4:	40 e2       	ldi	r20, 0x20	; 32
    1fc6:	51 e4       	ldi	r21, 0x41	; 65
    1fc8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fcc:	dc 01       	movw	r26, r24
    1fce:	cb 01       	movw	r24, r22
    1fd0:	bc 01       	movw	r22, r24
    1fd2:	cd 01       	movw	r24, r26
    1fd4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fd8:	dc 01       	movw	r26, r24
    1fda:	cb 01       	movw	r24, r22
    1fdc:	9e 83       	std	Y+6, r25	; 0x06
    1fde:	8d 83       	std	Y+5, r24	; 0x05
    1fe0:	0f c0       	rjmp	.+30     	; 0x2000 <LCD_enuInit+0xc6>
    1fe2:	89 e1       	ldi	r24, 0x19	; 25
    1fe4:	90 e0       	ldi	r25, 0x00	; 0
    1fe6:	9c 83       	std	Y+4, r25	; 0x04
    1fe8:	8b 83       	std	Y+3, r24	; 0x03
    1fea:	8b 81       	ldd	r24, Y+3	; 0x03
    1fec:	9c 81       	ldd	r25, Y+4	; 0x04
    1fee:	01 97       	sbiw	r24, 0x01	; 1
    1ff0:	f1 f7       	brne	.-4      	; 0x1fee <LCD_enuInit+0xb4>
    1ff2:	9c 83       	std	Y+4, r25	; 0x04
    1ff4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ff6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ff8:	9e 81       	ldd	r25, Y+6	; 0x06
    1ffa:	01 97       	sbiw	r24, 0x01	; 1
    1ffc:	9e 83       	std	Y+6, r25	; 0x06
    1ffe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2000:	8d 81       	ldd	r24, Y+5	; 0x05
    2002:	9e 81       	ldd	r25, Y+6	; 0x06
    2004:	00 97       	sbiw	r24, 0x00	; 0
    2006:	69 f7       	brne	.-38     	; 0x1fe2 <LCD_enuInit+0xa8>
    2008:	14 c0       	rjmp	.+40     	; 0x2032 <LCD_enuInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    200a:	6f 81       	ldd	r22, Y+7	; 0x07
    200c:	78 85       	ldd	r23, Y+8	; 0x08
    200e:	89 85       	ldd	r24, Y+9	; 0x09
    2010:	9a 85       	ldd	r25, Y+10	; 0x0a
    2012:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2016:	dc 01       	movw	r26, r24
    2018:	cb 01       	movw	r24, r22
    201a:	9e 83       	std	Y+6, r25	; 0x06
    201c:	8d 83       	std	Y+5, r24	; 0x05
    201e:	8d 81       	ldd	r24, Y+5	; 0x05
    2020:	9e 81       	ldd	r25, Y+6	; 0x06
    2022:	9a 83       	std	Y+2, r25	; 0x02
    2024:	89 83       	std	Y+1, r24	; 0x01
    2026:	89 81       	ldd	r24, Y+1	; 0x01
    2028:	9a 81       	ldd	r25, Y+2	; 0x02
    202a:	01 97       	sbiw	r24, 0x01	; 1
    202c:	f1 f7       	brne	.-4      	; 0x202a <LCD_enuInit+0xf0>
    202e:	9a 83       	std	Y+2, r25	; 0x02
    2030:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(35);

    DIO_voidSetPinDirection(RS_GRP , RS_PIN , DIO_OUTPUT);
    2032:	81 e0       	ldi	r24, 0x01	; 1
    2034:	61 e0       	ldi	r22, 0x01	; 1
    2036:	41 e0       	ldi	r20, 0x01	; 1
    2038:	0e 94 2e 0c 	call	0x185c	; 0x185c <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(RW_GRP , RW_PIN , DIO_OUTPUT);
    203c:	81 e0       	ldi	r24, 0x01	; 1
    203e:	62 e0       	ldi	r22, 0x02	; 2
    2040:	41 e0       	ldi	r20, 0x01	; 1
    2042:	0e 94 2e 0c 	call	0x185c	; 0x185c <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(EN_GRP , EN_PIN , DIO_OUTPUT);
    2046:	81 e0       	ldi	r24, 0x01	; 1
    2048:	63 e0       	ldi	r22, 0x03	; 3
    204a:	41 e0       	ldi	r20, 0x01	; 1
    204c:	0e 94 2e 0c 	call	0x185c	; 0x185c <DIO_voidSetPinDirection>

    DIO_voidSetPinDirection(D7_GRP , D7_PIN , DIO_OUTPUT);
    2050:	81 e0       	ldi	r24, 0x01	; 1
    2052:	60 e0       	ldi	r22, 0x00	; 0
    2054:	41 e0       	ldi	r20, 0x01	; 1
    2056:	0e 94 2e 0c 	call	0x185c	; 0x185c <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(D6_GRP , D6_PIN , DIO_OUTPUT);
    205a:	80 e0       	ldi	r24, 0x00	; 0
    205c:	66 e0       	ldi	r22, 0x06	; 6
    205e:	41 e0       	ldi	r20, 0x01	; 1
    2060:	0e 94 2e 0c 	call	0x185c	; 0x185c <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(D5_GRP , D5_PIN , DIO_OUTPUT);
    2064:	80 e0       	ldi	r24, 0x00	; 0
    2066:	65 e0       	ldi	r22, 0x05	; 5
    2068:	41 e0       	ldi	r20, 0x01	; 1
    206a:	0e 94 2e 0c 	call	0x185c	; 0x185c <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(D4_GRP , D4_PIN , DIO_OUTPUT);
    206e:	80 e0       	ldi	r24, 0x00	; 0
    2070:	64 e0       	ldi	r22, 0x04	; 4
    2072:	41 e0       	ldi	r20, 0x01	; 1
    2074:	0e 94 2e 0c 	call	0x185c	; 0x185c <DIO_voidSetPinDirection>

    #if LCD_MODE == EIGHT_BIT_MODE
        DIO_voidSetPinDirection(D3_GRP , D3_PIN , DIO_OUTPUT);
    2078:	80 e0       	ldi	r24, 0x00	; 0
    207a:	63 e0       	ldi	r22, 0x03	; 3
    207c:	41 e0       	ldi	r20, 0x01	; 1
    207e:	0e 94 2e 0c 	call	0x185c	; 0x185c <DIO_voidSetPinDirection>
        DIO_voidSetPinDirection(D2_GRP , D2_PIN , DIO_OUTPUT);
    2082:	80 e0       	ldi	r24, 0x00	; 0
    2084:	62 e0       	ldi	r22, 0x02	; 2
    2086:	41 e0       	ldi	r20, 0x01	; 1
    2088:	0e 94 2e 0c 	call	0x185c	; 0x185c <DIO_voidSetPinDirection>
        DIO_voidSetPinDirection(D1_GRP , D1_PIN , DIO_OUTPUT);
    208c:	81 e0       	ldi	r24, 0x01	; 1
    208e:	65 e0       	ldi	r22, 0x05	; 5
    2090:	41 e0       	ldi	r20, 0x01	; 1
    2092:	0e 94 2e 0c 	call	0x185c	; 0x185c <DIO_voidSetPinDirection>
        DIO_voidSetPinDirection(D0_GRP , D0_PIN , DIO_OUTPUT);
    2096:	80 e0       	ldi	r24, 0x00	; 0
    2098:	60 e0       	ldi	r22, 0x00	; 0
    209a:	41 e0       	ldi	r20, 0x01	; 1
    209c:	0e 94 2e 0c 	call	0x185c	; 0x185c <DIO_voidSetPinDirection>

        DIO_voidSetPinValue(RS_GRP , RS_PIN , DIO_LOW);
    20a0:	81 e0       	ldi	r24, 0x01	; 1
    20a2:	61 e0       	ldi	r22, 0x01	; 1
    20a4:	40 e0       	ldi	r20, 0x00	; 0
    20a6:	0e 94 3f 0b 	call	0x167e	; 0x167e <DIO_voidSetPinValue>
        vidWriteByteAndLatch(0x38);
    20aa:	88 e3       	ldi	r24, 0x38	; 56
    20ac:	0e 94 a3 11 	call	0x2346	; 0x2346 <vidWriteByteAndLatch>
        vidWriteByteAndLatch(0x28);
    #else
    #error LCD mode setting is wrong
    #endif

    DIO_voidSetPinValue(RS_GRP , RS_PIN , DIO_LOW);
    20b0:	81 e0       	ldi	r24, 0x01	; 1
    20b2:	61 e0       	ldi	r22, 0x01	; 1
    20b4:	40 e0       	ldi	r20, 0x00	; 0
    20b6:	0e 94 3f 0b 	call	0x167e	; 0x167e <DIO_voidSetPinValue>
    vidWriteByteAndLatch(0x0F);
    20ba:	8f e0       	ldi	r24, 0x0F	; 15
    20bc:	0e 94 a3 11 	call	0x2346	; 0x2346 <vidWriteByteAndLatch>

    DIO_voidSetPinValue(RS_GRP , RS_PIN , DIO_LOW);
    20c0:	81 e0       	ldi	r24, 0x01	; 1
    20c2:	61 e0       	ldi	r22, 0x01	; 1
    20c4:	40 e0       	ldi	r20, 0x00	; 0
    20c6:	0e 94 3f 0b 	call	0x167e	; 0x167e <DIO_voidSetPinValue>
    vidWriteByteAndLatch(0x01);
    20ca:	81 e0       	ldi	r24, 0x01	; 1
    20cc:	0e 94 a3 11 	call	0x2346	; 0x2346 <vidWriteByteAndLatch>

    DIO_voidSetPinValue(RS_GRP , RS_PIN , DIO_LOW);
    20d0:	81 e0       	ldi	r24, 0x01	; 1
    20d2:	61 e0       	ldi	r22, 0x01	; 1
    20d4:	40 e0       	ldi	r20, 0x00	; 0
    20d6:	0e 94 3f 0b 	call	0x167e	; 0x167e <DIO_voidSetPinValue>
    vidWriteByteAndLatch(0x06);
    20da:	86 e0       	ldi	r24, 0x06	; 6
    20dc:	0e 94 a3 11 	call	0x2346	; 0x2346 <vidWriteByteAndLatch>
}
    20e0:	2e 96       	adiw	r28, 0x0e	; 14
    20e2:	0f b6       	in	r0, 0x3f	; 63
    20e4:	f8 94       	cli
    20e6:	de bf       	out	0x3e, r29	; 62
    20e8:	0f be       	out	0x3f, r0	; 63
    20ea:	cd bf       	out	0x3d, r28	; 61
    20ec:	cf 91       	pop	r28
    20ee:	df 91       	pop	r29
    20f0:	08 95       	ret

000020f2 <LCD_vidSendData>:

void LCD_vidSendData(u8 Copy_u8Data)
{
    20f2:	df 93       	push	r29
    20f4:	cf 93       	push	r28
    20f6:	0f 92       	push	r0
    20f8:	cd b7       	in	r28, 0x3d	; 61
    20fa:	de b7       	in	r29, 0x3e	; 62
    20fc:	89 83       	std	Y+1, r24	; 0x01
    DIO_voidSetPinValue(RS_GRP , RS_PIN , DIO_HIGH);
    20fe:	81 e0       	ldi	r24, 0x01	; 1
    2100:	61 e0       	ldi	r22, 0x01	; 1
    2102:	41 e0       	ldi	r20, 0x01	; 1
    2104:	0e 94 3f 0b 	call	0x167e	; 0x167e <DIO_voidSetPinValue>

    vidWriteByteAndLatch(Copy_u8Data);
    2108:	89 81       	ldd	r24, Y+1	; 0x01
    210a:	0e 94 a3 11 	call	0x2346	; 0x2346 <vidWriteByteAndLatch>

}
    210e:	0f 90       	pop	r0
    2110:	cf 91       	pop	r28
    2112:	df 91       	pop	r29
    2114:	08 95       	ret

00002116 <LCD_vidSendCommand>:

void LCD_vidSendCommand(u8 Copy_u8Command)
{
    2116:	df 93       	push	r29
    2118:	cf 93       	push	r28
    211a:	0f 92       	push	r0
    211c:	cd b7       	in	r28, 0x3d	; 61
    211e:	de b7       	in	r29, 0x3e	; 62
    2120:	89 83       	std	Y+1, r24	; 0x01
    DIO_voidSetPinValue(RS_GRP , RS_PIN , DIO_LOW);
    2122:	81 e0       	ldi	r24, 0x01	; 1
    2124:	61 e0       	ldi	r22, 0x01	; 1
    2126:	40 e0       	ldi	r20, 0x00	; 0
    2128:	0e 94 3f 0b 	call	0x167e	; 0x167e <DIO_voidSetPinValue>

    vidWriteByteAndLatch(Copy_u8Command);
    212c:	89 81       	ldd	r24, Y+1	; 0x01
    212e:	0e 94 a3 11 	call	0x2346	; 0x2346 <vidWriteByteAndLatch>
}
    2132:	0f 90       	pop	r0
    2134:	cf 91       	pop	r28
    2136:	df 91       	pop	r29
    2138:	08 95       	ret

0000213a <LCD_vidWriteString>:

void LCD_vidWriteString(const char * Copy_pcString)
{
    213a:	df 93       	push	r29
    213c:	cf 93       	push	r28
    213e:	00 d0       	rcall	.+0      	; 0x2140 <LCD_vidWriteString+0x6>
    2140:	cd b7       	in	r28, 0x3d	; 61
    2142:	de b7       	in	r29, 0x3e	; 62
    2144:	9a 83       	std	Y+2, r25	; 0x02
    2146:	89 83       	std	Y+1, r24	; 0x01
    2148:	10 c0       	rjmp	.+32     	; 0x216a <LCD_vidWriteString+0x30>
    while ( * Copy_pcString != '\0')
    {
        DIO_voidSetPinValue(RS_GRP , RS_PIN , DIO_HIGH);
    214a:	81 e0       	ldi	r24, 0x01	; 1
    214c:	61 e0       	ldi	r22, 0x01	; 1
    214e:	41 e0       	ldi	r20, 0x01	; 1
    2150:	0e 94 3f 0b 	call	0x167e	; 0x167e <DIO_voidSetPinValue>
        vidWriteByteAndLatch(*Copy_pcString++);
    2154:	e9 81       	ldd	r30, Y+1	; 0x01
    2156:	fa 81       	ldd	r31, Y+2	; 0x02
    2158:	20 81       	ld	r18, Z
    215a:	89 81       	ldd	r24, Y+1	; 0x01
    215c:	9a 81       	ldd	r25, Y+2	; 0x02
    215e:	01 96       	adiw	r24, 0x01	; 1
    2160:	9a 83       	std	Y+2, r25	; 0x02
    2162:	89 83       	std	Y+1, r24	; 0x01
    2164:	82 2f       	mov	r24, r18
    2166:	0e 94 a3 11 	call	0x2346	; 0x2346 <vidWriteByteAndLatch>
    vidWriteByteAndLatch(Copy_u8Command);
}

void LCD_vidWriteString(const char * Copy_pcString)
{
    while ( * Copy_pcString != '\0')
    216a:	e9 81       	ldd	r30, Y+1	; 0x01
    216c:	fa 81       	ldd	r31, Y+2	; 0x02
    216e:	80 81       	ld	r24, Z
    2170:	88 23       	and	r24, r24
    2172:	59 f7       	brne	.-42     	; 0x214a <LCD_vidWriteString+0x10>
    {
        DIO_voidSetPinValue(RS_GRP , RS_PIN , DIO_HIGH);
        vidWriteByteAndLatch(*Copy_pcString++);

    }
}
    2174:	0f 90       	pop	r0
    2176:	0f 90       	pop	r0
    2178:	cf 91       	pop	r28
    217a:	df 91       	pop	r29
    217c:	08 95       	ret

0000217e <LCD_vidWriteIntegarNum>:

void LCD_vidWriteIntegarNum(s32 Copy_s32Num)
{
    217e:	0f 93       	push	r16
    2180:	1f 93       	push	r17
    2182:	df 93       	push	r29
    2184:	cf 93       	push	r28
    2186:	cd b7       	in	r28, 0x3d	; 61
    2188:	de b7       	in	r29, 0x3e	; 62
    218a:	63 97       	sbiw	r28, 0x13	; 19
    218c:	0f b6       	in	r0, 0x3f	; 63
    218e:	f8 94       	cli
    2190:	de bf       	out	0x3e, r29	; 62
    2192:	0f be       	out	0x3f, r0	; 63
    2194:	cd bf       	out	0x3d, r28	; 61
    2196:	68 8b       	std	Y+16, r22	; 0x10
    2198:	79 8b       	std	Y+17, r23	; 0x11
    219a:	8a 8b       	std	Y+18, r24	; 0x12
    219c:	9b 8b       	std	Y+19, r25	; 0x13
    if (Copy_s32Num == 0)
    219e:	88 89       	ldd	r24, Y+16	; 0x10
    21a0:	99 89       	ldd	r25, Y+17	; 0x11
    21a2:	aa 89       	ldd	r26, Y+18	; 0x12
    21a4:	bb 89       	ldd	r27, Y+19	; 0x13
    21a6:	00 97       	sbiw	r24, 0x00	; 0
    21a8:	a1 05       	cpc	r26, r1
    21aa:	b1 05       	cpc	r27, r1
    21ac:	49 f4       	brne	.+18     	; 0x21c0 <LCD_vidWriteIntegarNum+0x42>
    {
        DIO_voidSetPinValue(RS_GRP , RS_PIN , DIO_HIGH);
    21ae:	81 e0       	ldi	r24, 0x01	; 1
    21b0:	61 e0       	ldi	r22, 0x01	; 1
    21b2:	41 e0       	ldi	r20, 0x01	; 1
    21b4:	0e 94 3f 0b 	call	0x167e	; 0x167e <DIO_voidSetPinValue>
        vidWriteByteAndLatch('0');
    21b8:	80 e3       	ldi	r24, 0x30	; 48
    21ba:	0e 94 a3 11 	call	0x2346	; 0x2346 <vidWriteByteAndLatch>
    21be:	85 c0       	rjmp	.+266    	; 0x22ca <LCD_vidWriteIntegarNum+0x14c>
    }
    else
    {
        if (Copy_s32Num < 0 )
    21c0:	88 89       	ldd	r24, Y+16	; 0x10
    21c2:	99 89       	ldd	r25, Y+17	; 0x11
    21c4:	aa 89       	ldd	r26, Y+18	; 0x12
    21c6:	bb 89       	ldd	r27, Y+19	; 0x13
    21c8:	bb 23       	and	r27, r27
    21ca:	bc f4       	brge	.+46     	; 0x21fa <LCD_vidWriteIntegarNum+0x7c>
        {
            DIO_voidSetPinValue(RS_GRP , RS_PIN , DIO_HIGH);
    21cc:	81 e0       	ldi	r24, 0x01	; 1
    21ce:	61 e0       	ldi	r22, 0x01	; 1
    21d0:	41 e0       	ldi	r20, 0x01	; 1
    21d2:	0e 94 3f 0b 	call	0x167e	; 0x167e <DIO_voidSetPinValue>
            vidWriteByteAndLatch('-');
    21d6:	8d e2       	ldi	r24, 0x2D	; 45
    21d8:	0e 94 a3 11 	call	0x2346	; 0x2346 <vidWriteByteAndLatch>

            Copy_s32Num *=-1;
    21dc:	88 89       	ldd	r24, Y+16	; 0x10
    21de:	99 89       	ldd	r25, Y+17	; 0x11
    21e0:	aa 89       	ldd	r26, Y+18	; 0x12
    21e2:	bb 89       	ldd	r27, Y+19	; 0x13
    21e4:	b0 95       	com	r27
    21e6:	a0 95       	com	r26
    21e8:	90 95       	com	r25
    21ea:	81 95       	neg	r24
    21ec:	9f 4f       	sbci	r25, 0xFF	; 255
    21ee:	af 4f       	sbci	r26, 0xFF	; 255
    21f0:	bf 4f       	sbci	r27, 0xFF	; 255
    21f2:	88 8b       	std	Y+16, r24	; 0x10
    21f4:	99 8b       	std	Y+17, r25	; 0x11
    21f6:	aa 8b       	std	Y+18, r26	; 0x12
    21f8:	bb 8b       	std	Y+19, r27	; 0x13
        }

        u8 Local_au8Digits [12] = {0};
    21fa:	8c e0       	ldi	r24, 0x0C	; 12
    21fc:	fe 01       	movw	r30, r28
    21fe:	34 96       	adiw	r30, 0x04	; 4
    2200:	df 01       	movw	r26, r30
    2202:	98 2f       	mov	r25, r24
    2204:	1d 92       	st	X+, r1
    2206:	9a 95       	dec	r25
    2208:	e9 f7       	brne	.-6      	; 0x2204 <LCD_vidWriteIntegarNum+0x86>
        u8 Local_u8NumOfDigits = (u8CountDigitsInNum(Copy_s32Num)-1);
    220a:	88 89       	ldd	r24, Y+16	; 0x10
    220c:	99 89       	ldd	r25, Y+17	; 0x11
    220e:	aa 89       	ldd	r26, Y+18	; 0x12
    2210:	bb 89       	ldd	r27, Y+19	; 0x13
    2212:	bc 01       	movw	r22, r24
    2214:	cd 01       	movw	r24, r26
    2216:	0e 94 70 11 	call	0x22e0	; 0x22e0 <u8CountDigitsInNum>
    221a:	81 50       	subi	r24, 0x01	; 1
    221c:	8b 83       	std	Y+3, r24	; 0x03

        for (s8 Local_s8Iter = Local_u8NumOfDigits ; Local_s8Iter >=0 ; Local_s8Iter --)
    221e:	8b 81       	ldd	r24, Y+3	; 0x03
    2220:	8a 83       	std	Y+2, r24	; 0x02
    2222:	30 c0       	rjmp	.+96     	; 0x2284 <LCD_vidWriteIntegarNum+0x106>
        {
            Local_au8Digits[Local_s8Iter] = ( Copy_s32Num %10)+ '0';
    2224:	8a 81       	ldd	r24, Y+2	; 0x02
    2226:	08 2f       	mov	r16, r24
    2228:	11 27       	eor	r17, r17
    222a:	07 fd       	sbrc	r16, 7
    222c:	10 95       	com	r17
    222e:	88 89       	ldd	r24, Y+16	; 0x10
    2230:	99 89       	ldd	r25, Y+17	; 0x11
    2232:	aa 89       	ldd	r26, Y+18	; 0x12
    2234:	bb 89       	ldd	r27, Y+19	; 0x13
    2236:	2a e0       	ldi	r18, 0x0A	; 10
    2238:	30 e0       	ldi	r19, 0x00	; 0
    223a:	40 e0       	ldi	r20, 0x00	; 0
    223c:	50 e0       	ldi	r21, 0x00	; 0
    223e:	bc 01       	movw	r22, r24
    2240:	cd 01       	movw	r24, r26
    2242:	0e 94 33 14 	call	0x2866	; 0x2866 <__divmodsi4>
    2246:	dc 01       	movw	r26, r24
    2248:	cb 01       	movw	r24, r22
    224a:	28 2f       	mov	r18, r24
    224c:	20 5d       	subi	r18, 0xD0	; 208
    224e:	ce 01       	movw	r24, r28
    2250:	04 96       	adiw	r24, 0x04	; 4
    2252:	fc 01       	movw	r30, r24
    2254:	e0 0f       	add	r30, r16
    2256:	f1 1f       	adc	r31, r17
    2258:	20 83       	st	Z, r18
            Copy_s32Num /=10;
    225a:	88 89       	ldd	r24, Y+16	; 0x10
    225c:	99 89       	ldd	r25, Y+17	; 0x11
    225e:	aa 89       	ldd	r26, Y+18	; 0x12
    2260:	bb 89       	ldd	r27, Y+19	; 0x13
    2262:	2a e0       	ldi	r18, 0x0A	; 10
    2264:	30 e0       	ldi	r19, 0x00	; 0
    2266:	40 e0       	ldi	r20, 0x00	; 0
    2268:	50 e0       	ldi	r21, 0x00	; 0
    226a:	bc 01       	movw	r22, r24
    226c:	cd 01       	movw	r24, r26
    226e:	0e 94 33 14 	call	0x2866	; 0x2866 <__divmodsi4>
    2272:	da 01       	movw	r26, r20
    2274:	c9 01       	movw	r24, r18
    2276:	88 8b       	std	Y+16, r24	; 0x10
    2278:	99 8b       	std	Y+17, r25	; 0x11
    227a:	aa 8b       	std	Y+18, r26	; 0x12
    227c:	bb 8b       	std	Y+19, r27	; 0x13
        }

        u8 Local_au8Digits [12] = {0};
        u8 Local_u8NumOfDigits = (u8CountDigitsInNum(Copy_s32Num)-1);

        for (s8 Local_s8Iter = Local_u8NumOfDigits ; Local_s8Iter >=0 ; Local_s8Iter --)
    227e:	8a 81       	ldd	r24, Y+2	; 0x02
    2280:	81 50       	subi	r24, 0x01	; 1
    2282:	8a 83       	std	Y+2, r24	; 0x02
    2284:	8a 81       	ldd	r24, Y+2	; 0x02
    2286:	88 23       	and	r24, r24
    2288:	6c f6       	brge	.-102    	; 0x2224 <LCD_vidWriteIntegarNum+0xa6>
        {
            Local_au8Digits[Local_s8Iter] = ( Copy_s32Num %10)+ '0';
            Copy_s32Num /=10;
        }
        for (u8 Local_u8Iter = 0 ; Local_au8Digits[Local_u8Iter] != 0 ; Local_u8Iter ++)
    228a:	19 82       	std	Y+1, r1	; 0x01
    228c:	13 c0       	rjmp	.+38     	; 0x22b4 <LCD_vidWriteIntegarNum+0x136>
        {
            DIO_voidSetPinValue(RS_GRP , RS_PIN , DIO_HIGH);
    228e:	81 e0       	ldi	r24, 0x01	; 1
    2290:	61 e0       	ldi	r22, 0x01	; 1
    2292:	41 e0       	ldi	r20, 0x01	; 1
    2294:	0e 94 3f 0b 	call	0x167e	; 0x167e <DIO_voidSetPinValue>
            vidWriteByteAndLatch(Local_au8Digits[Local_u8Iter]);
    2298:	89 81       	ldd	r24, Y+1	; 0x01
    229a:	28 2f       	mov	r18, r24
    229c:	30 e0       	ldi	r19, 0x00	; 0
    229e:	ce 01       	movw	r24, r28
    22a0:	04 96       	adiw	r24, 0x04	; 4
    22a2:	fc 01       	movw	r30, r24
    22a4:	e2 0f       	add	r30, r18
    22a6:	f3 1f       	adc	r31, r19
    22a8:	80 81       	ld	r24, Z
    22aa:	0e 94 a3 11 	call	0x2346	; 0x2346 <vidWriteByteAndLatch>
        for (s8 Local_s8Iter = Local_u8NumOfDigits ; Local_s8Iter >=0 ; Local_s8Iter --)
        {
            Local_au8Digits[Local_s8Iter] = ( Copy_s32Num %10)+ '0';
            Copy_s32Num /=10;
        }
        for (u8 Local_u8Iter = 0 ; Local_au8Digits[Local_u8Iter] != 0 ; Local_u8Iter ++)
    22ae:	89 81       	ldd	r24, Y+1	; 0x01
    22b0:	8f 5f       	subi	r24, 0xFF	; 255
    22b2:	89 83       	std	Y+1, r24	; 0x01
    22b4:	89 81       	ldd	r24, Y+1	; 0x01
    22b6:	28 2f       	mov	r18, r24
    22b8:	30 e0       	ldi	r19, 0x00	; 0
    22ba:	ce 01       	movw	r24, r28
    22bc:	04 96       	adiw	r24, 0x04	; 4
    22be:	fc 01       	movw	r30, r24
    22c0:	e2 0f       	add	r30, r18
    22c2:	f3 1f       	adc	r31, r19
    22c4:	80 81       	ld	r24, Z
    22c6:	88 23       	and	r24, r24
    22c8:	11 f7       	brne	.-60     	; 0x228e <LCD_vidWriteIntegarNum+0x110>
            DIO_voidSetPinValue(RS_GRP , RS_PIN , DIO_HIGH);
            vidWriteByteAndLatch(Local_au8Digits[Local_u8Iter]);
        }

    }
}
    22ca:	63 96       	adiw	r28, 0x13	; 19
    22cc:	0f b6       	in	r0, 0x3f	; 63
    22ce:	f8 94       	cli
    22d0:	de bf       	out	0x3e, r29	; 62
    22d2:	0f be       	out	0x3f, r0	; 63
    22d4:	cd bf       	out	0x3d, r28	; 61
    22d6:	cf 91       	pop	r28
    22d8:	df 91       	pop	r29
    22da:	1f 91       	pop	r17
    22dc:	0f 91       	pop	r16
    22de:	08 95       	ret

000022e0 <u8CountDigitsInNum>:


static u8 u8CountDigitsInNum(s32 Copy_s32Num)
{
    22e0:	df 93       	push	r29
    22e2:	cf 93       	push	r28
    22e4:	00 d0       	rcall	.+0      	; 0x22e6 <u8CountDigitsInNum+0x6>
    22e6:	00 d0       	rcall	.+0      	; 0x22e8 <u8CountDigitsInNum+0x8>
    22e8:	0f 92       	push	r0
    22ea:	cd b7       	in	r28, 0x3d	; 61
    22ec:	de b7       	in	r29, 0x3e	; 62
    22ee:	6a 83       	std	Y+2, r22	; 0x02
    22f0:	7b 83       	std	Y+3, r23	; 0x03
    22f2:	8c 83       	std	Y+4, r24	; 0x04
    22f4:	9d 83       	std	Y+5, r25	; 0x05
    u8 Local_u8NumOfDigits = 0;
    22f6:	19 82       	std	Y+1, r1	; 0x01
    22f8:	15 c0       	rjmp	.+42     	; 0x2324 <u8CountDigitsInNum+0x44>
    while(Copy_s32Num != 0)
    {
        Copy_s32Num /=10;
    22fa:	8a 81       	ldd	r24, Y+2	; 0x02
    22fc:	9b 81       	ldd	r25, Y+3	; 0x03
    22fe:	ac 81       	ldd	r26, Y+4	; 0x04
    2300:	bd 81       	ldd	r27, Y+5	; 0x05
    2302:	2a e0       	ldi	r18, 0x0A	; 10
    2304:	30 e0       	ldi	r19, 0x00	; 0
    2306:	40 e0       	ldi	r20, 0x00	; 0
    2308:	50 e0       	ldi	r21, 0x00	; 0
    230a:	bc 01       	movw	r22, r24
    230c:	cd 01       	movw	r24, r26
    230e:	0e 94 33 14 	call	0x2866	; 0x2866 <__divmodsi4>
    2312:	da 01       	movw	r26, r20
    2314:	c9 01       	movw	r24, r18
    2316:	8a 83       	std	Y+2, r24	; 0x02
    2318:	9b 83       	std	Y+3, r25	; 0x03
    231a:	ac 83       	std	Y+4, r26	; 0x04
    231c:	bd 83       	std	Y+5, r27	; 0x05
        Local_u8NumOfDigits ++ ;
    231e:	89 81       	ldd	r24, Y+1	; 0x01
    2320:	8f 5f       	subi	r24, 0xFF	; 255
    2322:	89 83       	std	Y+1, r24	; 0x01


static u8 u8CountDigitsInNum(s32 Copy_s32Num)
{
    u8 Local_u8NumOfDigits = 0;
    while(Copy_s32Num != 0)
    2324:	8a 81       	ldd	r24, Y+2	; 0x02
    2326:	9b 81       	ldd	r25, Y+3	; 0x03
    2328:	ac 81       	ldd	r26, Y+4	; 0x04
    232a:	bd 81       	ldd	r27, Y+5	; 0x05
    232c:	00 97       	sbiw	r24, 0x00	; 0
    232e:	a1 05       	cpc	r26, r1
    2330:	b1 05       	cpc	r27, r1
    2332:	19 f7       	brne	.-58     	; 0x22fa <u8CountDigitsInNum+0x1a>
    {
        Copy_s32Num /=10;
        Local_u8NumOfDigits ++ ;
    }
    return Local_u8NumOfDigits;
    2334:	89 81       	ldd	r24, Y+1	; 0x01
}
    2336:	0f 90       	pop	r0
    2338:	0f 90       	pop	r0
    233a:	0f 90       	pop	r0
    233c:	0f 90       	pop	r0
    233e:	0f 90       	pop	r0
    2340:	cf 91       	pop	r28
    2342:	df 91       	pop	r29
    2344:	08 95       	ret

00002346 <vidWriteByteAndLatch>:

static void vidWriteByteAndLatch(u8 Copy_u8Byte)
{
    2346:	df 93       	push	r29
    2348:	cf 93       	push	r28
    234a:	cd b7       	in	r28, 0x3d	; 61
    234c:	de b7       	in	r29, 0x3e	; 62
    234e:	6d 97       	sbiw	r28, 0x1d	; 29
    2350:	0f b6       	in	r0, 0x3f	; 63
    2352:	f8 94       	cli
    2354:	de bf       	out	0x3e, r29	; 62
    2356:	0f be       	out	0x3f, r0	; 63
    2358:	cd bf       	out	0x3d, r28	; 61
    235a:	8d 8f       	std	Y+29, r24	; 0x1d
    #if LCD_MODE == EIGHT_BIT_MODE
        DIO_voidSetPinValue(RW_GRP,RW_PIN , DIO_LOW);
    235c:	81 e0       	ldi	r24, 0x01	; 1
    235e:	62 e0       	ldi	r22, 0x02	; 2
    2360:	40 e0       	ldi	r20, 0x00	; 0
    2362:	0e 94 3f 0b 	call	0x167e	; 0x167e <DIO_voidSetPinValue>
        DIO_voidSetPinValue(EN_GRP,EN_PIN , DIO_LOW);
    2366:	81 e0       	ldi	r24, 0x01	; 1
    2368:	63 e0       	ldi	r22, 0x03	; 3
    236a:	40 e0       	ldi	r20, 0x00	; 0
    236c:	0e 94 3f 0b 	call	0x167e	; 0x167e <DIO_voidSetPinValue>

        DIO_voidSetPinValue( D7_GRP, D7_PIN , ((Copy_u8Byte >> 7)&1));
    2370:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2372:	98 2f       	mov	r25, r24
    2374:	99 1f       	adc	r25, r25
    2376:	99 27       	eor	r25, r25
    2378:	99 1f       	adc	r25, r25
    237a:	81 e0       	ldi	r24, 0x01	; 1
    237c:	60 e0       	ldi	r22, 0x00	; 0
    237e:	49 2f       	mov	r20, r25
    2380:	0e 94 3f 0b 	call	0x167e	; 0x167e <DIO_voidSetPinValue>
        DIO_voidSetPinValue( D6_GRP, D6_PIN , ((Copy_u8Byte >> 6)&1));
    2384:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2386:	82 95       	swap	r24
    2388:	86 95       	lsr	r24
    238a:	86 95       	lsr	r24
    238c:	83 70       	andi	r24, 0x03	; 3
    238e:	98 2f       	mov	r25, r24
    2390:	91 70       	andi	r25, 0x01	; 1
    2392:	80 e0       	ldi	r24, 0x00	; 0
    2394:	66 e0       	ldi	r22, 0x06	; 6
    2396:	49 2f       	mov	r20, r25
    2398:	0e 94 3f 0b 	call	0x167e	; 0x167e <DIO_voidSetPinValue>
        DIO_voidSetPinValue( D5_GRP, D5_PIN , ((Copy_u8Byte >> 5)&1));
    239c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    239e:	82 95       	swap	r24
    23a0:	86 95       	lsr	r24
    23a2:	87 70       	andi	r24, 0x07	; 7
    23a4:	98 2f       	mov	r25, r24
    23a6:	91 70       	andi	r25, 0x01	; 1
    23a8:	80 e0       	ldi	r24, 0x00	; 0
    23aa:	65 e0       	ldi	r22, 0x05	; 5
    23ac:	49 2f       	mov	r20, r25
    23ae:	0e 94 3f 0b 	call	0x167e	; 0x167e <DIO_voidSetPinValue>
        DIO_voidSetPinValue( D4_GRP, D4_PIN , ((Copy_u8Byte >> 4)&1));
    23b2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    23b4:	82 95       	swap	r24
    23b6:	8f 70       	andi	r24, 0x0F	; 15
    23b8:	98 2f       	mov	r25, r24
    23ba:	91 70       	andi	r25, 0x01	; 1
    23bc:	80 e0       	ldi	r24, 0x00	; 0
    23be:	64 e0       	ldi	r22, 0x04	; 4
    23c0:	49 2f       	mov	r20, r25
    23c2:	0e 94 3f 0b 	call	0x167e	; 0x167e <DIO_voidSetPinValue>
        DIO_voidSetPinValue( D3_GRP, D3_PIN , ((Copy_u8Byte >> 3)&1));
    23c6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    23c8:	86 95       	lsr	r24
    23ca:	86 95       	lsr	r24
    23cc:	86 95       	lsr	r24
    23ce:	98 2f       	mov	r25, r24
    23d0:	91 70       	andi	r25, 0x01	; 1
    23d2:	80 e0       	ldi	r24, 0x00	; 0
    23d4:	63 e0       	ldi	r22, 0x03	; 3
    23d6:	49 2f       	mov	r20, r25
    23d8:	0e 94 3f 0b 	call	0x167e	; 0x167e <DIO_voidSetPinValue>
        DIO_voidSetPinValue( D2_GRP, D2_PIN , ((Copy_u8Byte >> 2)&1));
    23dc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    23de:	86 95       	lsr	r24
    23e0:	86 95       	lsr	r24
    23e2:	98 2f       	mov	r25, r24
    23e4:	91 70       	andi	r25, 0x01	; 1
    23e6:	80 e0       	ldi	r24, 0x00	; 0
    23e8:	62 e0       	ldi	r22, 0x02	; 2
    23ea:	49 2f       	mov	r20, r25
    23ec:	0e 94 3f 0b 	call	0x167e	; 0x167e <DIO_voidSetPinValue>
        DIO_voidSetPinValue( D1_GRP, D1_PIN , ((Copy_u8Byte >> 1)&1));
    23f0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    23f2:	86 95       	lsr	r24
    23f4:	98 2f       	mov	r25, r24
    23f6:	91 70       	andi	r25, 0x01	; 1
    23f8:	81 e0       	ldi	r24, 0x01	; 1
    23fa:	65 e0       	ldi	r22, 0x05	; 5
    23fc:	49 2f       	mov	r20, r25
    23fe:	0e 94 3f 0b 	call	0x167e	; 0x167e <DIO_voidSetPinValue>
        DIO_voidSetPinValue( D0_GRP, D0_PIN , ((Copy_u8Byte >> 0)&1));
    2402:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2404:	98 2f       	mov	r25, r24
    2406:	91 70       	andi	r25, 0x01	; 1
    2408:	80 e0       	ldi	r24, 0x00	; 0
    240a:	60 e0       	ldi	r22, 0x00	; 0
    240c:	49 2f       	mov	r20, r25
    240e:	0e 94 3f 0b 	call	0x167e	; 0x167e <DIO_voidSetPinValue>

        DIO_voidSetPinValue(EN_GRP,EN_PIN , DIO_HIGH);
    2412:	81 e0       	ldi	r24, 0x01	; 1
    2414:	63 e0       	ldi	r22, 0x03	; 3
    2416:	41 e0       	ldi	r20, 0x01	; 1
    2418:	0e 94 3f 0b 	call	0x167e	; 0x167e <DIO_voidSetPinValue>
    241c:	80 e0       	ldi	r24, 0x00	; 0
    241e:	90 e0       	ldi	r25, 0x00	; 0
    2420:	a0 e8       	ldi	r26, 0x80	; 128
    2422:	bf e3       	ldi	r27, 0x3F	; 63
    2424:	89 8f       	std	Y+25, r24	; 0x19
    2426:	9a 8f       	std	Y+26, r25	; 0x1a
    2428:	ab 8f       	std	Y+27, r26	; 0x1b
    242a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    242c:	69 8d       	ldd	r22, Y+25	; 0x19
    242e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2430:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2432:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2434:	20 e0       	ldi	r18, 0x00	; 0
    2436:	30 e0       	ldi	r19, 0x00	; 0
    2438:	4a e7       	ldi	r20, 0x7A	; 122
    243a:	53 e4       	ldi	r21, 0x43	; 67
    243c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2440:	dc 01       	movw	r26, r24
    2442:	cb 01       	movw	r24, r22
    2444:	8d 8b       	std	Y+21, r24	; 0x15
    2446:	9e 8b       	std	Y+22, r25	; 0x16
    2448:	af 8b       	std	Y+23, r26	; 0x17
    244a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    244c:	6d 89       	ldd	r22, Y+21	; 0x15
    244e:	7e 89       	ldd	r23, Y+22	; 0x16
    2450:	8f 89       	ldd	r24, Y+23	; 0x17
    2452:	98 8d       	ldd	r25, Y+24	; 0x18
    2454:	20 e0       	ldi	r18, 0x00	; 0
    2456:	30 e0       	ldi	r19, 0x00	; 0
    2458:	40 e8       	ldi	r20, 0x80	; 128
    245a:	5f e3       	ldi	r21, 0x3F	; 63
    245c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2460:	88 23       	and	r24, r24
    2462:	2c f4       	brge	.+10     	; 0x246e <vidWriteByteAndLatch+0x128>
		__ticks = 1;
    2464:	81 e0       	ldi	r24, 0x01	; 1
    2466:	90 e0       	ldi	r25, 0x00	; 0
    2468:	9c 8b       	std	Y+20, r25	; 0x14
    246a:	8b 8b       	std	Y+19, r24	; 0x13
    246c:	3f c0       	rjmp	.+126    	; 0x24ec <vidWriteByteAndLatch+0x1a6>
	else if (__tmp > 65535)
    246e:	6d 89       	ldd	r22, Y+21	; 0x15
    2470:	7e 89       	ldd	r23, Y+22	; 0x16
    2472:	8f 89       	ldd	r24, Y+23	; 0x17
    2474:	98 8d       	ldd	r25, Y+24	; 0x18
    2476:	20 e0       	ldi	r18, 0x00	; 0
    2478:	3f ef       	ldi	r19, 0xFF	; 255
    247a:	4f e7       	ldi	r20, 0x7F	; 127
    247c:	57 e4       	ldi	r21, 0x47	; 71
    247e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2482:	18 16       	cp	r1, r24
    2484:	4c f5       	brge	.+82     	; 0x24d8 <vidWriteByteAndLatch+0x192>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2486:	69 8d       	ldd	r22, Y+25	; 0x19
    2488:	7a 8d       	ldd	r23, Y+26	; 0x1a
    248a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    248c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    248e:	20 e0       	ldi	r18, 0x00	; 0
    2490:	30 e0       	ldi	r19, 0x00	; 0
    2492:	40 e2       	ldi	r20, 0x20	; 32
    2494:	51 e4       	ldi	r21, 0x41	; 65
    2496:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    249a:	dc 01       	movw	r26, r24
    249c:	cb 01       	movw	r24, r22
    249e:	bc 01       	movw	r22, r24
    24a0:	cd 01       	movw	r24, r26
    24a2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24a6:	dc 01       	movw	r26, r24
    24a8:	cb 01       	movw	r24, r22
    24aa:	9c 8b       	std	Y+20, r25	; 0x14
    24ac:	8b 8b       	std	Y+19, r24	; 0x13
    24ae:	0f c0       	rjmp	.+30     	; 0x24ce <vidWriteByteAndLatch+0x188>
    24b0:	89 e1       	ldi	r24, 0x19	; 25
    24b2:	90 e0       	ldi	r25, 0x00	; 0
    24b4:	9a 8b       	std	Y+18, r25	; 0x12
    24b6:	89 8b       	std	Y+17, r24	; 0x11
    24b8:	89 89       	ldd	r24, Y+17	; 0x11
    24ba:	9a 89       	ldd	r25, Y+18	; 0x12
    24bc:	01 97       	sbiw	r24, 0x01	; 1
    24be:	f1 f7       	brne	.-4      	; 0x24bc <vidWriteByteAndLatch+0x176>
    24c0:	9a 8b       	std	Y+18, r25	; 0x12
    24c2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24c4:	8b 89       	ldd	r24, Y+19	; 0x13
    24c6:	9c 89       	ldd	r25, Y+20	; 0x14
    24c8:	01 97       	sbiw	r24, 0x01	; 1
    24ca:	9c 8b       	std	Y+20, r25	; 0x14
    24cc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24ce:	8b 89       	ldd	r24, Y+19	; 0x13
    24d0:	9c 89       	ldd	r25, Y+20	; 0x14
    24d2:	00 97       	sbiw	r24, 0x00	; 0
    24d4:	69 f7       	brne	.-38     	; 0x24b0 <vidWriteByteAndLatch+0x16a>
    24d6:	14 c0       	rjmp	.+40     	; 0x2500 <vidWriteByteAndLatch+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24d8:	6d 89       	ldd	r22, Y+21	; 0x15
    24da:	7e 89       	ldd	r23, Y+22	; 0x16
    24dc:	8f 89       	ldd	r24, Y+23	; 0x17
    24de:	98 8d       	ldd	r25, Y+24	; 0x18
    24e0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24e4:	dc 01       	movw	r26, r24
    24e6:	cb 01       	movw	r24, r22
    24e8:	9c 8b       	std	Y+20, r25	; 0x14
    24ea:	8b 8b       	std	Y+19, r24	; 0x13
    24ec:	8b 89       	ldd	r24, Y+19	; 0x13
    24ee:	9c 89       	ldd	r25, Y+20	; 0x14
    24f0:	98 8b       	std	Y+16, r25	; 0x10
    24f2:	8f 87       	std	Y+15, r24	; 0x0f
    24f4:	8f 85       	ldd	r24, Y+15	; 0x0f
    24f6:	98 89       	ldd	r25, Y+16	; 0x10
    24f8:	01 97       	sbiw	r24, 0x01	; 1
    24fa:	f1 f7       	brne	.-4      	; 0x24f8 <vidWriteByteAndLatch+0x1b2>
    24fc:	98 8b       	std	Y+16, r25	; 0x10
    24fe:	8f 87       	std	Y+15, r24	; 0x0f
        _delay_ms(1);
        DIO_voidSetPinValue(EN_GRP,EN_PIN , DIO_LOW);
    2500:	81 e0       	ldi	r24, 0x01	; 1
    2502:	63 e0       	ldi	r22, 0x03	; 3
    2504:	40 e0       	ldi	r20, 0x00	; 0
    2506:	0e 94 3f 0b 	call	0x167e	; 0x167e <DIO_voidSetPinValue>
    250a:	80 e0       	ldi	r24, 0x00	; 0
    250c:	90 e0       	ldi	r25, 0x00	; 0
    250e:	a0 e0       	ldi	r26, 0x00	; 0
    2510:	b0 e4       	ldi	r27, 0x40	; 64
    2512:	8b 87       	std	Y+11, r24	; 0x0b
    2514:	9c 87       	std	Y+12, r25	; 0x0c
    2516:	ad 87       	std	Y+13, r26	; 0x0d
    2518:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    251a:	6b 85       	ldd	r22, Y+11	; 0x0b
    251c:	7c 85       	ldd	r23, Y+12	; 0x0c
    251e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2520:	9e 85       	ldd	r25, Y+14	; 0x0e
    2522:	20 e0       	ldi	r18, 0x00	; 0
    2524:	30 e0       	ldi	r19, 0x00	; 0
    2526:	4a e7       	ldi	r20, 0x7A	; 122
    2528:	53 e4       	ldi	r21, 0x43	; 67
    252a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    252e:	dc 01       	movw	r26, r24
    2530:	cb 01       	movw	r24, r22
    2532:	8f 83       	std	Y+7, r24	; 0x07
    2534:	98 87       	std	Y+8, r25	; 0x08
    2536:	a9 87       	std	Y+9, r26	; 0x09
    2538:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    253a:	6f 81       	ldd	r22, Y+7	; 0x07
    253c:	78 85       	ldd	r23, Y+8	; 0x08
    253e:	89 85       	ldd	r24, Y+9	; 0x09
    2540:	9a 85       	ldd	r25, Y+10	; 0x0a
    2542:	20 e0       	ldi	r18, 0x00	; 0
    2544:	30 e0       	ldi	r19, 0x00	; 0
    2546:	40 e8       	ldi	r20, 0x80	; 128
    2548:	5f e3       	ldi	r21, 0x3F	; 63
    254a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    254e:	88 23       	and	r24, r24
    2550:	2c f4       	brge	.+10     	; 0x255c <vidWriteByteAndLatch+0x216>
		__ticks = 1;
    2552:	81 e0       	ldi	r24, 0x01	; 1
    2554:	90 e0       	ldi	r25, 0x00	; 0
    2556:	9e 83       	std	Y+6, r25	; 0x06
    2558:	8d 83       	std	Y+5, r24	; 0x05
    255a:	3f c0       	rjmp	.+126    	; 0x25da <vidWriteByteAndLatch+0x294>
	else if (__tmp > 65535)
    255c:	6f 81       	ldd	r22, Y+7	; 0x07
    255e:	78 85       	ldd	r23, Y+8	; 0x08
    2560:	89 85       	ldd	r24, Y+9	; 0x09
    2562:	9a 85       	ldd	r25, Y+10	; 0x0a
    2564:	20 e0       	ldi	r18, 0x00	; 0
    2566:	3f ef       	ldi	r19, 0xFF	; 255
    2568:	4f e7       	ldi	r20, 0x7F	; 127
    256a:	57 e4       	ldi	r21, 0x47	; 71
    256c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2570:	18 16       	cp	r1, r24
    2572:	4c f5       	brge	.+82     	; 0x25c6 <vidWriteByteAndLatch+0x280>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2574:	6b 85       	ldd	r22, Y+11	; 0x0b
    2576:	7c 85       	ldd	r23, Y+12	; 0x0c
    2578:	8d 85       	ldd	r24, Y+13	; 0x0d
    257a:	9e 85       	ldd	r25, Y+14	; 0x0e
    257c:	20 e0       	ldi	r18, 0x00	; 0
    257e:	30 e0       	ldi	r19, 0x00	; 0
    2580:	40 e2       	ldi	r20, 0x20	; 32
    2582:	51 e4       	ldi	r21, 0x41	; 65
    2584:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2588:	dc 01       	movw	r26, r24
    258a:	cb 01       	movw	r24, r22
    258c:	bc 01       	movw	r22, r24
    258e:	cd 01       	movw	r24, r26
    2590:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2594:	dc 01       	movw	r26, r24
    2596:	cb 01       	movw	r24, r22
    2598:	9e 83       	std	Y+6, r25	; 0x06
    259a:	8d 83       	std	Y+5, r24	; 0x05
    259c:	0f c0       	rjmp	.+30     	; 0x25bc <vidWriteByteAndLatch+0x276>
    259e:	89 e1       	ldi	r24, 0x19	; 25
    25a0:	90 e0       	ldi	r25, 0x00	; 0
    25a2:	9c 83       	std	Y+4, r25	; 0x04
    25a4:	8b 83       	std	Y+3, r24	; 0x03
    25a6:	8b 81       	ldd	r24, Y+3	; 0x03
    25a8:	9c 81       	ldd	r25, Y+4	; 0x04
    25aa:	01 97       	sbiw	r24, 0x01	; 1
    25ac:	f1 f7       	brne	.-4      	; 0x25aa <vidWriteByteAndLatch+0x264>
    25ae:	9c 83       	std	Y+4, r25	; 0x04
    25b0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25b2:	8d 81       	ldd	r24, Y+5	; 0x05
    25b4:	9e 81       	ldd	r25, Y+6	; 0x06
    25b6:	01 97       	sbiw	r24, 0x01	; 1
    25b8:	9e 83       	std	Y+6, r25	; 0x06
    25ba:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25bc:	8d 81       	ldd	r24, Y+5	; 0x05
    25be:	9e 81       	ldd	r25, Y+6	; 0x06
    25c0:	00 97       	sbiw	r24, 0x00	; 0
    25c2:	69 f7       	brne	.-38     	; 0x259e <vidWriteByteAndLatch+0x258>
    25c4:	14 c0       	rjmp	.+40     	; 0x25ee <vidWriteByteAndLatch+0x2a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25c6:	6f 81       	ldd	r22, Y+7	; 0x07
    25c8:	78 85       	ldd	r23, Y+8	; 0x08
    25ca:	89 85       	ldd	r24, Y+9	; 0x09
    25cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    25ce:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25d2:	dc 01       	movw	r26, r24
    25d4:	cb 01       	movw	r24, r22
    25d6:	9e 83       	std	Y+6, r25	; 0x06
    25d8:	8d 83       	std	Y+5, r24	; 0x05
    25da:	8d 81       	ldd	r24, Y+5	; 0x05
    25dc:	9e 81       	ldd	r25, Y+6	; 0x06
    25de:	9a 83       	std	Y+2, r25	; 0x02
    25e0:	89 83       	std	Y+1, r24	; 0x01
    25e2:	89 81       	ldd	r24, Y+1	; 0x01
    25e4:	9a 81       	ldd	r25, Y+2	; 0x02
    25e6:	01 97       	sbiw	r24, 0x01	; 1
    25e8:	f1 f7       	brne	.-4      	; 0x25e6 <vidWriteByteAndLatch+0x2a0>
    25ea:	9a 83       	std	Y+2, r25	; 0x02
    25ec:	89 83       	std	Y+1, r24	; 0x01

        _delay_ms(2);
    #else
    #error LCD mode setting is wrong
    #endif
}
    25ee:	6d 96       	adiw	r28, 0x1d	; 29
    25f0:	0f b6       	in	r0, 0x3f	; 63
    25f2:	f8 94       	cli
    25f4:	de bf       	out	0x3e, r29	; 62
    25f6:	0f be       	out	0x3f, r0	; 63
    25f8:	cd bf       	out	0x3d, r28	; 61
    25fa:	cf 91       	pop	r28
    25fc:	df 91       	pop	r29
    25fe:	08 95       	ret

00002600 <led_init>:
#include "led.h"
#include "../HAL/DIO_init.h"

void led_init(){
    2600:	df 93       	push	r29
    2602:	cf 93       	push	r28
    2604:	cd b7       	in	r28, 0x3d	; 61
    2606:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDirection(DIO_GROUP_D, DIO_PIN_6, DIO_OUTPUT);
    2608:	83 e0       	ldi	r24, 0x03	; 3
    260a:	66 e0       	ldi	r22, 0x06	; 6
    260c:	41 e0       	ldi	r20, 0x01	; 1
    260e:	0e 94 2e 0c 	call	0x185c	; 0x185c <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_GROUP_D, DIO_PIN_7, DIO_OUTPUT);
    2612:	83 e0       	ldi	r24, 0x03	; 3
    2614:	67 e0       	ldi	r22, 0x07	; 7
    2616:	41 e0       	ldi	r20, 0x01	; 1
    2618:	0e 94 2e 0c 	call	0x185c	; 0x185c <DIO_voidSetPinDirection>
	DIO_voidSetPinValue(DIO_GROUP_D, DIO_PIN_6, DIO_LOW);
    261c:	83 e0       	ldi	r24, 0x03	; 3
    261e:	66 e0       	ldi	r22, 0x06	; 6
    2620:	40 e0       	ldi	r20, 0x00	; 0
    2622:	0e 94 3f 0b 	call	0x167e	; 0x167e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_GROUP_D, DIO_PIN_7, DIO_LOW);
    2626:	83 e0       	ldi	r24, 0x03	; 3
    2628:	67 e0       	ldi	r22, 0x07	; 7
    262a:	40 e0       	ldi	r20, 0x00	; 0
    262c:	0e 94 3f 0b 	call	0x167e	; 0x167e <DIO_voidSetPinValue>
}
    2630:	cf 91       	pop	r28
    2632:	df 91       	pop	r29
    2634:	08 95       	ret

00002636 <led_on>:

void led_on(){
    2636:	df 93       	push	r29
    2638:	cf 93       	push	r28
    263a:	cd b7       	in	r28, 0x3d	; 61
    263c:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue(DIO_GROUP_D, DIO_PIN_6, DIO_HIGH);
    263e:	83 e0       	ldi	r24, 0x03	; 3
    2640:	66 e0       	ldi	r22, 0x06	; 6
    2642:	41 e0       	ldi	r20, 0x01	; 1
    2644:	0e 94 3f 0b 	call	0x167e	; 0x167e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_GROUP_D, DIO_PIN_6, DIO_HIGH);
    2648:	83 e0       	ldi	r24, 0x03	; 3
    264a:	66 e0       	ldi	r22, 0x06	; 6
    264c:	41 e0       	ldi	r20, 0x01	; 1
    264e:	0e 94 3f 0b 	call	0x167e	; 0x167e <DIO_voidSetPinValue>

}
    2652:	cf 91       	pop	r28
    2654:	df 91       	pop	r29
    2656:	08 95       	ret

00002658 <led_off>:
void led_off(){
    2658:	df 93       	push	r29
    265a:	cf 93       	push	r28
    265c:	cd b7       	in	r28, 0x3d	; 61
    265e:	de b7       	in	r29, 0x3e	; 62

		DIO_voidSetPinValue(DIO_GROUP_D, DIO_PIN_6, DIO_LOW);
    2660:	83 e0       	ldi	r24, 0x03	; 3
    2662:	66 e0       	ldi	r22, 0x06	; 6
    2664:	40 e0       	ldi	r20, 0x00	; 0
    2666:	0e 94 3f 0b 	call	0x167e	; 0x167e <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DIO_GROUP_D, DIO_PIN_6, DIO_LOW);
    266a:	83 e0       	ldi	r24, 0x03	; 3
    266c:	66 e0       	ldi	r22, 0x06	; 6
    266e:	40 e0       	ldi	r20, 0x00	; 0
    2670:	0e 94 3f 0b 	call	0x167e	; 0x167e <DIO_voidSetPinValue>
}
    2674:	cf 91       	pop	r28
    2676:	df 91       	pop	r29
    2678:	08 95       	ret

0000267a <main>:
#include "APP/T1_LCD/HomeSystem/log_in.h"
#include "APP/T1_LCD/HomeSystem/system.h"
#include "APP/T2_TEMP/ADC/adc.h"

int main(void)
{
    267a:	df 93       	push	r29
    267c:	cf 93       	push	r28
    267e:	cd b7       	in	r28, 0x3d	; 61
    2680:	de b7       	in	r29, 0x3e	; 62
    2682:	64 97       	sbiw	r28, 0x14	; 20
    2684:	0f b6       	in	r0, 0x3f	; 63
    2686:	f8 94       	cli
    2688:	de bf       	out	0x3e, r29	; 62
    268a:	0f be       	out	0x3f, r0	; 63
    268c:	cd bf       	out	0x3d, r28	; 61
	//GPIO_setupPinDirection(PORTB_ID, PIN4_ID, PIN_OUTPUT);
	ADC_init();
    268e:	0e 94 9b 05 	call	0xb36	; 0xb36 <ADC_init>
    DIO_voidSetPinDirection(DIO_GROUP_D, DIO_PIN_6, DIO_OUTPUT);
    2692:	83 e0       	ldi	r24, 0x03	; 3
    2694:	66 e0       	ldi	r22, 0x06	; 6
    2696:	41 e0       	ldi	r20, 0x01	; 1
    2698:	0e 94 2e 0c 	call	0x185c	; 0x185c <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_GROUP_D, DIO_PIN_1, DIO_INPUT);
    269c:	83 e0       	ldi	r24, 0x03	; 3
    269e:	61 e0       	ldi	r22, 0x01	; 1
    26a0:	40 e0       	ldi	r20, 0x00	; 0
    26a2:	0e 94 2e 0c 	call	0x185c	; 0x185c <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_GROUP_A, DIO_PIN_7, DIO_INPUT);
    26a6:	80 e0       	ldi	r24, 0x00	; 0
    26a8:	67 e0       	ldi	r22, 0x07	; 7
    26aa:	40 e0       	ldi	r20, 0x00	; 0
    26ac:	0e 94 2e 0c 	call	0x185c	; 0x185c <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_GROUP_B, DIO_PIN_4, DIO_OUTPUT);
    26b0:	81 e0       	ldi	r24, 0x01	; 1
    26b2:	64 e0       	ldi	r22, 0x04	; 4
    26b4:	41 e0       	ldi	r20, 0x01	; 1
    26b6:	0e 94 2e 0c 	call	0x185c	; 0x185c <DIO_voidSetPinDirection>
	DIO_voidSetPinValue(DIO_GROUP_B, DIO_PIN_4, DIO_LOW);
    26ba:	81 e0       	ldi	r24, 0x01	; 1
    26bc:	64 e0       	ldi	r22, 0x04	; 4
    26be:	40 e0       	ldi	r20, 0x00	; 0
    26c0:	0e 94 3f 0b 	call	0x167e	; 0x167e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_GROUP_D, DIO_PIN_6, DIO_LOW);
    26c4:	83 e0       	ldi	r24, 0x03	; 3
    26c6:	66 e0       	ldi	r22, 0x06	; 6
    26c8:	40 e0       	ldi	r20, 0x00	; 0
    26ca:	0e 94 3f 0b 	call	0x167e	; 0x167e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_GROUP_D, DIO_PIN_7, DIO_LOW);
    26ce:	83 e0       	ldi	r24, 0x03	; 3
    26d0:	67 e0       	ldi	r22, 0x07	; 7
    26d2:	40 e0       	ldi	r20, 0x00	; 0
    26d4:	0e 94 3f 0b 	call	0x167e	; 0x167e <DIO_voidSetPinValue>
	Login_voidInit();
    26d8:	0e 94 79 09 	call	0x12f2	; 0x12f2 <Login_voidInit>
    26dc:	04 c0       	rjmp	.+8      	; 0x26e6 <main+0x6c>
	while (Login_u8GetCompareFlag() != 0) {
		Login_voidEnterPassword();
    26de:	0e 94 98 09 	call	0x1330	; 0x1330 <Login_voidEnterPassword>
		Login_voidCheckPassword();
    26e2:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <Login_voidCheckPassword>
	DIO_voidSetPinDirection(DIO_GROUP_B, DIO_PIN_4, DIO_OUTPUT);
	DIO_voidSetPinValue(DIO_GROUP_B, DIO_PIN_4, DIO_LOW);
	DIO_voidSetPinValue(DIO_GROUP_D, DIO_PIN_6, DIO_LOW);
	DIO_voidSetPinValue(DIO_GROUP_D, DIO_PIN_7, DIO_LOW);
	Login_voidInit();
	while (Login_u8GetCompareFlag() != 0) {
    26e6:	0e 94 0d 0b 	call	0x161a	; 0x161a <Login_u8GetCompareFlag>
    26ea:	88 23       	and	r24, r24
    26ec:	c1 f7       	brne	.-16     	; 0x26de <main+0x64>
		Login_voidEnterPassword();
		Login_voidCheckPassword();
	}
	system_voidInit();
    26ee:	0e 94 16 0b 	call	0x162c	; 0x162c <system_voidInit>
	u8 key,privious=0;
    26f2:	1b 8a       	std	Y+19, r1	; 0x13
	while(1){
		key = KEYPAD_u8GetPressedKey();
    26f4:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <KEYPAD_u8GetPressedKey>
    26f8:	8c 8b       	std	Y+20, r24	; 0x14
		/*while (privious==key){;}*/
		if(key == '1'){
    26fa:	8c 89       	ldd	r24, Y+20	; 0x14
    26fc:	81 33       	cpi	r24, 0x31	; 49
    26fe:	59 f4       	brne	.+22     	; 0x2716 <main+0x9c>
			DIO_voidSetPinValue(DIO_GROUP_D, DIO_PIN_6, DIO_HIGH);
    2700:	83 e0       	ldi	r24, 0x03	; 3
    2702:	66 e0       	ldi	r22, 0x06	; 6
    2704:	41 e0       	ldi	r20, 0x01	; 1
    2706:	0e 94 3f 0b 	call	0x167e	; 0x167e <DIO_voidSetPinValue>
			DIO_voidSetPinValue(DIO_GROUP_D, DIO_PIN_7, DIO_HIGH);
    270a:	83 e0       	ldi	r24, 0x03	; 3
    270c:	67 e0       	ldi	r22, 0x07	; 7
    270e:	41 e0       	ldi	r20, 0x01	; 1
    2710:	0e 94 3f 0b 	call	0x167e	; 0x167e <DIO_voidSetPinValue>
    2714:	0d c0       	rjmp	.+26     	; 0x2730 <main+0xb6>
		}
		else if(key == '2'){
    2716:	8c 89       	ldd	r24, Y+20	; 0x14
    2718:	82 33       	cpi	r24, 0x32	; 50
    271a:	51 f4       	brne	.+20     	; 0x2730 <main+0xb6>
			DIO_voidSetPinValue(DIO_GROUP_D, DIO_PIN_6, DIO_LOW);
    271c:	83 e0       	ldi	r24, 0x03	; 3
    271e:	66 e0       	ldi	r22, 0x06	; 6
    2720:	40 e0       	ldi	r20, 0x00	; 0
    2722:	0e 94 3f 0b 	call	0x167e	; 0x167e <DIO_voidSetPinValue>
			DIO_voidSetPinValue(DIO_GROUP_D, DIO_PIN_7, DIO_LOW);
    2726:	83 e0       	ldi	r24, 0x03	; 3
    2728:	67 e0       	ldi	r22, 0x07	; 7
    272a:	40 e0       	ldi	r20, 0x00	; 0
    272c:	0e 94 3f 0b 	call	0x167e	; 0x167e <DIO_voidSetPinValue>
		}
		privious=key;
    2730:	8c 89       	ldd	r24, Y+20	; 0x14
    2732:	8b 8b       	std	Y+19, r24	; 0x13
		u32 ADC_Read = ADC_readChannel(1);
    2734:	81 e0       	ldi	r24, 0x01	; 1
    2736:	90 e0       	ldi	r25, 0x00	; 0
    2738:	0e 94 a9 05 	call	0xb52	; 0xb52 <ADC_readChannel>
    273c:	aa 27       	eor	r26, r26
    273e:	97 fd       	sbrc	r25, 7
    2740:	a0 95       	com	r26
    2742:	ba 2f       	mov	r27, r26
    2744:	8f 87       	std	Y+15, r24	; 0x0f
    2746:	98 8b       	std	Y+16, r25	; 0x10
    2748:	a9 8b       	std	Y+17, r26	; 0x11
    274a:	ba 8b       	std	Y+18, r27	; 0x12
		if (ADC_Read >=61){
    274c:	8f 85       	ldd	r24, Y+15	; 0x0f
    274e:	98 89       	ldd	r25, Y+16	; 0x10
    2750:	a9 89       	ldd	r26, Y+17	; 0x11
    2752:	ba 89       	ldd	r27, Y+18	; 0x12
    2754:	8d 33       	cpi	r24, 0x3D	; 61
    2756:	91 05       	cpc	r25, r1
    2758:	a1 05       	cpc	r26, r1
    275a:	b1 05       	cpc	r27, r1
    275c:	08 f4       	brcc	.+2      	; 0x2760 <main+0xe6>
    275e:	7d c0       	rjmp	.+250    	; 0x285a <main+0x1e0>
			DIO_voidSetPinValue(DIO_GROUP_B, DIO_PIN_4, DIO_HIGH);
    2760:	81 e0       	ldi	r24, 0x01	; 1
    2762:	64 e0       	ldi	r22, 0x04	; 4
    2764:	41 e0       	ldi	r20, 0x01	; 1
    2766:	0e 94 3f 0b 	call	0x167e	; 0x167e <DIO_voidSetPinValue>
    276a:	80 e0       	ldi	r24, 0x00	; 0
    276c:	90 e0       	ldi	r25, 0x00	; 0
    276e:	aa ef       	ldi	r26, 0xFA	; 250
    2770:	b3 e4       	ldi	r27, 0x43	; 67
    2772:	8b 87       	std	Y+11, r24	; 0x0b
    2774:	9c 87       	std	Y+12, r25	; 0x0c
    2776:	ad 87       	std	Y+13, r26	; 0x0d
    2778:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    277a:	6b 85       	ldd	r22, Y+11	; 0x0b
    277c:	7c 85       	ldd	r23, Y+12	; 0x0c
    277e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2780:	9e 85       	ldd	r25, Y+14	; 0x0e
    2782:	20 e0       	ldi	r18, 0x00	; 0
    2784:	30 e0       	ldi	r19, 0x00	; 0
    2786:	4a e7       	ldi	r20, 0x7A	; 122
    2788:	53 e4       	ldi	r21, 0x43	; 67
    278a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    278e:	dc 01       	movw	r26, r24
    2790:	cb 01       	movw	r24, r22
    2792:	8f 83       	std	Y+7, r24	; 0x07
    2794:	98 87       	std	Y+8, r25	; 0x08
    2796:	a9 87       	std	Y+9, r26	; 0x09
    2798:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    279a:	6f 81       	ldd	r22, Y+7	; 0x07
    279c:	78 85       	ldd	r23, Y+8	; 0x08
    279e:	89 85       	ldd	r24, Y+9	; 0x09
    27a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    27a2:	20 e0       	ldi	r18, 0x00	; 0
    27a4:	30 e0       	ldi	r19, 0x00	; 0
    27a6:	40 e8       	ldi	r20, 0x80	; 128
    27a8:	5f e3       	ldi	r21, 0x3F	; 63
    27aa:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    27ae:	88 23       	and	r24, r24
    27b0:	2c f4       	brge	.+10     	; 0x27bc <main+0x142>
		__ticks = 1;
    27b2:	81 e0       	ldi	r24, 0x01	; 1
    27b4:	90 e0       	ldi	r25, 0x00	; 0
    27b6:	9e 83       	std	Y+6, r25	; 0x06
    27b8:	8d 83       	std	Y+5, r24	; 0x05
    27ba:	3f c0       	rjmp	.+126    	; 0x283a <main+0x1c0>
	else if (__tmp > 65535)
    27bc:	6f 81       	ldd	r22, Y+7	; 0x07
    27be:	78 85       	ldd	r23, Y+8	; 0x08
    27c0:	89 85       	ldd	r24, Y+9	; 0x09
    27c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    27c4:	20 e0       	ldi	r18, 0x00	; 0
    27c6:	3f ef       	ldi	r19, 0xFF	; 255
    27c8:	4f e7       	ldi	r20, 0x7F	; 127
    27ca:	57 e4       	ldi	r21, 0x47	; 71
    27cc:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    27d0:	18 16       	cp	r1, r24
    27d2:	4c f5       	brge	.+82     	; 0x2826 <main+0x1ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    27d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    27d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    27da:	9e 85       	ldd	r25, Y+14	; 0x0e
    27dc:	20 e0       	ldi	r18, 0x00	; 0
    27de:	30 e0       	ldi	r19, 0x00	; 0
    27e0:	40 e2       	ldi	r20, 0x20	; 32
    27e2:	51 e4       	ldi	r21, 0x41	; 65
    27e4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    27e8:	dc 01       	movw	r26, r24
    27ea:	cb 01       	movw	r24, r22
    27ec:	bc 01       	movw	r22, r24
    27ee:	cd 01       	movw	r24, r26
    27f0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27f4:	dc 01       	movw	r26, r24
    27f6:	cb 01       	movw	r24, r22
    27f8:	9e 83       	std	Y+6, r25	; 0x06
    27fa:	8d 83       	std	Y+5, r24	; 0x05
    27fc:	0f c0       	rjmp	.+30     	; 0x281c <main+0x1a2>
    27fe:	89 e1       	ldi	r24, 0x19	; 25
    2800:	90 e0       	ldi	r25, 0x00	; 0
    2802:	9c 83       	std	Y+4, r25	; 0x04
    2804:	8b 83       	std	Y+3, r24	; 0x03
    2806:	8b 81       	ldd	r24, Y+3	; 0x03
    2808:	9c 81       	ldd	r25, Y+4	; 0x04
    280a:	01 97       	sbiw	r24, 0x01	; 1
    280c:	f1 f7       	brne	.-4      	; 0x280a <main+0x190>
    280e:	9c 83       	std	Y+4, r25	; 0x04
    2810:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2812:	8d 81       	ldd	r24, Y+5	; 0x05
    2814:	9e 81       	ldd	r25, Y+6	; 0x06
    2816:	01 97       	sbiw	r24, 0x01	; 1
    2818:	9e 83       	std	Y+6, r25	; 0x06
    281a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    281c:	8d 81       	ldd	r24, Y+5	; 0x05
    281e:	9e 81       	ldd	r25, Y+6	; 0x06
    2820:	00 97       	sbiw	r24, 0x00	; 0
    2822:	69 f7       	brne	.-38     	; 0x27fe <main+0x184>
    2824:	14 c0       	rjmp	.+40     	; 0x284e <main+0x1d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2826:	6f 81       	ldd	r22, Y+7	; 0x07
    2828:	78 85       	ldd	r23, Y+8	; 0x08
    282a:	89 85       	ldd	r24, Y+9	; 0x09
    282c:	9a 85       	ldd	r25, Y+10	; 0x0a
    282e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2832:	dc 01       	movw	r26, r24
    2834:	cb 01       	movw	r24, r22
    2836:	9e 83       	std	Y+6, r25	; 0x06
    2838:	8d 83       	std	Y+5, r24	; 0x05
    283a:	8d 81       	ldd	r24, Y+5	; 0x05
    283c:	9e 81       	ldd	r25, Y+6	; 0x06
    283e:	9a 83       	std	Y+2, r25	; 0x02
    2840:	89 83       	std	Y+1, r24	; 0x01
    2842:	89 81       	ldd	r24, Y+1	; 0x01
    2844:	9a 81       	ldd	r25, Y+2	; 0x02
    2846:	01 97       	sbiw	r24, 0x01	; 1
    2848:	f1 f7       	brne	.-4      	; 0x2846 <main+0x1cc>
    284a:	9a 83       	std	Y+2, r25	; 0x02
    284c:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(500);
			DIO_voidSetPinValue(DIO_GROUP_B, DIO_PIN_4, DIO_LOW);
    284e:	81 e0       	ldi	r24, 0x01	; 1
    2850:	64 e0       	ldi	r22, 0x04	; 4
    2852:	40 e0       	ldi	r20, 0x00	; 0
    2854:	0e 94 3f 0b 	call	0x167e	; 0x167e <DIO_voidSetPinValue>
    2858:	4d cf       	rjmp	.-358    	; 0x26f4 <main+0x7a>
		}else{
			DIO_voidSetPinValue(DIO_GROUP_B, DIO_PIN_4, DIO_LOW);
    285a:	81 e0       	ldi	r24, 0x01	; 1
    285c:	64 e0       	ldi	r22, 0x04	; 4
    285e:	40 e0       	ldi	r20, 0x00	; 0
    2860:	0e 94 3f 0b 	call	0x167e	; 0x167e <DIO_voidSetPinValue>
    2864:	47 cf       	rjmp	.-370    	; 0x26f4 <main+0x7a>

00002866 <__divmodsi4>:
    2866:	97 fb       	bst	r25, 7
    2868:	09 2e       	mov	r0, r25
    286a:	05 26       	eor	r0, r21
    286c:	0e d0       	rcall	.+28     	; 0x288a <__divmodsi4_neg1>
    286e:	57 fd       	sbrc	r21, 7
    2870:	04 d0       	rcall	.+8      	; 0x287a <__divmodsi4_neg2>
    2872:	14 d0       	rcall	.+40     	; 0x289c <__udivmodsi4>
    2874:	0a d0       	rcall	.+20     	; 0x288a <__divmodsi4_neg1>
    2876:	00 1c       	adc	r0, r0
    2878:	38 f4       	brcc	.+14     	; 0x2888 <__divmodsi4_exit>

0000287a <__divmodsi4_neg2>:
    287a:	50 95       	com	r21
    287c:	40 95       	com	r20
    287e:	30 95       	com	r19
    2880:	21 95       	neg	r18
    2882:	3f 4f       	sbci	r19, 0xFF	; 255
    2884:	4f 4f       	sbci	r20, 0xFF	; 255
    2886:	5f 4f       	sbci	r21, 0xFF	; 255

00002888 <__divmodsi4_exit>:
    2888:	08 95       	ret

0000288a <__divmodsi4_neg1>:
    288a:	f6 f7       	brtc	.-4      	; 0x2888 <__divmodsi4_exit>
    288c:	90 95       	com	r25
    288e:	80 95       	com	r24
    2890:	70 95       	com	r23
    2892:	61 95       	neg	r22
    2894:	7f 4f       	sbci	r23, 0xFF	; 255
    2896:	8f 4f       	sbci	r24, 0xFF	; 255
    2898:	9f 4f       	sbci	r25, 0xFF	; 255
    289a:	08 95       	ret

0000289c <__udivmodsi4>:
    289c:	a1 e2       	ldi	r26, 0x21	; 33
    289e:	1a 2e       	mov	r1, r26
    28a0:	aa 1b       	sub	r26, r26
    28a2:	bb 1b       	sub	r27, r27
    28a4:	fd 01       	movw	r30, r26
    28a6:	0d c0       	rjmp	.+26     	; 0x28c2 <__udivmodsi4_ep>

000028a8 <__udivmodsi4_loop>:
    28a8:	aa 1f       	adc	r26, r26
    28aa:	bb 1f       	adc	r27, r27
    28ac:	ee 1f       	adc	r30, r30
    28ae:	ff 1f       	adc	r31, r31
    28b0:	a2 17       	cp	r26, r18
    28b2:	b3 07       	cpc	r27, r19
    28b4:	e4 07       	cpc	r30, r20
    28b6:	f5 07       	cpc	r31, r21
    28b8:	20 f0       	brcs	.+8      	; 0x28c2 <__udivmodsi4_ep>
    28ba:	a2 1b       	sub	r26, r18
    28bc:	b3 0b       	sbc	r27, r19
    28be:	e4 0b       	sbc	r30, r20
    28c0:	f5 0b       	sbc	r31, r21

000028c2 <__udivmodsi4_ep>:
    28c2:	66 1f       	adc	r22, r22
    28c4:	77 1f       	adc	r23, r23
    28c6:	88 1f       	adc	r24, r24
    28c8:	99 1f       	adc	r25, r25
    28ca:	1a 94       	dec	r1
    28cc:	69 f7       	brne	.-38     	; 0x28a8 <__udivmodsi4_loop>
    28ce:	60 95       	com	r22
    28d0:	70 95       	com	r23
    28d2:	80 95       	com	r24
    28d4:	90 95       	com	r25
    28d6:	9b 01       	movw	r18, r22
    28d8:	ac 01       	movw	r20, r24
    28da:	bd 01       	movw	r22, r26
    28dc:	cf 01       	movw	r24, r30
    28de:	08 95       	ret

000028e0 <__prologue_saves__>:
    28e0:	2f 92       	push	r2
    28e2:	3f 92       	push	r3
    28e4:	4f 92       	push	r4
    28e6:	5f 92       	push	r5
    28e8:	6f 92       	push	r6
    28ea:	7f 92       	push	r7
    28ec:	8f 92       	push	r8
    28ee:	9f 92       	push	r9
    28f0:	af 92       	push	r10
    28f2:	bf 92       	push	r11
    28f4:	cf 92       	push	r12
    28f6:	df 92       	push	r13
    28f8:	ef 92       	push	r14
    28fa:	ff 92       	push	r15
    28fc:	0f 93       	push	r16
    28fe:	1f 93       	push	r17
    2900:	cf 93       	push	r28
    2902:	df 93       	push	r29
    2904:	cd b7       	in	r28, 0x3d	; 61
    2906:	de b7       	in	r29, 0x3e	; 62
    2908:	ca 1b       	sub	r28, r26
    290a:	db 0b       	sbc	r29, r27
    290c:	0f b6       	in	r0, 0x3f	; 63
    290e:	f8 94       	cli
    2910:	de bf       	out	0x3e, r29	; 62
    2912:	0f be       	out	0x3f, r0	; 63
    2914:	cd bf       	out	0x3d, r28	; 61
    2916:	09 94       	ijmp

00002918 <__epilogue_restores__>:
    2918:	2a 88       	ldd	r2, Y+18	; 0x12
    291a:	39 88       	ldd	r3, Y+17	; 0x11
    291c:	48 88       	ldd	r4, Y+16	; 0x10
    291e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2920:	6e 84       	ldd	r6, Y+14	; 0x0e
    2922:	7d 84       	ldd	r7, Y+13	; 0x0d
    2924:	8c 84       	ldd	r8, Y+12	; 0x0c
    2926:	9b 84       	ldd	r9, Y+11	; 0x0b
    2928:	aa 84       	ldd	r10, Y+10	; 0x0a
    292a:	b9 84       	ldd	r11, Y+9	; 0x09
    292c:	c8 84       	ldd	r12, Y+8	; 0x08
    292e:	df 80       	ldd	r13, Y+7	; 0x07
    2930:	ee 80       	ldd	r14, Y+6	; 0x06
    2932:	fd 80       	ldd	r15, Y+5	; 0x05
    2934:	0c 81       	ldd	r16, Y+4	; 0x04
    2936:	1b 81       	ldd	r17, Y+3	; 0x03
    2938:	aa 81       	ldd	r26, Y+2	; 0x02
    293a:	b9 81       	ldd	r27, Y+1	; 0x01
    293c:	ce 0f       	add	r28, r30
    293e:	d1 1d       	adc	r29, r1
    2940:	0f b6       	in	r0, 0x3f	; 63
    2942:	f8 94       	cli
    2944:	de bf       	out	0x3e, r29	; 62
    2946:	0f be       	out	0x3f, r0	; 63
    2948:	cd bf       	out	0x3d, r28	; 61
    294a:	ed 01       	movw	r28, r26
    294c:	08 95       	ret

0000294e <strcmp>:
    294e:	fb 01       	movw	r30, r22
    2950:	dc 01       	movw	r26, r24
    2952:	8d 91       	ld	r24, X+
    2954:	01 90       	ld	r0, Z+
    2956:	80 19       	sub	r24, r0
    2958:	01 10       	cpse	r0, r1
    295a:	d9 f3       	breq	.-10     	; 0x2952 <strcmp+0x4>
    295c:	99 0b       	sbc	r25, r25
    295e:	08 95       	ret

00002960 <_exit>:
    2960:	f8 94       	cli

00002962 <__stop_program>:
    2962:	ff cf       	rjmp	.-2      	; 0x2962 <__stop_program>
